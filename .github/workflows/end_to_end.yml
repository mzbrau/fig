name: End To End

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:

  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      # Prevent running in parallel
      max-parallel: 1
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
         dotnet-version: 8.0.x
        
    - name: Install dotnet-serve
      run: dotnet tool install --global dotnet-serve

    - name: Install required workloads
      run: dotnet workload install aspire

    - name: Restore dependencies
      run: dotnet restore ./src/Fig.sln

    - name: Publish api
      run: dotnet publish ./src/api/Fig.Api/Fig.Api.csproj

    - name: Publish web
      run: dotnet publish ./src/web/Fig.Web/Fig.Web.csproj

    - name: Build Test
      run: dotnet build ./src/tests/Fig.EndToEnd.Tests/Fig.EndToEnd.Tests.csproj --no-restore

    - name: Install Playwright dependencies
      # Only needed on Linux
      if: ${{ runner.os == 'Linux' }}
      run: pwsh ./src/tests/Fig.EndToEnd.Tests/bin/Debug/net8.0/playwright.ps1 install-deps

    - name: Install Playwright
      run: pwsh ./src/tests/Fig.EndToEnd.Tests/bin/Debug/net8.0/playwright.ps1 install

    - name: Start application
      shell: bash
      run: |
        dotnet run --project ./src/api/Fig.Api/Fig.Api.csproj & 

      # This step starts a local webserver and waits until it is available.
    - name: Start application
      shell: bash
      run: |
        echo "Create file as workaround for https://github.com/natemcmaster/dotnet-serve/issues/149" >> index.html
        dotnet serve --directory ./src/web/Fig.Web/bin/Release/net8.0/publish/wwwroot --fallback-file index.html --port 7148 &
        BASE_URL=http://localhost:7148/
        echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV

        timeout=30  # Timeout in seconds
        start_time=$(date +%s)  # Get current timestamp in seconds

        while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))

            if (( elapsed_time >= timeout )); then
                echo "Timeout reached. Server not available after $elapsed_time seconds."
                exit 1  # Exit with non-zero status indicating failure
            fi

            # Check if server is reachable with curl
            if curl -f $BASE_URL &> /dev/null; then
                echo "Server is now available at $BASE_URL after $elapsed_time seconds."
                break
            else
                echo "Waiting for server to become available at $BASE_URL... Elapsed time: $elapsed_time seconds"
                sleep 1  # Wait for 1 second before checking again
            fi
        done

    - name: Playwright test Webkit
      # Web assembly is not fully supported on Windows and Webkit (https://github.com/microsoft/playwright/issues/2876)
      if: ${{ runner.os != 'Windows' }}
      run: dotnet test ./src/tests/Fig.EndToEnd.Tests/Fig.EndToEnd.Tests.csproj --no-restore -- Playwright.BrowserName=webkit
        
    - name: Playwright test Firefox
      run: dotnet test ./src/tests/Fig.EndToEnd.Tests/Fig.EndToEnd.Tests.csproj --no-restore -- Playwright.BrowserName=firefox

    - name: Playwright test Chromium
      run: dotnet test ./src/tests/Fig.EndToEnd.Tests/Fig.EndToEnd.Tests.csproj --no-restore -- Playwright.BrowserName=chromium

    - name: Upload Playwright logs
      if: failure()
      uses: actions/upload-artifact@v4.3.2
      with:
        name: playwright
        retention-days: 2
        path: |
          ./src/tests/Fig.EndToEnd.Tests/bin/Debug/net8.0/playwright-traces/**/*.*