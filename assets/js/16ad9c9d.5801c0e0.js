"use strict";(self.webpackChunkfig_documentation=self.webpackChunkfig_documentation||[]).push([[7766],{4085:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"features/lookup-tables","title":"Lookup Tables","description":"Fig supports the concept of lookup tables. This is where a set of setting values supplied by a client can be used to create a dropdown to help the user select a valid value.","source":"@site/docs/features/11-lookup-tables.md","sourceDirName":"features","slug":"/features/lookup-tables","permalink":"/docs/features/lookup-tables","draft":false,"unlisted":false,"editUrl":"https://github.com/mzbrau/fig/tree/main/doc/fig-documentation/docs/features/11-lookup-tables.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"sidebar_label":"Lookup Tables"},"sidebar":"tutorialSidebar","previous":{"title":"Time Machine","permalink":"/docs/features/scheduling"},"next":{"title":"Keyboard Shortcuts","permalink":"/docs/features/keyboard-shortcuts"}}');var i=a(4848),s=a(8453);const o={sidebar_position:11,sidebar_label:"Lookup Tables"},l="Lookup Tables",r={},d=[{value:"Valid Values",id:"valid-values",level:2},{value:"Alias",id:"alias",level:2},{value:"Editing Lookup Tables",id:"editing-lookup-tables",level:2},{value:"Overriding via Environment Variable",id:"overriding-via-environment-variable",level:2},{value:"Lookup Table API",id:"lookup-table-api",level:2}];function p(e){const t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"lookup-tables",children:"Lookup Tables"})}),"\n",(0,i.jsx)(t.p,{children:"Fig supports the concept of lookup tables. This is where a set of setting values supplied by a client can be used to create a dropdown to help the user select a valid value."}),"\n",(0,i.jsx)(t.p,{children:"There are 2 potential use cases for this feature:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Constraining the user to a set of valid values that are not known at the time of writing the application."}),"\n",(0,i.jsx)(t.li,{children:"Adding a helpful alias to dropdown values to make it easier to understand."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"valid-values",children:"Valid Values"}),"\n",(0,i.jsxs)(t.p,{children:["Fig has support for adding ",(0,i.jsx)(t.a,{href:"/docs/features/settings-management/valid-values",children:"valid values"})," in the application and this assists the user to input a valid value by constraining their choices to a set of valid options."]}),"\n",(0,i.jsx)(t.p,{children:"However, in some cases, the list of valid options is now known. Consider the case where an application integrates towards an external system. The external system has a configurable structure where types can be configured. The application does not know ahead of types which types will be configured, but these are known at runtime. A lookup table can be created containing all the configured types and then in the application configuration, a dropdown will be created with the types for use."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[Setting("Types defined in the system")]\n[LookupTable("Types")]\npublic string? Types { get; set; }\n'})}),"\n",(0,i.jsx)(t.p,{children:"With this lookup table defined:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{alt:"alt text",src:a(6388).A+"",width:"2806",height:"764"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.em,{children:"Lookup table without an alias defined"})]}),"\n",(0,i.jsx)(t.p,{children:"The user gets a drop down list."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{alt:"alt text",src:a(7773).A+"",width:"2138",height:"700"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.em,{children:"Dropdown defined by the lookup table"})]}),"\n",(0,i.jsx)(t.p,{children:"If the existing value is not in the list, it is added but marked as invalid."}),"\n",(0,i.jsx)(t.p,{children:"If no lookup table is defined, the property is just handled as a normal string property."}),"\n",(0,i.jsx)(t.h2,{id:"alias",children:"Alias"}),"\n",(0,i.jsx)(t.p,{children:"Another example of where this feature might be useful is providing context to meaningless values."}),"\n",(0,i.jsx)(t.p,{children:"For example if your application needs to reference a database id defined by another system. The id will just be a number of guid and can be difficult to configure."}),"\n",(0,i.jsx)(t.p,{children:"My adding mapping in the lookup table between the valid values and an alias of what they actually are, it can be easier to configure."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[Setting("The id of the type that should be supported by this service")]\n[LookupTable("Types")]\npublic long? SupportedTypeId { get; set; }\n'})}),"\n",(0,i.jsx)(t.p,{children:"The lookup table is defined with an alias:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:a(9304).A+"",width:"2302",height:"678"})}),"\n",(0,i.jsx)(t.p,{children:"Then the dropdown contains alias items"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:a(5188).A+"",width:"2086",height:"692"})}),"\n",(0,i.jsx)(t.p,{children:"When the user selects an item, only the value is set. The alias is just there for the user facing display."}),"\n",(0,i.jsx)(t.h2,{id:"editing-lookup-tables",children:"Editing Lookup Tables"}),"\n",(0,i.jsx)(t.p,{children:"When editing the lookup tables use a comma to separate the key and value and a new line to separate each row."}),"\n",(0,i.jsx)(t.p,{children:"If there is no alias, just separate them by new lines."}),"\n",(0,i.jsx)(t.p,{children:"You will need to reload the page for this change to take effect."}),"\n",(0,i.jsx)(t.h2,{id:"overriding-via-environment-variable",children:"Overriding via Environment Variable"}),"\n",(0,i.jsxs)(t.p,{children:["The lookup table key can be overridden using an environment variable. It should be in the format ",(0,i.jsx)(t.code,{children:"FIG_SettingName_LOOKUPTABLEKEY"})]}),"\n",(0,i.jsx)(t.p,{children:"Use a value of 'null' to clear the current value."}),"\n",(0,i.jsx)(t.h2,{id:"lookup-table-api",children:"Lookup Table API"}),"\n",(0,i.jsxs)(t.p,{children:["See ",(0,i.jsx)(t.a,{href:"/docs/integration-points/lookup-table-integration",children:"Lookup Table Integration"})," for details."]})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},5188:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/drop-down-with-alias-1d392ad58094e4841ba5dae93ed7df0c.png"},6388:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/lookup-table-no-alias-66655d3697e3c22ded34e974edb17e88.png"},7773:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/dropdown-lookup-table-2ca25b77d1d4dec96b96eefba253d5b0.png"},8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>l});var n=a(6540);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}},9304:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/lookup-table-alias-dc053e9d1f83b5c7bbdef8278259d67a.png"}}]);