"use strict";(self.webpackChunkfig_documentation=self.webpackChunkfig_documentation||[]).push([[4980],{8329:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"overview/comparison-to-alternatives","title":"Comparison To Alternatives","description":"Modern dotnet applications might be configured to draw from a range of different configuration providers. This provides a lot of flexibility but can also be confusing for those configuring the application. Fig is also a configuration provider and as such, can work along side other configuration sources. However, fig is more than just a configuration provider. It is a complete solution for managing settings across multiple micro-services. This is because when an application starts up, it registers its configuration with Fig meaning those settings are now viewable and editable from within the Fig web application.","source":"@site/docs/overview/comparison-to-alternatives.md","sourceDirName":"overview","slug":"/overview/comparison-to-alternatives","permalink":"/docs/overview/comparison-to-alternatives","draft":false,"unlisted":false,"editUrl":"https://github.com/mzbrau/fig/tree/main/doc/fig-documentation/docs/overview/comparison-to-alternatives.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Architecture","permalink":"/docs/overview/architecture"},"next":{"title":"Features","permalink":"/docs/category/features"}}');var o=n(4848),r=n(8453);const s={sidebar_position:3},a="Comparison To Alternatives",c={},l=[];function d(e){const i={h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"comparison-to-alternatives",children:"Comparison To Alternatives"})}),"\n",(0,o.jsx)(i.p,{children:"Modern dotnet applications might be configured to draw from a range of different configuration providers. This provides a lot of flexibility but can also be confusing for those configuring the application. Fig is also a configuration provider and as such, can work along side other configuration sources. However, fig is more than just a configuration provider. It is a complete solution for managing settings across multiple micro-services. This is because when an application starts up, it registers its configuration with Fig meaning those settings are now viewable and editable from within the Fig web application."}),"\n",(0,o.jsx)(i.p,{children:"Consider Fig if your solution:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"Is comprised of multiple applications or services requiring settings"}),"\n",(0,o.jsx)(i.li,{children:"Requires settings changes depending on the installation for example in different environments or at different installation sites"}),"\n",(0,o.jsx)(i.li,{children:"Is written in dotnet"}),"\n"]}),"\n",(0,o.jsx)(i.p,{children:"Do not consider fig if your solution:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"Is not dotnet based"}),"\n",(0,o.jsx)(i.li,{children:"Does not have configuration settings"}),"\n",(0,o.jsx)(i.li,{children:"Is comprised of a single application (you can still use Fig here, but the benifits are reduced)"}),"\n",(0,o.jsx)(i.li,{children:"Is only installed in a single production environment where settings are rarely changed."}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>a});var t=n(6540);const o={},r=t.createContext(o);function s(e){const i=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);