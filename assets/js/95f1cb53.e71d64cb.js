"use strict";(self.webpackChunkfig_documentation=self.webpackChunkfig_documentation||[]).push([[1569],{80825:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"features/live-reload","title":"Live Reload","description":"By default, clients using the Fig.Client nuget package will support the live reload of settings. This means that when a setting value is updated in the Web Client, that updated value will immediately be available in the settings class for that client. In addition, a settings changed event will be raised on the settings class which can be used to take action when it occurs.","source":"@site/docs/features/21-live-reload.md","sourceDirName":"features","slug":"/features/live-reload","permalink":"/docs/next/features/live-reload","draft":false,"unlisted":false,"editUrl":"https://github.com/mzbrau/fig/tree/main/doc/fig-documentation/docs/features/21-live-reload.md","tags":[],"version":"current","sidebarPosition":21,"frontMatter":{"sidebar_position":21,"sidebar_label":"Live Reload"},"sidebar":"tutorialSidebar","previous":{"title":"Offline Settings","permalink":"/docs/next/features/offline-settings"},"next":{"title":"Externally Managed Settings","permalink":"/docs/next/features/externally-managed-settings"}}');var a=n(74848),s=n(28453);const l={sidebar_position:21,sidebar_label:"Live Reload"},o="Live Reload",r={},d=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"live-reload",children:"Live Reload"})}),"\n",(0,a.jsxs)(t.p,{children:["By default, clients using the ",(0,a.jsx)(t.code,{children:"Fig.Client"})," nuget package will support the live reload of settings. This means that when a setting value is updated in the Web Client, that updated value will immediately be available in the settings class for that client. In addition, a settings changed event will be raised on the settings class which can be used to take action when it occurs."]}),"\n",(0,a.jsx)(t.p,{children:"If live reload is not the desired behavior, it can be disabled in the options like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'var configuration = new ConfigurationBuilder()\n    .AddFig<Settings>(o =>\n    {\n        o.ClientName = "AspNetApi";\n        o.LiveReload = false;\n    });\n'})}),"\n",(0,a.jsx)(t.p,{children:"Note that this will only change the 'default' value for the client. It might be overridden by the Fig web application if the setting is changed there."})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var i=n(96540);const a={},s=i.createContext(a);function l(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);