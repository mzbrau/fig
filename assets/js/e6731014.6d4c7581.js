"use strict";(self.webpackChunkfig_documentation=self.webpackChunkfig_documentation||[]).push([[9552],{34454:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guides/display-script-testing","title":"Display Script Testing","description":"Fig provides a comprehensive testing framework that allows you to test your display scripts offline, without needing to run the full Fig web application. This is particularly useful for automated testing, CI/CD pipelines, and rapid development iterations.","source":"@site/docs/guides/8-display-script-testing.md","sourceDirName":"guides","slug":"/guides/display-script-testing","permalink":"/docs/next/guides/display-script-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/mzbrau/fig/tree/main/doc/fig-documentation/docs/guides/8-display-script-testing.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Fig Version 2.0 to 2.1 Migration Guide","permalink":"/docs/next/guides/version2.0-2.1-migration-guide"},"next":{"title":"Integration Points","permalink":"/docs/next/category/integration-points"}}');var s=t(74848),a=t(28453);const r={sidebar_position:7},l="Display Script Testing",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Recommended Approach: Using Settings Classes",id:"recommended-approach-using-settings-classes",level:2},{value:"Basic Settings Class Test",id:"basic-settings-class-test",level:3},{value:"Advanced Settings Class Examples",id:"advanced-settings-class-examples",level:3},{value:"Complex Validation Logic",id:"complex-validation-logic",level:4},{value:"Conditional Visibility and Categories",id:"conditional-visibility-and-categories",level:4},{value:"TimeSpan and Type Handling",id:"timespan-and-type-handling",level:4},{value:"Alternative Approach: Manual Configuration",id:"alternative-approach-manual-configuration",level:2},{value:"Basic Manual Test Structure",id:"basic-manual-test-structure",level:3},{value:"Manual Setting Types",id:"manual-setting-types",level:2},{value:"String Settings",id:"string-settings",level:3},{value:"Boolean Settings",id:"boolean-settings",level:3},{value:"Integer Settings",id:"integer-settings",level:3},{value:"Double Settings",id:"double-settings",level:3},{value:"DateTime Settings",id:"datetime-settings",level:3},{value:"TimeSpan Settings",id:"timespan-settings",level:3},{value:"JSON Settings",id:"json-settings",level:3},{value:"Data Grid Settings",id:"data-grid-settings",level:3},{value:"Advanced Testing Scenarios",id:"advanced-testing-scenarios",level:2},{value:"Testing Multiple Settings Classes",id:"testing-multiple-settings-classes",level:3},{value:"Testing Validation Scripts (Manual Approach)",id:"testing-validation-scripts-manual-approach",level:3},{value:"Testing Conditional Visibility (Manual Approach)",id:"testing-conditional-visibility-manual-approach",level:3},{value:"Testing Data Grid Filtering (Manual Approach)",id:"testing-data-grid-filtering-manual-approach",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Command Line",id:"command-line",level:3},{value:"Visual Studio",id:"visual-studio",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Display Script Organization",id:"display-script-organization",level:3},{value:"Script Syntax Guidelines",id:"script-syntax-guidelines",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Examples",id:"examples",level:2},{value:"Settings Class Examples (Recommended)",id:"settings-class-examples-recommended",level:3},{value:"Manual Configuration Examples",id:"manual-configuration-examples",level:3},{value:"Related Testing Approaches",id:"related-testing-approaches",level:2},{value:"Integration Testing",id:"integration-testing",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"display-script-testing",children:"Display Script Testing"})}),"\n",(0,s.jsx)(n.p,{children:"Fig provides a comprehensive testing framework that allows you to test your display scripts offline, without needing to run the full Fig web application. This is particularly useful for automated testing, CI/CD pipelines, and rapid development iterations."}),"\n",(0,s.jsx)(n.admonition,{title:"Related Testing",type:"note",children:(0,s.jsxs)(n.p,{children:["This guide covers testing Fig display scripts (JavaScript logic). If you're looking to test ASP.NET Core applications that use Fig for configuration, see the ",(0,s.jsx)(n.a,{href:"/docs/next/guides/integration-testing",children:"Integration Testing"})," guide which covers testing your application with Fig configuration providers."]})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Fig Client Testing framework enables you to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Test display scripts in isolation without running Fig.Web"}),"\n",(0,s.jsx)(n.li,{children:"Validate script logic against different setting configurations"}),"\n",(0,s.jsx)(n.li,{children:"Run automated tests in CI/CD pipelines"}),"\n",(0,s.jsx)(n.li,{children:"Debug script behavior more easily"}),"\n",(0,s.jsx)(n.li,{children:"Ensure script reliability before deployment"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The framework supports two approaches:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Settings Class Approach (Recommended)"}),": Use your actual ",(0,s.jsx)(n.code,{children:"SettingsBase"})," classes for type-safe testing with full attribute support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Manual Configuration"}),": Manually configure individual settings when needed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Before you can test your display scripts, you need to add the Fig Client Testing package to your test project:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<PackageReference Include="Fig.Client.Testing" Version="latest" />\n<PackageReference Include="NUnit" Version="3.13.3" />\n<PackageReference Include="NUnit3TestAdapter" Version="4.2.1" />\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Package Usage",type:"tip",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Fig.Client.Testing"})," package provides testing utilities for both display script testing (covered in this guide) and ",(0,s.jsx)(n.a,{href:"/docs/next/guides/integration-testing",children:"integration testing"})," of ASP.NET Core applications. You only need to install this package once per test project to support both testing scenarios."]})}),"\n",(0,s.jsx)(n.h2,{id:"recommended-approach-using-settings-classes",children:"Recommended Approach: Using Settings Classes"}),"\n",(0,s.jsxs)(n.p,{children:["The preferred way to test display scripts is by using your actual ",(0,s.jsx)(n.code,{children:"SettingsBase"})," classes. This approach provides:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Safety"}),": Compile-time checking of property names and types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attribute Preservation"}),": Automatic handling of validation, categories, secrets, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintainability"}),": Changes to settings automatically reflect in tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-world Accuracy"}),": Tests mirror actual client configuration"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-settings-class-test",children:"Basic Settings Class Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using Fig.Client;\nusing Fig.Client.Attributes;\nusing Fig.Client.Testing;\nusing NUnit.Framework;\n\n// Define your settings class with display scripts as constants\npublic class ApiSettings : SettingsBase\n{\n    // Display Script Constants\n    private const string HttpsValidationScript = @"\n        if (RequireHttps.Value && !BaseUrl.Value.toString().startsWith(\'https://\')) {\n            BaseUrl.ValidationExplanation = \'HTTPS is required when RequireHttps is enabled\';\n            BaseUrl.IsValid = false;\n        } else {\n            BaseUrl.ValidationExplanation = \'\';\n            BaseUrl.IsValid = true;\n        }";\n\n    private const string DebugVisibilityScript = @"\n        if (DebugLogging.Value) {\n            DatabaseConnection.IsVisible = true;\n            DatabaseConnection.CategoryName = \'Debug\';\n            DatabaseConnection.CategoryColor = \'#FF9800\';\n        } else {\n            DatabaseConnection.IsVisible = false;\n        }";\n\n    public override string ClientDescription => "API Configuration";\n\n    [Setting("The base URL for the API")]\n    [DisplayScript(HttpsValidationScript)]\n    public string BaseUrl { get; set; } = "https://api.example.com";\n\n    [Setting("Enable HTTPS requirement")]\n    public bool RequireHttps { get; set; } = true;\n\n    [Setting("API timeout in seconds")]\n    [Validation(@"^\\d+$", "Must be a positive number")]\n    public int TimeoutSeconds { get; set; } = 30;\n\n    [Setting("Database connection string")]\n    [Secret]\n    [DisplayScript(DebugVisibilityScript)]\n    public string DatabaseConnection { get; set; } = "Server=localhost;";\n\n    [Setting("Enable debug logging")]\n    [Advanced]\n    public bool DebugLogging { get; set; } = false;\n\n    // Public methods to expose scripts for testing\n    public static string GetHttpsValidationScript() => HttpsValidationScript;\n    public static string GetDebugVisibilityScript() => DebugVisibilityScript;\n\n    public override IEnumerable<string> GetValidationErrors() => new List<string>();\n}\n\n[TestFixture]\npublic class ApiSettingsTests\n{\n    [Test]\n    public void Should_Validate_HTTPS_Requirement()\n    {\n        // Arrange\n        var settings = new ApiSettings();\n        var testRunner = new ClientTestRunner();\n\n        // Act\n        var testClient = testRunner.CreateClient(settings)\n            .WithSetting("RequireHttps", true)\n            .WithSetting("BaseUrl", "http://insecure.example.com")\n            .Build();\n\n        // Use the script defined in the settings class\n        testRunner.ExecuteScript(testClient, ApiSettings.GetHttpsValidationScript());\n\n        // Assert\n        var baseUrlSetting = testClient.GetSetting("BaseUrl");\n        Assert.IsFalse(baseUrlSetting.IsValid);\n        Assert.That(baseUrlSetting.ValidationExplanation, Contains.Substring("HTTPS is required"));\n    }\n\n    [Test]\n    public void Should_Show_Debug_Settings_When_Enabled()\n    {\n        // Arrange\n        var settings = new ApiSettings();\n        var testRunner = new ClientTestRunner();\n\n        // Act\n        var testClient = testRunner.CreateClient(settings)\n            .WithSetting("DebugLogging", true)\n            .Build();\n\n        // Use the debug visibility script from the settings class\n        testRunner.ExecuteScript(testClient, ApiSettings.GetDebugVisibilityScript());\n\n        // Assert\n        var dbSetting = testClient.GetSetting("DatabaseConnection");\n        Assert.IsTrue(dbSetting.IsVisible);\n        Assert.That(dbSetting.CategoryName, Is.EqualTo("Debug"));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-settings-class-examples",children:"Advanced Settings Class Examples"}),"\n",(0,s.jsx)(n.h4,{id:"complex-validation-logic",children:"Complex Validation Logic"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class ApiSettings : SettingsBase\n{\n    private const string ComplexValidationScript = @"\n        // Multi-field validation\n        if (RequireHttps.Value && !BaseUrl.Value.toString().startsWith(\'https://\')) {\n            BaseUrl.ValidationExplanation = \'HTTPS required when RequireHttps is enabled\';\n            BaseUrl.IsValid = false;\n        }\n        \n        // Range validation\n        if (TimeoutSeconds.Value < 10) {\n            TimeoutSeconds.ValidationExplanation = \'Minimum timeout is 10 seconds\';\n            TimeoutSeconds.IsValid = false;\n        }";\n\n    [Setting("The base URL for the API")]\n    [DisplayScript(ComplexValidationScript)]\n    public string BaseUrl { get; set; } = "https://api.example.com";\n\n    [Setting("API timeout in seconds")]\n    [DisplayScript(ComplexValidationScript)]\n    public int TimeoutSeconds { get; set; } = 30;\n\n    // ... other properties ...\n\n    public static string GetComplexValidationScript() => ComplexValidationScript;\n}\n\n[Test]\npublic void Should_Apply_Complex_Validation_Rules()\n{\n    var settings = new ApiSettings();\n    var testRunner = new ClientTestRunner();\n\n    var testClient = testRunner.CreateClient(settings)\n        .WithSetting("RequireHttps", true)\n        .WithSetting("BaseUrl", "http://insecure.com")\n        .WithSetting("TimeoutSeconds", 5)\n        .Build();\n\n    // Use the validation script defined in the settings class\n    testRunner.ExecuteScript(testClient, ApiSettings.GetComplexValidationScript());\n\n    Assert.IsFalse(testClient.GetSetting("BaseUrl").IsValid);\n    Assert.IsFalse(testClient.GetSetting("TimeoutSeconds").IsValid);\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"conditional-visibility-and-categories",children:"Conditional Visibility and Categories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class ApiSettings : SettingsBase\n{\n    private const string ProductionModeScript = @"\n        var isProduction = !DebugLogging.Value;\n        \n        if (isProduction) {\n            // Hide sensitive settings in production\n            DatabaseConnection.IsVisible = false;\n            DatabaseConnection.Advanced = true;\n            \n            // Organize by priority\n            RequireHttps.DisplayOrder = 1;\n            BaseUrl.DisplayOrder = 2;\n            TimeoutSeconds.DisplayOrder = 3;\n            \n            // Production category styling\n            RequireHttps.CategoryName = \'Production\';\n            RequireHttps.CategoryColor = \'#E91E63\';\n        }";\n\n    [Setting("Enable debug logging")]\n    [Advanced]\n    [DisplayScript(ProductionModeScript)]\n    public bool DebugLogging { get; set; } = false;\n\n    // ... other properties ...\n\n    public static string GetProductionModeScript() => ProductionModeScript;\n}\n\n[Test]\npublic void Should_Control_Setting_Visibility_And_Organization()\n{\n    var settings = new ApiSettings();\n    var testRunner = new ClientTestRunner();\n\n    var testClient = testRunner.CreateClient(settings)\n        .WithSetting("DebugLogging", false)\n        .Build();\n\n    // Use the production mode script from the settings class\n    testRunner.ExecuteScript(testClient, ApiSettings.GetProductionModeScript());\n\n    var dbSetting = testClient.GetSetting("DatabaseConnection");\n    var httpsSetting = testClient.GetSetting("RequireHttps");\n    \n    Assert.IsFalse(dbSetting.IsVisible);\n    Assert.IsTrue(dbSetting.Advanced);\n    Assert.That(httpsSetting.DisplayOrder, Is.EqualTo(1));\n    Assert.That(httpsSetting.CategoryName, Is.EqualTo("Production"));\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"timespan-and-type-handling",children:"TimeSpan and Type Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class ApiSettings : SettingsBase\n{\n    private const string TimeoutConversionScript = @"\n        // TimeSpan values are provided as milliseconds in scripts\n        var timeoutInSeconds = RequestTimeout.Value / 1000;\n        if (timeoutInSeconds > 60) {\n            TimeoutSeconds.Value = timeoutInSeconds;\n        }";\n\n    [Setting("Request timeout")]\n    [DisplayScript(TimeoutConversionScript)]\n    public TimeSpan RequestTimeout { get; set; } = TimeSpan.FromSeconds(30);\n\n    [Setting("API timeout in seconds")]\n    public int TimeoutSeconds { get; set; } = 30;\n\n    // ... other properties ...\n\n    public static string GetTimeoutConversionScript() => TimeoutConversionScript;\n}\n\n[Test]\npublic void Should_Handle_TimeSpan_Settings()\n{\n    var settings = new ApiSettings();\n    var testRunner = new ClientTestRunner();\n\n    var testClient = testRunner.CreateClient(settings)\n        .WithSetting("RequestTimeout", TimeSpan.FromMinutes(2))\n        .Build();\n\n    // Use the timeout conversion script from the settings class\n    testRunner.ExecuteScript(testClient, ApiSettings.GetTimeoutConversionScript());\n\n    var timeoutValue = testClient.GetSetting("TimeoutSeconds").GetValue();\n    Assert.That(timeoutValue, Is.EqualTo(120)); // 2 minutes = 120 seconds\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"alternative-approach-manual-configuration",children:"Alternative Approach: Manual Configuration"}),"\n",(0,s.jsx)(n.p,{children:"When you need more control or don't have a settings class available, you can manually configure settings:"}),"\n",(0,s.jsx)(n.h3,{id:"basic-manual-test-structure",children:"Basic Manual Test Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[TestFixture]\npublic class ManualDisplayScriptTests\n{\n    [Test]\n    public void Should_Hide_Setting_When_Condition_Is_False()\n    {\n        // Arrange\n        var testRunner = new DisplayScriptTestRunner();\n        var client = testRunner.CreateTestClient("TestClient")\n            .AddBoolSetting("EnableFeature", false)\n            .AddStringSetting("FeatureConfig", "default");\n\n        var script = @"\n            if (!EnableFeature.Value) {\n                FeatureConfig.IsVisible = false;\n            }\n        ";\n\n        // Act\n        testRunner.RunScript(script, client);\n\n        // Assert\n        Assert.IsFalse(client.GetSetting("FeatureConfig").IsVisible);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"manual-setting-types",children:"Manual Setting Types"}),"\n",(0,s.jsx)(n.p,{children:"The testing framework supports all Fig setting types when using manual configuration:"}),"\n",(0,s.jsx)(n.h3,{id:"string-settings",children:"String Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'client.AddStringSetting("MyString", "initial value");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"boolean-settings",children:"Boolean Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'client.AddBoolSetting("MyBool", true);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"integer-settings",children:"Integer Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'client.AddIntSetting("MyInt", 42);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"double-settings",children:"Double Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'client.AddDoubleSetting("MyDouble", 3.14);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"datetime-settings",children:"DateTime Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'client.AddDateTimeSetting("MyDateTime", DateTime.Now);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"timespan-settings",children:"TimeSpan Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'client.AddTimeSpanSetting("MyTimeSpan", TimeSpan.FromMinutes(30));\n'})}),"\n",(0,s.jsx)(n.h3,{id:"json-settings",children:"JSON Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var jsonValue = new { name = "test", value = 123 };\nclient.AddJsonSetting("MyJson", jsonValue);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"data-grid-settings",children:"Data Grid Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var row1 = testRunner.CreateDataGridRow(new Dictionary<string, object?>\n{\n    ["Name"] = "John",\n    ["Age"] = 30,\n    ["Active"] = true\n});\n\nvar row2 = testRunner.CreateDataGridRow(new Dictionary<string, object?>\n{\n    ["Name"] = "Jane", \n    ["Age"] = 25,\n    ["Active"] = false\n});\n\nclient.AddDataGridSetting("Users", new List<Dictionary<string, IDataGridValueModel>> { row1, row2 });\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-testing-scenarios",children:"Advanced Testing Scenarios"}),"\n",(0,s.jsx)(n.h3,{id:"testing-multiple-settings-classes",children:"Testing Multiple Settings Classes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic void Should_Support_Multiple_Settings_Classes()\n{\n    var apiSettings = new ApiSettings();\n    var dbSettings = new DatabaseSettings();\n    var testRunner = new ClientTestRunner();\n\n    var apiClient = testRunner.CreateClient(apiSettings, "ApiClient")\n        .WithSetting("BaseUrl", "https://api.test.com")\n        .Build();\n        \n    var dbClient = testRunner.CreateClient(dbSettings, "DatabaseClient")\n        .WithSetting("ConnectionString", "Server=test;Database=TestDb;")\n        .Build();\n\n    Assert.That(apiClient.Name, Is.EqualTo("ApiClient"));\n    Assert.That(dbClient.Name, Is.EqualTo("DatabaseClient"));\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"testing-validation-scripts-manual-approach",children:"Testing Validation Scripts (Manual Approach)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic void Should_Show_Validation_Error_For_Invalid_Value()\n{\n    var testRunner = new DisplayScriptTestRunner();\n    var client = testRunner.CreateTestClient("ValidationClient")\n        .AddStringSetting("Email", "invalid-email");\n\n    var validationScript = @"\n        if (!Email.Value.toString().match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n            Email.ValidationExplanation = \'Please enter a valid email address\';\n            Email.IsValid = false;\n        }\n    ";\n\n    testRunner.RunScript(validationScript, client);\n\n    var emailSetting = client.GetSetting("Email");\n    Assert.IsNotNull(emailSetting.ValidationExplanation);\n    Assert.AreEqual("Please enter a valid email address", emailSetting.ValidationExplanation);\n    Assert.IsFalse(emailSetting.IsValid);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"testing-conditional-visibility-manual-approach",children:"Testing Conditional Visibility (Manual Approach)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic void Should_Show_Advanced_Settings_When_Mode_Is_Advanced()\n{\n    var testRunner = new DisplayScriptTestRunner();\n    var client = testRunner.CreateTestClient("ConditionalClient")\n        .AddStringSetting("Mode", "Advanced")\n        .AddStringSetting("AdvancedOption1", "value1")\n        .AddStringSetting("AdvancedOption2", "value2");\n\n    var script = @"\n        var isAdvanced = Mode.Value === \'Advanced\';\n        AdvancedOption1.IsVisible = isAdvanced;\n        AdvancedOption2.IsVisible = isAdvanced;\n    ";\n\n    testRunner.RunScript(script, client);\n\n    Assert.IsTrue(client.GetSetting("AdvancedOption1").IsVisible);\n    Assert.IsTrue(client.GetSetting("AdvancedOption2").IsVisible);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"testing-data-grid-filtering-manual-approach",children:"Testing Data Grid Filtering (Manual Approach)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic void Should_Filter_DataGrid_Based_On_Criteria()\n{\n    var testRunner = new DisplayScriptTestRunner();\n    \n    var activeRow = testRunner.CreateDataGridRow(new Dictionary<string, object?>\n    {\n        ["Name"] = "Active User",\n        ["Status"] = "Active"\n    });\n    \n    var inactiveRow = testRunner.CreateDataGridRow(new Dictionary<string, object?>\n    {\n        ["Name"] = "Inactive User", \n        ["Status"] = "Inactive"\n    });\n\n    var client = testRunner.CreateTestClient("DataGridClient")\n        .AddBoolSetting("ShowOnlyActive", true)\n        .AddDataGridSetting("Users", new List<Dictionary<string, IDataGridValueModel>> { activeRow, inactiveRow });\n\n    var script = @"\n        if (ShowOnlyActive.Value) {\n            // Filter logic would be implemented here\n            // This is a simplified example\n        }\n    ";\n\n    testRunner.RunScript(script, client);\n\n    var usersSetting = client.GetDataGridSetting("Users");\n    // Assert based on your filtering implementation\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,s.jsx)(n.h3,{id:"command-line",children:"Command Line"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet test YourTestProject.csproj\n"})}),"\n",(0,s.jsx)(n.h3,{id:"visual-studio",children:"Visual Studio"}),"\n",(0,s.jsx)(n.p,{children:"Use the Test Explorer to run tests individually or in groups."}),"\n",(0,s.jsx)(n.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,s.jsx)(n.p,{children:"The testing framework works seamlessly with any CI/CD system that supports .NET testing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# GitHub Actions example\n- name: Run Display Script Tests\n  run: dotnet test tests/YourDisplayScriptTests.csproj --logger trx --results-directory TestResults\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prefer Settings Classes"}),": Use your actual ",(0,s.jsx)(n.code,{children:"SettingsBase"})," classes whenever possible for type safety and attribute preservation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Define Scripts as Constants"}),": Store display scripts as private constants in your settings class and expose them through public static methods for testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use DisplayScript Attributes"}),": Apply the ",(0,s.jsx)(n.code,{children:"[DisplayScript]"})," attribute to properties that need display logic, referencing the script constants"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Edge Cases"}),": Include tests for boundary conditions and invalid inputs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Descriptive Names"}),": Make test names clearly describe what is being tested"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep Tests Focused"}),": Each test should verify one specific behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Both Positive and Negative Cases"}),": Verify that scripts work correctly and fail appropriately"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Setup and Teardown"}),": Group common setup logic in ",(0,s.jsx)(n.code,{children:"[SetUp]"})," methods"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Access Setting Values"}),": Remember to use ",(0,s.jsx)(n.code,{children:".Value"})," when accessing or setting values in scripts (e.g., ",(0,s.jsx)(n.code,{children:"MySetting.Value"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leverage Attribute Validation"}),": Let Fig's built-in validation attributes handle basic validation, focus scripts on complex business logic"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"display-script-organization",children:"Display Script Organization"}),"\n",(0,s.jsx)(n.p,{children:"Organize your display scripts as constants within your settings class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class MySettings : SettingsBase\n{\n    // Group related scripts together\n    private const string ValidationScript = @"/* validation logic */";\n    private const string VisibilityScript = @"/* visibility logic */";\n    private const string FormattingScript = @"/* formatting logic */";\n\n    [Setting("My setting")]\n    [DisplayScript(ValidationScript)]\n    public string MySetting { get; set; } = "default";\n\n    // Expose scripts for testing\n    public static string GetValidationScript() => ValidationScript;\n    public static string GetVisibilityScript() => VisibilityScript;\n    public static string GetFormattingScript() => FormattingScript;\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"script-syntax-guidelines",children:"Script Syntax Guidelines"}),"\n",(0,s.jsx)(n.p,{children:"When writing test scripts, remember:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// \u2705 Correct: Access setting values and reference scripts from settings class\nvar testClient = testRunner.CreateClient(settings).Build();\ntestRunner.ExecuteScript(testClient, MySettings.GetValidationScript());\n\n// \u274c Incorrect: Inline scripts in tests\nvar script = @"if (MySetting.Value) { /* logic */ }";\ntestRunner.ExecuteScript(testClient, script);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Script execution errors"}),": Check that your JavaScript syntax is correct and all referenced settings exist in your test client. Ensure you're using ",(0,s.jsx)(n.code,{children:".Value"})," to access setting values."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type conversion issues"}),": Ensure that setting values match the expected types in your scripts. TimeSpan values are provided as milliseconds in JavaScript."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Missing settings"}),": Verify that all settings referenced in your script have been added to the test client or exist in your settings class."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Attribute not preserved"}),": When using the settings class approach, attributes should be automatically preserved. If using manual configuration, you may need to manually set advanced, secret, or validation properties."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TimeSpan handling"}),": TimeSpan values in scripts are represented as milliseconds. Convert appropriately: ",(0,s.jsx)(n.code,{children:"var seconds = TimeSpanSetting.Value / 1000;"})]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.p,{children:["For complete working examples, see the ",(0,s.jsx)(n.code,{children:"Fig.Client.Testing.Example"})," project in the Fig repository, which includes comprehensive test cases covering:"]}),"\n",(0,s.jsx)(n.h3,{id:"settings-class-examples-recommended",children:"Settings Class Examples (Recommended)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"EnhancedApiTests.cs"}),": Complete examples using ",(0,s.jsx)(n.code,{children:"SettingsBase"})," classes"]}),"\n",(0,s.jsx)(n.li,{children:"Complex validation scenarios with multiple settings"}),"\n",(0,s.jsx)(n.li,{children:"TimeSpan handling and type conversions"}),"\n",(0,s.jsx)(n.li,{children:"Conditional visibility and categorization"}),"\n",(0,s.jsx)(n.li,{children:"Multiple settings classes in a single test suite"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"manual-configuration-examples",children:"Manual Configuration Examples"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DisplayScriptExampleTests.cs"}),": Traditional manual configuration approach"]}),"\n",(0,s.jsx)(n.li,{children:"Basic setting manipulation and validation"}),"\n",(0,s.jsx)(n.li,{children:"Data grid filtering and manipulation"}),"\n",(0,s.jsx)(n.li,{children:"Individual setting type examples"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Both approaches demonstrate the full range of Fig's display script testing capabilities, with the settings class approach being the recommended method for new projects."}),"\n",(0,s.jsx)(n.h2,{id:"related-testing-approaches",children:"Related Testing Approaches"}),"\n",(0,s.jsx)(n.p,{children:"While this guide focuses on testing your Fig display scripts, you may also want to test other aspects of your Fig-enabled applications:"}),"\n",(0,s.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,s.jsxs)(n.p,{children:["If you're building ASP.NET Core applications that use Fig for configuration, you should also consider integration testing your application with Fig's configuration providers. The same ",(0,s.jsx)(n.code,{children:"Fig.Client.Testing"})," package that you've installed for display script testing also provides tools for integration testing."]}),"\n",(0,s.jsxs)(n.p,{children:["See the ",(0,s.jsx)(n.a,{href:"/docs/next/guides/integration-testing",children:"Integration Testing"})," guide to learn how to:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Test ASP.NET Core applications with Fig configuration"}),"\n",(0,s.jsx)(n.li,{children:"Use Fig's reloadable configuration provider in tests"}),"\n",(0,s.jsx)(n.li,{children:"Disable Fig and inject test configuration"}),"\n",(0,s.jsx)(n.li,{children:"Write comprehensive integration tests for Fig-enabled apps"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Both testing approaches complement each other: display script testing ensures your Fig UI logic works correctly, while integration testing ensures your application behaves correctly with Fig configuration."})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);