"use strict";(self.webpackChunkfig_documentation=self.webpackChunkfig_documentation||[]).push([[309],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),g=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=g(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=g(n),p=i,m=d["".concat(o,".").concat(p)]||d[p]||u[p]||r;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:i,s[1]=l;for(var g=2;g<r;g++)s[g]=n[g];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>g});var a=n(8168),i=(n(6540),n(5680));const r={sidebar_position:10},s="Data Grids",l={unversionedId:"features/settings-management/data-grids",id:"features/settings-management/data-grids",title:"Data Grids",description:"Fig supports data grids for displaying complex settings.",source:"@site/docs/features/settings-management/data-grids.md",sourceDirName:"features/settings-management",slug:"/features/settings-management/data-grids",permalink:"/docs/features/settings-management/data-grids",draft:!1,editUrl:"https://github.com/mzbrau/fig/tree/main/doc/fig-documentation/docs/features/settings-management/data-grids.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Category",permalink:"/docs/features/settings-management/category"},next:{title:"Dependent Settings",permalink:"/docs/features/settings-management/dependent-settings"}},o={},g=[{value:"Usage",id:"usage",level:2},{value:"Locking Data Grids",id:"locking-data-grids",level:3},{value:"Internal Attributes",id:"internal-attributes",level:3},{value:"Default Values",id:"default-values",level:3},{value:"Appearance",id:"appearance",level:2}],c={toc:g},d="wrapper";function u(e){let{components:t,...r}=e;return(0,i.yg)(d,(0,a.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"data-grids"},"Data Grids"),(0,i.yg)("p",null,"Fig supports data grids for displaying complex settings."),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("p",null,"The following setting will result in a data grid with 3 columns, one for each property within the class. Items can be added, removed or edited as required."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'[Setting("Favorite Animals")]\npublic List<Animal> Animals { get; set; }\n\npublic class Animal\n{\n    public string Name { get; set; }\n\n    public int Legs { get; set; }\n\n    public string FavoriteFood { get; set; }\n}\n')),(0,i.yg)("p",null,"You can also create a data grid from a list of base types, for example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'[Setting("Favorite Names")]\npublic List<string> Names { get; set; }\n')),(0,i.yg)("h3",{id:"locking-data-grids"},"Locking Data Grids"),(0,i.yg)("p",null,"Data grids can also be locked. This prevents rows being added or removed. Existing rows can still be edited. To lock a data grid, used the ",(0,i.yg)("strong",{parentName:"p"},"DataGridLocked")," attribute."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'[Setting("Favorite Animals")]\n[DataGridLocked]\npublic List<Animal> Animals { get; set; }\n')),(0,i.yg)("h3",{id:"internal-attributes"},"Internal Attributes"),(0,i.yg)("p",null,"Some attributes can also be used on the internal class including ",(0,i.yg)("a",{parentName:"p",href:"https://www.figsettings.com/docs/features/settings-management/multiline"},"MultiLine"),",  ",(0,i.yg)("a",{parentName:"p",href:"https://www.figsettings.com/docs/features/settings-management/valid-values"},"ValidValues"),", ",(0,i.yg)("a",{parentName:"p",href:"https://www.figsettings.com/docs/features/settings-management/secret-settings"},"Secret")," and ",(0,i.yg)("a",{parentName:"p",href:"http://www.figsettings.com/docs/features/settings-management/validation"},"Validation"),". These work in the same way that they do on regular properties. In addition, there is a ReadOnly attributes which makes that column read only when editing the data grid."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'[Setting("Favorite Animals")]\npublic List<Animal> Animals { get; set; }\n\npublic class Animal\n{\n    [ReadOnly]\n    public string Name { get; set; }\n\n    [ValidValues("1", "2", "3")]\n    public int Legs { get; set; }\n\n    [MultiLine(3)]\n    [Validation(ValidationType.NotEmpty)]\n    public string FavoriteFood { get; set; }\n\n    [Secret]\n    public string Password { get;set; }\n\n    // Note valid values must be set for List<string> within a data grid. \n    // Only List<string> is supported, not other enumerable types.\n    [ValidValues("A", "B", "C")] \n    public List<string> Items { get; set; }\n}\n')),(0,i.yg)("h3",{id:"default-values"},"Default Values"),(0,i.yg)("p",null,"Data grids support default values but as they are complex objects, they cannot be specified within the attribute. To specify a default value, create a static class and reference it within the setting attribute. For example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'[Setting("Favorite Animals", defaultValueMethodName: nameof(GetAnimals))]\npublic List<Animal> Animals { get; set; }\n\npublic static List<Animal> GetAnimals()\n{\n    return new List<Animal>()\n    {\n        new Animal\n        {\n            Name = "Fluffy",\n            Legs = 2,\n            FavoriteFood = "carrots"\n        },\n        new Animal()\n        {\n            Name = "Rover",\n            Legs = 4,\n            FavoriteFood = "steak"\n        }\n    };\n}\n')),(0,i.yg)("h2",{id:"appearance"},"Appearance"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"image-20230824212148560",src:n(4188).A,width:"886",height:"336"})))}u.isMDXComponent=!0},4188:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image-20230824212148560-c178b61fe4e0cb1005efa7f4f3d53b8d.png"}}]);