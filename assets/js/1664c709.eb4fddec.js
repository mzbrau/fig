"use strict";(self.webpackChunkfig_documentation=self.webpackChunkfig_documentation||[]).push([[8227],{5250:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"features/settings-management/environment-specific","title":"Environment Specific","description":"The EnvironmentSpecificAttribute is used to mark settings that are likely specific to a particular environment. These settings can be excluded from value-only exports to make it easier to transfer configurations between different environments (development, staging, production, etc.).","source":"@site/docs/features/settings-management/9-environment-specific.md","sourceDirName":"features/settings-management","slug":"/features/settings-management/environment-specific","permalink":"/docs/features/settings-management/environment-specific","draft":false,"unlisted":false,"editUrl":"https://github.com/mzbrau/fig/tree/main/doc/fig-documentation/docs/features/settings-management/9-environment-specific.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Display Scripts","permalink":"/docs/features/settings-management/display-scripts"},"next":{"title":"Groups","permalink":"/docs/features/settings-management/groups"}}');var s=i(4848),r=i(8453);const o={sidebar_position:9},c="Environment Specific",l={},a=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Marking Settings as Environment Specific",id:"marking-settings-as-environment-specific",level:3},{value:"Value-Only Export with Environment Filtering",id:"value-only-export-with-environment-filtering",level:2},{value:"Web UI Export",id:"web-ui-export",level:3},{value:"Import Behavior",id:"import-behavior",level:2},{value:"Example Workflow",id:"example-workflow",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"When to Use EnvironmentSpecific",id:"when-to-use-environmentspecific",level:3},{value:"When NOT to Use EnvironmentSpecific",id:"when-not-to-use-environmentspecific",level:3}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"environment-specific",children:"Environment Specific"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EnvironmentSpecificAttribute"})," is used to mark settings that are likely specific to a particular environment. These settings can be excluded from value-only exports to make it easier to transfer configurations between different environments (development, staging, production, etc.)."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"When deploying applications across multiple environments, certain settings are typically environment-specific and should not be copied between environments. Examples include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Database connection strings"}),"\n",(0,s.jsx)(n.li,{children:"API endpoints"}),"\n",(0,s.jsx)(n.li,{children:"File paths"}),"\n",(0,s.jsx)(n.li,{children:"Environment-specific feature flags"}),"\n",(0,s.jsx)(n.li,{children:"Logging configurations"}),"\n",(0,s.jsx)(n.li,{children:"Service URLs"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["By marking these settings with the ",(0,s.jsx)(n.code,{children:"EnvironmentSpecificAttribute"}),", you can export configurations without accidentally overriding environment-specific values when importing to a different environment."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"marking-settings-as-environment-specific",children:"Marking Settings as Environment Specific"}),"\n",(0,s.jsxs)(n.p,{children:["To mark a setting as environment-specific, apply the ",(0,s.jsx)(n.code,{children:"[EnvironmentSpecific]"})," attribute to the property:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using Fig.Client.Attributes;\r\n\r\npublic class MySettings : SettingsBase\r\n{\r\n    [Setting("Application Name")]\r\n    public string ApplicationName { get; set; } = "MyApp";\r\n\r\n    [Setting("Database Connection String")]\r\n    [EnvironmentSpecific]\r\n    public string DatabaseConnectionString { get; set; } = "Server=localhost;Database=MyDb";\r\n\r\n    [Setting("API Endpoint URL")]\r\n    [EnvironmentSpecific]\r\n    public string ApiEndpoint { get; set; } = "https://localhost:5000/api";\r\n\r\n    [Setting("Feature Flag - Enable Logging")]\r\n    public bool EnableLogging { get; set; } = true;\r\n\r\n    [Setting("Log File Path")]\r\n    [EnvironmentSpecific]\r\n    public string LogFilePath { get; set; } = "/var/log/myapp.log";\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"value-only-export-with-environment-filtering",children:"Value-Only Export with Environment Filtering"}),"\n",(0,s.jsx)(n.p,{children:'When performing value-only exports, you can choose to exclude environment-specific settings by enabling the "Exclude Environment Specific Settings" option.'}),"\n",(0,s.jsx)(n.h3,{id:"web-ui-export",children:"Web UI Export"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Navigate to the Import/Export page"}),"\n",(0,s.jsx)(n.li,{children:'In the "Value Only Export" section'}),"\n",(0,s.jsx)(n.li,{children:'Toggle on "Exclude Environment Specific Settings"'}),"\n",(0,s.jsx)(n.li,{children:'Click "Export"'}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The exported JSON will only contain settings that are ",(0,s.jsx)(n.strong,{children:"not"})," marked with ",(0,s.jsx)(n.code,{children:"[EnvironmentSpecific]"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"import-behavior",children:"Import Behavior"}),"\n",(0,s.jsx)(n.p,{children:"When importing value-only exports that exclude environment-specific settings:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Regular settings"})," in the import will update existing values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Environment-specific settings"})," on the target environment remain unchanged"]}),"\n",(0,s.jsx)(n.li,{children:"This allows you to update application logic settings without affecting environment configuration"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-workflow",children:"Example Workflow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Development Environment:"})," Configure all settings including environment-specific ones"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Export:"}),' Create value-only export with "Exclude Environment Specific Settings" enabled']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Staging/Production:"})," Import the export file"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Result:"})," Application logic settings are updated, but database connections, API endpoints, etc. remain specific to each environment"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use-environmentspecific",children:"When to Use EnvironmentSpecific"}),"\n",(0,s.jsx)(n.p,{children:"Mark settings as environment-specific when they:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Contain environment-specific infrastructure details (URLs, paths, connection strings)"}),"\n",(0,s.jsx)(n.li,{children:"Have different values across environments by design"}),"\n",(0,s.jsx)(n.li,{children:"Should not be accidentally overwritten during configuration deployments"}),"\n",(0,s.jsx)(n.li,{children:"Represent environment-specific feature toggles"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"when-not-to-use-environmentspecific",children:"When NOT to Use EnvironmentSpecific"}),"\n",(0,s.jsx)(n.p,{children:"Avoid marking settings as environment-specific when they:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Represent business logic that should be consistent across environments"}),"\n",(0,s.jsx)(n.li,{children:"Are application behavior settings that should sync between environments"}),"\n",(0,s.jsx)(n.li,{children:"Are user preferences or feature configurations"}),"\n",(0,s.jsx)(n.li,{children:"Need to be updated consistently across all environments"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);