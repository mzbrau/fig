"use strict";(self.webpackChunkfig_documentation=self.webpackChunkfig_documentation||[]).push([[3635],{94123:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"features/provider-defined-lookup-tables","title":"Provider Defined Lookup Tables","description":"Fig supports provider-defined lookup tables through the ILookupProvider and IKeyedLookupProvider interfaces. This feature allows applications to dynamically provide lookup table data at runtime, eliminating the need to manually create and maintain lookup tables in the Fig web interface.","source":"@site/docs/features/30-provider-defined-lookup-tables.md","sourceDirName":"features","slug":"/features/provider-defined-lookup-tables","permalink":"/docs/next/features/provider-defined-lookup-tables","draft":false,"unlisted":false,"editUrl":"https://github.com/mzbrau/fig/tree/main/doc/fig-documentation/docs/features/30-provider-defined-lookup-tables.md","tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_position":30,"sidebar_label":"Provider Defined Lookup Tables"},"sidebar":"tutorialSidebar","previous":{"title":"Metadata Properties","permalink":"/docs/next/features/metadata-properties"},"next":{"title":"Client Timeline","permalink":"/docs/next/features/client-timeline"}}');var r=i(74848),o=i(28453);const s={sidebar_position:30,sidebar_label:"Provider Defined Lookup Tables"},a="Provider Defined Lookup Tables",l={},d=[{value:"ILookupProvider Interface",id:"ilookupprovider-interface",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Example Implementation",id:"example-implementation",level:3},{value:"Usage in Settings",id:"usage-in-settings",level:3},{value:"IKeyedLookupProvider Interface",id:"ikeyedlookupprovider-interface",level:2},{value:"Interface Definition",id:"interface-definition",level:3},{value:"Keyed Lookup Example",id:"keyed-lookup-example",level:3},{value:"Usage in Settings with Dependency",id:"usage-in-settings-with-dependency",level:3},{value:"Registration and Automatic Discovery",id:"registration-and-automatic-discovery",level:2},{value:"Dependency Injection Registration",id:"dependency-injection-registration",level:3},{value:"Multiple Providers",id:"multiple-providers",level:3},{value:"Advanced Usage Examples",id:"advanced-usage-examples",level:2},{value:"Dynamic Data from External Sources",id:"dynamic-data-from-external-sources",level:3},{value:"API-Based Lookup Data",id:"api-based-lookup-data",level:3},{value:"Benefits",id:"benefits",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"provider-defined-lookup-tables",children:"Provider Defined Lookup Tables"})}),"\n",(0,r.jsxs)(n.p,{children:["Fig supports provider-defined lookup tables through the ",(0,r.jsx)(n.code,{children:"ILookupProvider"})," and ",(0,r.jsx)(n.code,{children:"IKeyedLookupProvider"})," interfaces. This feature allows applications to dynamically provide lookup table data at runtime, eliminating the need to manually create and maintain lookup tables in the Fig web interface."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Provider-defined lookup tables are the preferred approach for dynamic lookup data. They automatically register when the implementing classes are registered with your application's dependency injection container and are referenced by settings with the ",(0,r.jsx)(n.code,{children:"[LookupTable]"})," attribute."]})}),"\n",(0,r.jsx)(n.h2,{id:"ilookupprovider-interface",children:"ILookupProvider Interface"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ILookupProvider"})," interface is used for simple lookup tables where the options are dynamic or only known at runtime."]}),"\n",(0,r.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public interface ILookupProvider\n{\n    /// <summary>\n    /// The name of the lookup table. This must match the name used in the LookupTable attribute on settings.\n    /// </summary>\n    string LookupName { get; }\n\n    /// <summary>\n    /// The key of the dictionary is the option value, and the value is an optional alias.\n    /// </summary>\n    /// <returns></returns>\n    Task<Dictionary<string, string?>> GetItems();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example-implementation",children:"Example Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Fig.Client.LookupTable;\n\npublic class IssueTypeProvider : ILookupProvider\n{\n    public const string LookupNameKey = "IssueType";\n    \n    public string LookupName => LookupNameKey;\n    \n    public Task<Dictionary<string, string?>> GetItems()\n    {\n        return Task.FromResult(new Dictionary<string, string?>\n        {\n            { "Bug", "\ud83d\udc1b Bug Report" },\n            { "Feature", "\u2728 Feature Request" },\n            { "Task", "\ud83d\udccb Task" },\n            { "Documentation", "\ud83d\udcda Documentation" }\n        });\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usage-in-settings",children:"Usage in Settings"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class Settings : SettingsBase\n{\n    [Setting("The type of issue being tracked")]\n    [LookupTable(IssueTypeProvider.LookupNameKey, LookupSource.ProviderDefined)]\n    public string? IssueType { get; set; }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"ikeyedlookupprovider-interface",children:"IKeyedLookupProvider Interface"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"IKeyedLookupProvider"})," interface is used for lookup tables where the available options depend on the value of another setting. This creates a cascading dropdown effect."]}),"\n",(0,r.jsx)(n.h3,{id:"interface-definition",children:"Interface Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public interface IKeyedLookupProvider\n{\n    /// <summary>\n    /// The name of the lookup table. This must match the name used in the LookupTable attribute on settings.\n    /// </summary>\n    string LookupName { get; }\n\n    /// <summary>\n    /// Gets the items for the lookup table.\n    /// The key of the outer dictionary is the value of the other setting.\n    /// The key of the inner dictionary is the option value, and the value is an optional alias.\n    /// </summary>\n    /// <returns></returns>\n    Task<Dictionary<string, Dictionary<string, string?>>> GetItems();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"keyed-lookup-example",children:"Keyed Lookup Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Fig.Client.LookupTable;\n\npublic class IssuePropertyProvider : IKeyedLookupProvider\n{\n    public const string LookupNameKey = "IssueProperty";\n    \n    public string LookupName => LookupNameKey;\n    \n    public Task<Dictionary<string, Dictionary<string, string?>>> GetItems()\n    {\n        return Task.FromResult(new Dictionary<string, Dictionary<string, string?>>\n        {\n            {\n                "Bug", new Dictionary<string, string?>\n                {\n                    { "Critical", "\ud83d\udd34 Critical Priority" },\n                    { "High", "\ud83d\udfe0 High Priority" },\n                    { "Medium", "\ud83d\udfe1 Medium Priority" },\n                    { "Low", "\ud83d\udfe2 Low Priority" }\n                }\n            },\n            {\n                "Feature", new Dictionary<string, string?>\n                {\n                    { "Open", "\ud83d\udced Open" },\n                    { "In Progress", "\u26a1 In Progress" },\n                    { "Review", "\ud83d\udc40 Under Review" },\n                    { "Closed", "\u2705 Closed" }\n                }\n            },\n            {\n                "Task", new Dictionary<string, string?>\n                {\n                    { "Alice", "\ud83d\udc69\u200d\ud83d\udcbb Alice (Frontend)" },\n                    { "Bob", "\ud83d\udc68\u200d\ud83d\udcbb Bob (Backend)" },\n                    { "Charlie", "\ud83e\uddd1\u200d\ud83d\udcbb Charlie (DevOps)" }\n                }\n            }\n        });\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usage-in-settings-with-dependency",children:"Usage in Settings with Dependency"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class Settings : SettingsBase\n{\n    [Setting("The type of issue being tracked")]\n    [LookupTable(IssueTypeProvider.LookupNameKey, LookupSource.ProviderDefined)]\n    public string? IssueType { get; set; }\n    \n    [Setting("The specific property for this issue type")]\n    [LookupTable(IssuePropertyProvider.LookupNameKey, LookupSource.ProviderDefined, nameof(IssueType))]\n    public string? IssueProperty { get; set; }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"registration-and-automatic-discovery",children:"Registration and Automatic Discovery"}),"\n",(0,r.jsxs)(n.p,{children:["Provider-defined lookup tables are automatically registered by the ",(0,r.jsx)(n.code,{children:"FigLookupWorker<T>"})," when your application starts. The worker:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Discovers Valid Lookup Tables"}),": Scans all properties in your settings class that have both ",(0,r.jsx)(n.code,{children:"[Setting]"})," and ",(0,r.jsx)(n.code,{children:"[LookupTable]"})," attributes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Matches Providers"}),": Only registers providers whose ",(0,r.jsx)(n.code,{children:"LookupName"})," matches a lookup table name used in your settings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Registers with Fig"}),": Automatically calls the Fig API to register the lookup table data"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"dependency-injection-registration",children:"Dependency Injection Registration"}),"\n",(0,r.jsx)(n.p,{children:"Register your lookup providers with your dependency injection container:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// In Program.cs or Startup.cs\nservices.AddSingleton<ILookupProvider, IssueTypeProvider>();\nservices.AddSingleton<IKeyedLookupProvider, IssuePropertyProvider>();\n\n// Register Fig client which automatically includes the lookup worker\nservices.AddFig<MySettings>();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"multiple-providers",children:"Multiple Providers"}),"\n",(0,r.jsx)(n.p,{children:"You can register multiple providers of each type:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"services.AddSingleton<ILookupProvider, IssueTypeProvider>();\nservices.AddSingleton<ILookupProvider, DatabaseTableProvider>();\nservices.AddSingleton<ILookupProvider, ApiEndpointProvider>();\n\nservices.AddSingleton<IKeyedLookupProvider, IssuePropertyProvider>();\nservices.AddSingleton<IKeyedLookupProvider, TableColumnProvider>();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-usage-examples",children:"Advanced Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-data-from-external-sources",children:"Dynamic Data from External Sources"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class DatabaseTableProvider : ILookupProvider\n{\n    private readonly IDbConnection _connection;\n    \n    public DatabaseTableProvider(IDbConnection connection)\n    {\n        _connection = connection;\n    }\n    \n    public string LookupName => "DatabaseTables";\n    \n    public async Task<Dictionary<string, string?>> GetItems()\n    {\n        var tables = await _connection.QueryAsync<(string Name, string Description)>(\n            "SELECT table_name, table_comment FROM information_schema.tables WHERE table_schema = \'mydb\'");\n            \n        return tables.ToDictionary(\n            t => t.Name, \n            t => string.IsNullOrEmpty(t.Description) ? null : t.Description);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"api-based-lookup-data",children:"API-Based Lookup Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class ServiceEndpointProvider : ILookupProvider\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILogger<ServiceEndpointProvider> _logger;\n    \n    public ServiceEndpointProvider(HttpClient httpClient, ILogger<ServiceEndpointProvider> logger)\n    {\n        _httpClient = httpClient;\n        _logger = logger;\n    }\n    \n    public string LookupName => "ServiceEndpoints";\n    \n    public async Task<Dictionary<string, string?>> GetItems()\n    {\n        try\n        {\n            var response = await _httpClient.GetFromJsonAsync<ServiceEndpoint[]>("/api/endpoints");\n            return response?.ToDictionary(e => e.Url, e => e.Description) ?? new();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogWarning(ex, "Failed to load service endpoints for lookup table");\n            return new Dictionary<string, string?>();\n        }\n    }\n}\n\npublic record ServiceEndpoint(string Url, string Description);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automatic Registration"}),": No manual lookup table creation required"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic Data"}),": Lookup tables update automatically when your application restarts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Safety"}),": Lookup table names are enforced through constants"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dependency Support"}),": Create cascading dropdowns with ",(0,r.jsx)(n.code,{children:"IKeyedLookupProvider"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"External Integration"}),": Easily integrate with databases, APIs, or other external systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fault Tolerance"}),": Failed lookups don't prevent application startup"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);