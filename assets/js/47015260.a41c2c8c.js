"use strict";(self.webpackChunkfig_documentation=self.webpackChunkfig_documentation||[]).push([[8169],{69454:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"features/client-secrets/docker-secret-provider","title":"Fig Docker Secret Provider","description":"This provider enables Fig client secret management using Docker secrets, designed for use in containerized Linux environments.","source":"@site/docs/features/28-client-secrets/2-docker-secret-provider.md","sourceDirName":"features/28-client-secrets","slug":"/features/client-secrets/docker-secret-provider","permalink":"/docs/next/features/client-secrets/docker-secret-provider","draft":false,"unlisted":false,"editUrl":"https://github.com/mzbrau/fig/tree/main/doc/fig-documentation/docs/features/28-client-secrets/2-docker-secret-provider.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Docker Client Secret Provider"},"sidebar":"tutorialSidebar","previous":{"title":"Client Secrets","permalink":"/docs/next/features/client-secrets/client-secret-providers"},"next":{"title":"Default Client Secret Provider","permalink":"/docs/next/features/client-secrets/dpapi-secret-provider"}}');var t=r(74848),i=r(28453);const o={sidebar_position:2,sidebar_label:"Docker Client Secret Provider"},c="Fig Docker Secret Provider",l={},d=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Secret Naming Convention",id:"secret-naming-convention",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example: Mounting a Secret in Docker",id:"example-mounting-a-secret-in-docker",level:2}];function a(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"fig-docker-secret-provider",children:"Fig Docker Secret Provider"})}),"\n",(0,t.jsx)(n.p,{children:"This provider enables Fig client secret management using Docker secrets, designed for use in containerized Linux environments."}),"\n",(0,t.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Linux-Only"}),": Automatically enabled on Linux containers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic Secret Creation"}),": Secrets are only auto-created if the environment variable ",(0,t.jsx)(n.code,{children:"ASPNETCORE_ENVIRONMENT"})," or ",(0,t.jsx)(n.code,{children:"DOTNET_ENVIRONMENT"})," is set to ",(0,t.jsx)(n.code,{children:"Development"}),". In all other environments, secrets must already exist or a ",(0,t.jsx)(n.code,{children:"SecretNotFoundException"})," will be thrown."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File-Based Storage"}),": Reads secrets from files mounted at ",(0,t.jsx)(n.code,{children:"/run/secrets/"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Thread-Safe"}),": Safe for concurrent use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Graceful Error Handling"}),": Handles missing files and permission errors with clear exceptions."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dotnet add package Fig.Client.SecretProvider.Docker\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'builder.Configuration.SetBasePath(GetBasePath())\n    .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)\n    .AddFig<Settings>(options =>\n    {\n        options.ClientName = "AspNetApi";\n        options.LoggerFactory = loggerFactory;\n        options.CommandLineArgs = args;\n        options.ClientSecretProviders = [new DockerSecretProvider()];\n    });\n'})}),"\n",(0,t.jsx)(n.h2,{id:"secret-naming-convention",children:"Secret Naming Convention"}),"\n",(0,t.jsxs)(n.p,{children:["Secrets are stored as files in ",(0,t.jsx)(n.code,{children:"/run/secrets/"})," using the format: ",(0,t.jsx)(n.code,{children:"FIG_{CLIENT_NAME}_SECRET"})," (uppercase, no spaces).",(0,t.jsx)(n.br,{}),"\n","For example, for client name ",(0,t.jsx)(n.code,{children:"MyService"}),", the secret file will be ",(0,t.jsx)(n.code,{children:"/run/secrets/FIG_MYSERVICE_SECRET"})," or ",(0,t.jsx)(n.code,{children:"/run/secrets/FIG_MYSERVICE_SECRET.txt"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The provider attempts to read the secret from ",(0,t.jsx)(n.code,{children:"/run/secrets/FIG_{CLIENT_NAME}_SECRET"})," or ",(0,t.jsx)(n.code,{children:"/run/secrets/FIG_{CLIENT_NAME}_SECRET.txt"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If the secret file does not exist and the environment is ",(0,t.jsx)(n.code,{children:"Development"}),", it will attempt to create a new secret file with a random GUID."]}),"\n",(0,t.jsxs)(n.li,{children:["If the file cannot be found and the environment is not ",(0,t.jsx)(n.code,{children:"Development"}),", a ",(0,t.jsx)(n.code,{children:"SecretNotFoundException"})," is thrown."]}),"\n",(0,t.jsx)(n.li,{children:"If the provider cannot create the file due to permissions or missing directory, an exception is thrown."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mount Docker Secrets"}),": Use Docker's secrets mechanism to mount secrets at ",(0,t.jsx)(n.code,{children:"/run/secrets/"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Least Privilege"}),": Run containers with only the permissions needed to read secrets."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No AutoCreate in Production"}),": In production and all non-development environments, secrets will not be auto-created."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor for Errors"}),": Log and monitor for missing secret or permission errors."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example-mounting-a-secret-in-docker",children:"Example: Mounting a Secret in Docker"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'echo "my-secret-value" | docker secret create FIG_MYSERVICE_SECRET -\ndocker service create --name myservice --secret FIG_MYSERVICE_SECRET myimage\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The secret will be available to the container at ",(0,t.jsx)(n.code,{children:"/run/secrets/FIG_MYSERVICE_SECRET"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var s=r(96540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);