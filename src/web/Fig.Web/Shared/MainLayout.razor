@using Fig.Common.Events
@using Fig.Web.Services
@using Fig.Contracts.Authentication
@using Fig.Web.Events
@using Microsoft.Extensions.Options
@using Microsoft.VisualBasic
@inherits LayoutComponentBase
@inject IAccountService AccountService
@inject IOptions<WebSettings> Settings
@inject DialogService DialogService
@inject IEventDistributor EventDistributor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (LoggedIn || (_isKeycloakEnabled && _isAuthenticated)) // Show layout if logged in via Fig or Keycloak
{
    <!-- nav -->
    <nav class="navbar navbar-expand navbar-dark">
        <div class="navbar-nav">
            <NavLink href="" Match="NavLinkMatch.All" class="nav-item nav-link py-0 px-3">
                <img src="images\fig_logo_name_right_white_299x135.png" w asp-append-version="true" width="90" height="40"/>
            </NavLink>
            <NavLink href="" Match="NavLinkMatch.All" class="nav-item nav-link">Settings</NavLink>
            <NavLink href="settingstable" class="nav-item nav-link">Settings Table</NavLink>
            <NavLink href="events" class="nav-item nav-link">Events</NavLink>
            @if (AccountService?.AuthenticatedUser?.Role == Role.Administrator)
            {
                <NavLink href="users" class="nav-item nav-link">Users</NavLink>
                <NavLink href="clients" class="nav-item nav-link">Connected Clients</NavLink>
                <NavLink href="apistatus" class="nav-item nav-link">API Status</NavLink>
                <NavLink href="importexport" class="nav-item nav-link">Import / Export</NavLink>
                <NavLink href="configuration" class="nav-item nav-link">Configuration</NavLink>
                <NavLink href="webhooks" class="nav-item nav-link">Web Hooks</NavLink>
                <NavLink href="timemachine" class="nav-item nav-link">Time Machine</NavLink>
                <NavLink href="scheduling" class="nav-item nav-link">Scheduling</NavLink>
            }
            <NavLink href="lookuptables" class="nav-item nav-link">Lookup Tables</NavLink>
            <div style="padding-bottom: 5px">
                <RadzenButton Variant="Variant.Text" Click=@(_ => ShowKeybindings()) Text="Shortcuts" ButtonStyle="ButtonStyle.Light" Icon="help" />
            </div>
            @if (IsSettingsPage)
            {
                <RadzenButton Variant="Variant.Flat" Icon="search" ButtonStyle="ButtonStyle.Light" Style="margin-left: 10px; background-color: transparent; color: white; border: none; margin-top: -20px;" Click="@(async () => await EventDistributor.PublishAsync(EventConstants.Search))" />
            }
            

        </div>

        <div class="navbar-nav ms-auto">
            <div class="align-content-center p-1">
                <ConnectionStatus/>
                <p>@Settings.Value.Environment</p>
            </div>

            <RadzenProfileMenu>
                <Template>
                    <RadzenImage Path="images/user-icon.png" style="width: 25px"/>
                </Template>
                <ChildContent>
                    @if (_isKeycloakEnabled && _isAuthenticated)
                    {
                        <p class="text-center fs-3" style="margin: 0">@_keycloakUsername</p>
                        <p class="text-center fst-italic">@(_keycloakRoles != null && _keycloakRoles.Any() ? string.Join(", ", _keycloakRoles) : "User")</p>
                        @* Account management for Keycloak users is typically external *@
                        <RadzenProfileMenuItem class="match-navbar-background" Text="Logout" Path="authentication/logout" Icon="logout"/>
                    }
                    else if (AccountService?.AuthenticatedUser != null)
                    {
                        <p class="text-center fs-3" style="margin: 0">@AccountService.AuthenticatedUser.Username</p>
                        <p class="text-center fst-italic">@AccountService.AuthenticatedUser.Role</p>
                        <RadzenProfileMenuItem class="match-navbar-background" Text="Account" Path="account/manage" Icon="account_circle"/>
                        <RadzenProfileMenuItem class="match-navbar-background" Text="Logout" Path="account/logout" Icon="logout"/>
                    }
                </ChildContent>
            </RadzenProfileMenu>
        </div>
    </nav>
}

<div class="app-container">
    @if (LoggedIn || (_isKeycloakEnabled && _isAuthenticated)) // Show notifications if logged in either way
    {
        <RadzenNotification />
    }
    <RadzenTooltip/>
    <RadzenDialog/>
    <!-- <Alert />-->
    <ErrorBoundary>
        <ChildContent>
            @Body
        </ChildContent>
        <ErrorContent Context="ex">
            <ErrorHandlingForm UnhandledException="ex"/>
        </ErrorContent>
    </ErrorBoundary>

</div>

@code {
    private bool _isKeycloakEnabled;
    private bool _isAuthenticated;
    private string? _keycloakUsername;
    private IEnumerable<string>? _keycloakRoles;

    private bool LoggedIn => AccountService?.AuthenticatedUser != null;

    protected override async Task OnInitializedAsync()
    {
        _isKeycloakEnabled = Settings.Value.UseKeycloak;

        if (_isKeycloakEnabled)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            _isAuthenticated = user.Identity?.IsAuthenticated ?? false;
            if (_isAuthenticated)
            {
                _keycloakUsername = user.Identity?.Name ?? user.FindFirst("preferred_username")?.Value;
                _keycloakRoles = user.FindAll(ClaimTypes.Role).Select(c => c.Value);
                // If "client_role" or "realm_role" is used, adjust claim extraction accordingly.
            }
        }
        
        EventDistributor.Subscribe<LogoutEvent>(NavigateToLogin);
        await base.OnInitializedAsync();
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("account/login");
    }

    private bool IsSettingsPage
    {
        get
        {
            var uri = new Uri(NavigationManager.Uri);
            // Check if the path is root ("/")
            var isRoot = uri.AbsolutePath == "/";
            return isRoot;
        }
    }

    private async Task ShowKeybindings()
    {
        await DialogService.OpenAsync($"Keyboard Shortcuts", ds => 
            @<div>
                <p>Alt + s &nbsp.&nbsp.&nbsp.&nbsp.&nbsp Save Client</p>
                <p>Alt + a &nbsp.&nbsp.&nbsp.&nbsp.&nbsp Save All Clients</p>
                <p>Alt + e &nbsp.&nbsp.&nbsp.&nbsp.&nbsp Expand All</p>
                <p>Alt + c &nbsp.&nbsp.&nbsp.&nbsp.&nbsp Collapse All</p>
                <p>Alt + i &nbsp.&nbsp.&nbsp.&nbsp.&nbsp New Instance</p>
                <p>Alt + d &nbsp.&nbsp.&nbsp.&nbsp.&nbsp Show Client Description</p>
                <p>Alt + f &nbsp.&nbsp.&nbsp.&nbsp.&nbsp Find Settings</p>
                <p>Find Syntax</p>
                <p>Results must match all search words. By default searches for client, setting, instance</p>
                <p>'c:' or 'client:' to search only for client names</p>
                <p>'s:' or 'setting:' to search only for setting names</p>
                <p>'d:' or 'description:' to search only for description</p>
                <p>'i:' or 'instance:' to search only for instance name</p>
                <p>'v:' or 'value:' to search only for value</p>
            </div>,
            new DialogOptions() { Resizable = true, Draggable = true, Style = "width: 800px;"});
    }
}