@page "/WebHooks"
@using Fig.Web.Models.WebHooks
@using Fig.Web.Attributes
@using Fig.Contracts.WebHook
@attribute [Administrator]

<div class="container-fluid py-4">
    <!-- Web Hook Clients Section -->
    <div class="card bg-dark text-light mb-4">
        <div class="card-header bg-dark border-secondary d-flex justify-content-between align-items-center">
            <h2 class="mb-0">Web Hook Clients</h2>
            <RadzenButton Text="Add Client" Icon="add" Click="AddClient" ButtonStyle="ButtonStyle.Primary"/>
        </div>
        
        <div class="card-body">
            <RadzenDataGrid @ref="_webHookClientsGrid" 
                           AllowFiltering="true" 
                           AllowColumnResize="true" 
                           FilterMode="FilterMode.Advanced" 
                           AllowSorting="true"
                           PageSize="50" 
                           AllowPaging="true" 
                           PagerHorizontalAlign="HorizontalAlign.Left" 
                           ShowPagingSummary="true"
                           Data="@WebHookClients" 
                           TItem="WebHookClientModel" 
                           LogicalFilterOperator="LogicalFilterOperator.Or"
                           Class="table-hover table-dark">
                <Columns>
                    <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Property="Name" Filterable="true" Title="Name" TextAlign="TextAlign.Left">
                        <Template>
                            @context.Name
                        </Template>
                        <EditTemplate Context="client">
                            <RadzenTextBox @bind-Value="client.Name" Style="width: 100%"/>
                        </EditTemplate>
                    </Radzen.Blazor.RadzenDataGridColumn>
                    <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Filterable="false" Title="BaseUri" TextAlign="TextAlign.Left">
                        <Template>
                            @context.BaseUri?.ToString()
                        </Template>
                        <EditTemplate Context="client">
                            <RadzenTextBox @bind-Value="client.UriStr" Style="width: 100%"/>
                        </EditTemplate>
                    </Radzen.Blazor.RadzenDataGridColumn>
                    <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Filterable="true" Title="Secret" TextAlign="TextAlign.Left">
                        <Template>
                            @("<SET>")
                        </Template>
                        <EditTemplate Context="client">
                            @if (client.Id is not null)
                            {
                                <RadzenText Text="Regenerate:"/>
                                <RadzenCheckBox @bind-Value="client.UpdateSecret"/>
                            }
                        </EditTemplate>
                    </Radzen.Blazor.RadzenDataGridColumn>
                    <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Filterable="true" Title="Test" TextAlign="TextAlign.Left">
                        <Template Context="client">
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="info" Class="m-1" IsBusy="client.TestPending" BusyText="Testing..." Click="@(() => TestClient(client))" Text="Test"/>
                        </Template>
                        <EditTemplate>
                        </EditTemplate>
                    </Radzen.Blazor.RadzenDataGridColumn>
                    <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Context="controlContext"
                                                        Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="120px">
                        <Template Context="row">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(_ => EditRow(row))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="row">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@(_ => SaveRow(row))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(_ => CancelEdit(row))">
                            </RadzenButton>
                        </EditTemplate>
                    </Radzen.Blazor.RadzenDataGridColumn>
                    <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Context="controlContext"
                                                        Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="60px">
                        <Template Context="row">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(_ => DeleteRow(row))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="row">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(_ => DeleteRow(row))">
                            </RadzenButton>
                        </EditTemplate>
                    </Radzen.Blazor.RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        </div>
    </div>

    <!-- Web Hook Definitions Section -->
    <div class="card bg-dark text-light">
        <div class="card-header bg-dark border-secondary d-flex justify-content-between align-items-center">
            <h2 class="mb-0">Web Hook Definitions</h2>
            <RadzenButton Text="Add Web Hook" Icon="add" Click="AddWebHook" ButtonStyle="ButtonStyle.Primary"/>
        </div>
        
        <div class="card-body">
            @foreach (var webHook in WebHookFacade.WebHooks)
            {
                <div class="card bg-dark border-secondary mb-3">
                    <div class="card-body">
                        <div class="d-flex justify-content-end mb-3">
                            <div class="btn-group">
                                @if (!webHook.IsInEditMode)
                                {
                                    <RadzenButton Click="@(_ => webHook.Edit())" 
                                                Icon="edit" 
                                                ButtonStyle="ButtonStyle.Light" 
                                                Class="me-2"/>
                                }
                                else
                                {
                                    <RadzenButton Click="@(args => SaveWebHook(webHook))" 
                                                Icon="check" 
                                                ButtonStyle="ButtonStyle.Primary" 
                                                Class="me-2"/>
                                }
                                <RadzenButton Click="@(args => DeleteWebHook(webHook))" 
                                            Icon="delete" 
                                            ButtonStyle="ButtonStyle.Danger"/>
                            </div>
                        </div>

                        <div class="row g-3 align-items-center mb-3">
                            <div class="col-md-2">
                                <label class="form-label text-end">Client:</label>
                            </div>
                            <div class="col-md-4">
                                <RadzenDropDown AllowClear="false" 
                                              TValue="Guid"
                                              Data="@WebHookFacade.WebHookClients"
                                              TextProperty="Name" 
                                              ValueProperty="Id"
                                              @bind-Value="webHook.ClientId"
                                              Disabled="@(!webHook.IsInEditMode)" 
                                              Class="w-100"/>
                            </div>

                            <div class="col-md-2">
                                <label class="form-label text-end">Event:</label>
                            </div>
                            <div class="col-md-4">
                                <RadzenDropDown AllowClear="false" 
                                              TValue="WebHookType"
                                              Data="@WebHookTypes"
                                              TextProperty="EnumName" 
                                              ValueProperty="EnumValue"
                                              @bind-Value="webHook.WebHookType"
                                              Disabled="@(!webHook.IsInEditMode)" 
                                              Class="w-100"/>
                            </div>
                        </div>

                        <div class="row g-3 align-items-center mb-3">
                            <div class="col-md-2">
                                <label class="form-label text-end">Setting Client Regex:</label>
                            </div>
                            <div class="col-md-4">
                                <RadzenTextBox @bind-Value="webHook.ClientNameRegex"
                                               Disabled="@(!webHook.IsInEditMode)" Style="width: 100%"/>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label text-end">Setting Name Regex:</label>
                            </div>
                            <div class="col-md-4">
                                <RadzenTextBox @bind-Value="webHook.SettingNameRegex"
                                               Disabled="@(!webHook.IsInEditMode)" Style="width: 100%"/>
                            </div>
                        </div>

                        <div class="row g-3 align-items-center mb-3">
                            <div class="col-md-2">
                                <label class="form-label text-end">Minimum Running:</label>
                            </div>
                            <div class="col-md-4">
                                <RadzenNumeric @bind-Value="webHook.MinSessions" TValue="int"
                                               Disabled="@(!webHook.IsInEditMode)" Style="width: 100%"/>
                            </div>
                        </div>

                        @if (!webHook.IsInEditMode)
                        {
                            <div class="mt-3">
                                <p class="mb-1">@webHook.MatchingClients.Summary
                                    <a href="" @onclick="@(() => webHook.ShowMatchDetails())" @onclick:preventDefault>Details</a>
                                </p>
                            
                                @if (webHook.AreMatchDetailsVisible)
                                {
                                    <div class="mt-2">
                                        <RadzenDataGrid AllowFiltering="false" 
                                                        AllowColumnResize="true" 
                                                        FilterMode="FilterMode.Advanced" 
                                                        PageSize="3" 
                                                        AllowPaging="true"
                                                        Data="webHook.MatchingClients.Matches" 
                                                        TItem="MatchingClientModel" 
                                                        Class="table-sm">
                                            <Columns>
                                                <Radzen.Blazor.RadzenDataGridColumn TItem="MatchingClientModel" Property="Client" Title="Client" Frozen="true" Width="100px"/>
                                                <Radzen.Blazor.RadzenDataGridColumn TItem="MatchingClientModel" Property="Setting" Title="Setting" Frozen="true" Width="100px"/>
                                            </Columns>
                                        </RadzenDataGrid>
                                    </div>
                                }
                            </div>
                        }
                        
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {

    async Task ShowCloseableFromOverlayDialog(string heading, string message)
    {
        await DialogService.OpenAsync(heading, ds =>
            @<div>
                <p style="white-space: pre-line">@message</p>
                
            </div>, new DialogOptions { CloseDialogOnOverlayClick = true });
    }
    
    async Task ShowClientHashDialog((string message, string hash) result)
    {
        await DialogService.OpenAsync("Hashed Secret", ds =>
            @<div>
                <div class="mb-3">
                    <div>@result.message</div>
                    <div class="d-flex align-items-center">
                        <div class="text-muted me-2">@result.hash</div>
                        <RadzenButton Icon="content_copy"
                                      ButtonStyle="ButtonStyle.Light"
                                      Size="ButtonSize.Small"
                                      Click="@(async () => await CopyToClipboard(result.hash))"/>
                    </div>
                </div>
                
            </div>, new DialogOptions { CloseDialogOnOverlayClick = true });
    }

    async Task ShowTestResultDialog(WebHookClientTestResultsDataContract result)
    {
        await DialogService.OpenAsync($"Test Results for {result.ClientName}", ds =>
            @<div>
                <RadzenDataGrid AllowColumnResize="true" Data="@result.Results" TItem="TestResultDataContract">
                    <Columns>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="150px" Property="WebHookType" Title="Type" TextAlign="TextAlign.Left" SortOrder="SortOrder.Descending"/>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="100px" Title="Result" TextAlign="TextAlign.Left">
                            <Template>
                                <div style="display: flex; align-items: center;">
                                    @if (context.Result == "Succeeded")
                                    {
                                        <span style="color: #28a745; margin-right: 8px; font-size: 16px;">✓</span>
                                    }
                                    else
                                    {
                                        <span style="color: #dc3545; margin-right: 8px; font-size: 16px;">✗</span>
                                    }
                                    <span>@context.Result</span>
                                </div>
                            </Template>
                        </Radzen.Blazor.RadzenDataGridColumn>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="75px" Property="StatusCode" Title="Status Code" TextAlign="TextAlign.Left"/>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="150px" Property="Message" Title="Message" TextAlign="TextAlign.Left"/>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="100px" Property="TestDuration" Title="Duration" TextAlign="TextAlign.Left"/>
                    </Columns>
                </RadzenDataGrid>
            </div>, new DialogOptions { Resizable = true, Width = "70%" });
    }

    private async Task CopyToClipboard(string text)
    {
        await JavascriptRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        NotificationService.Notify(NotificationFactory.Success("Copied", "Copied to clipboard"));
    }

    async Task<bool> GetDeleteConfirmation(string clientName)
    {
        return await DialogService.OpenAsync("Confirm Delete", ds =>
            @<div>
                <p class="mb-4">Are you sure you want to delete '@clientName'</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                    </div>
                </div>
            </div>);
    }

}