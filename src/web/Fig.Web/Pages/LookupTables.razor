@page "/LookupTables"
@using Fig.Web.Models.LookupTables
@using Radzen
@using Radzen.Blazor

<div class="container" style="max-width: 1400px;">
    <div class="row">
        <div class="col-md-auto">
            <div class="p-1">
                <RadzenButton Click=@(args => CreateNew()) Text="New Table" Disabled="@IsReadOnly" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success"/>
            </div>
                
            <RadzenListBox AllowFiltering="true" @bind-Value=@SelectedItem FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                           TValue="Models.LookupTables.LookupTable" Data=@Items TextProperty="Name"
                           Class="w-100 p-3" style="height: 100%; min-height: calc(100vh - 220px)"/>

        </div>

        <div class="col">

            @if (SelectedItem != null)
            {
                <RadzenCard class="m-3">
                    @if (SelectedItem.IsClientDefined)
                    {
                        <div class="alert alert-info mb-3" role="alert">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Client-Defined Table:</strong> This lookup table was defined by a Fig client and cannot be edited through the web interface.
                        </div>
                    }
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <label class="form-label fw-semibold">Table Name:</label>
                            <RadzenTextBox Name="textValue" @bind-Value=@SelectedItem.Name ReadOnly="@(!SelectedItem.IsEditing || SelectedItem.IsClientDefined)" Class="w-100" Placeholder="Enter table name"/>
                        </div>
                        @if (!SelectedItem.IsEditing && SelectedItem.Lookups.Any())
                        {
                            <div class="col-md-4 text-end">
                                <small class="text-muted">@SelectedItem.Lookups.Count items</small>
                            </div>
                        }
                    </div>
                    
                        
                    @if (!SelectedItem.IsEditing)
                    {
                        <div class="p-1">
                            <RadzenDataGrid @ref="_itemGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="25" 
                                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                                            Data="@SelectedItem.Lookups" TItem="LookupTableItemModel" LogicalFilterOperator="LogicalFilterOperator.Or"
                                            class="mb-3">
                                <Columns>
                                    <Radzen.Blazor.RadzenDataGridColumn TItem="LookupTableItemModel" Property="Key" Filterable="true" Title="Key" TextAlign="TextAlign.Left" />
                                    <Radzen.Blazor.RadzenDataGridColumn TItem="LookupTableItemModel" Property="Alias" Filterable="true" Title="Alias (Optional)" TextAlign="TextAlign.Left" />
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                            
                        <div class="d-flex gap-2">
                            <RadzenButton Click=@(args => SelectedItem.StartEditing()) Text="Edit" Disabled="@IsSelectedItemReadOnly" Icon="edit" ButtonStyle="ButtonStyle.Success"/>
                            <RadzenButton Click=@(args => OnDelete()) Text="Delete" Icon="delete" Disabled="@IsSelectedItemReadOnly" BusyText="Deleting..." IsBusy=@_isDeleteInProgress ButtonStyle="ButtonStyle.Danger"/>
                        </div>
                            
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label fw-semibold">
                                Edit Table Contents
                                <small class="text-muted">(One entry per line. Use "key,alias" format for aliases)</small>
                            </label>
                            <RadzenTextArea Name="textValue" @bind-Value=@SelectedItem.LookupsAsText Class="w-100" Rows="16" 
                                            ReadOnly="@SelectedItem.IsClientDefined"
                                            Placeholder="Enter your lookup values here...&#10;Example:&#10;1,First Alias&#10;2,Second Alias&#10;3"/>
                        </div>
                            
                        <div class="d-flex gap-2 flex-wrap">
                            <RadzenButton Click=@(args => Save()) Text="Save Changes" Icon="save" Disabled="@IsSelectedItemReadOnly" ButtonStyle="ButtonStyle.Success"/>
                            <RadzenButton Click=@(args => Cancel()) Text="Cancel" Icon="cancel" ButtonStyle="ButtonStyle.Light"/>
                            <div class="ms-auto">
                                <RadzenButton Click=@(args => OnDelete()) Text="Delete Table" Icon="delete" Disabled="@IsSelectedItemReadOnly" BusyText="Deleting..." IsBusy=@_isDeleteInProgress ButtonStyle="ButtonStyle.Danger"/>
                            </div>
                        </div>
                    }
                        
                </RadzenCard>
            }
            else
            {
                <div class="text-center mt-5 p-5">
                    <i class="fas fa-table" style="font-size: 3rem; color: #dee2e6;"></i>
                    <h5 class="text-muted mt-3">Select a table to view or edit its contents</h5>
                    <p class="text-muted">Choose from the list on the left or create a new table</p>
                </div>
            }

        </div>
    </div>
</div>

@code {
    
    async Task<bool> GetDeleteConfirmation(string itemName)
    {
        return await DialogService.OpenAsync("Confirm Delete", ds =>
            @<div>
                <p class="mb-4">Are you sure you want to delete @itemName</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                    </div>
                </div>
            </div>);
    }
}

