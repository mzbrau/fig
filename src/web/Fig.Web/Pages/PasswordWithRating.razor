@using Zxcvbn
<div style="display: flex; align-items: center; gap: 10px;">
    @if (_isRevealed)
    {
        <RadzenTextBox @bind-Value="_currentPassword" @oninput="p => PasswordChanged(p.Value?.ToString())" Placeholder="@Placeholder" data-test-id="@TestId" Class="w-100 p-1"/>
    }
    else
    {
        <RadzenPassword @bind-Value="_currentPassword" @oninput="p => PasswordChanged(p.Value?.ToString())" Placeholder="@Placeholder" data-test-id="@TestId" Class="w-100 p-1"/>
    }
    @if (!string.IsNullOrEmpty(_currentPassword))
    {
        <RadzenButton Icon="visibility" 
                     ButtonStyle="ButtonStyle.Light" 
                     Size="ButtonSize.Small"
                     @onmousedown="() => _isRevealed = true"
                     @onmouseup="() => _isRevealed = false"
                     @onmouseleave="() => _isRevealed = false"
                     @ontouchstart="() => _isRevealed = true"
                     @ontouchend="() => _isRevealed = false"
                     Style="min-width: 40px;"
                     title="Hold to reveal password"/>
    }
</div>
<div>
    @if (PasswordStrength == 0)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="Terrible"/>
    }
    else if (PasswordStrength == 1)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="Poor"/>
    }
    else if (PasswordStrength == 2)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="Average"/>
    }
    else if (PasswordStrength == 3)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="Good"/>
    }
    else if (PasswordStrength == 4)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Excellent"/>
    }
</div>

<p style="white-space: pre-wrap">@CrackableMessage</p>

@code {
    
    public int PasswordStrength { get; set; } = -1;
    
    private string _currentPassword = string.Empty;
    private bool _isRevealed = false;
    
    [Parameter]
    public string? TestId { get; set; }

    [Parameter]
    public Action<string> OnValidPassword { get; set; } = default!;

    [Parameter]
    public Action<string> OnInvalidPassword { get; set; } = default!;

    [Parameter]
    public int MinimumScore { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    private string CrackableMessage { get; set; } = string.Empty;

    public void ResetPasswordInformation()
    {
        PasswordStrength = -1;
        CrackableMessage = string.Empty;
        _currentPassword = string.Empty;
        _isRevealed = false;
    }

    private void PasswordChanged(string? password)
    {
        if (string.IsNullOrEmpty(password))
        {
            ResetPasswordInformation();
            return;
        }

        _currentPassword = password;

        if (ValidatePassword(password))
            OnValidPassword(password);
        else
            OnInvalidPassword(password);
    }

    private bool ValidatePassword(string password)
    {
        var result = Core.EvaluatePassword(password);
        PasswordStrength = result.Score;
        CrackableMessage = $"Crackable in {result.CrackTimeDisplay.OfflineSlowHashing1e4PerSecond}";

        return result.Score >= MinimumScore;
    }
}