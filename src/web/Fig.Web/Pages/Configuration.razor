@page "/Configuration"
@using Fig.Web.Attributes
@attribute [Administrator]

<div class="container p-0">
    <div class="row">
        <div class="col">
        </div>
        <div class="col-9">
            <RadzenCard class="m-3">
                <h3 class="h5">Allow New Client Registrations</h3>
                <p>When disabled, new client registrations (those who have not previously registered with Fig) will not be allowed to register.</p>
                <p>It is recommended that new registrations be disabled in a production system once all clients are registered for security reasons.</p>
                <div class="p-1">
                    <RadzenSwitch @bind-Value="ConfigurationModel.AllowNewRegistrations" Change="OnConfigurationValueChanged"/>
                </div>
            </RadzenCard>

            <RadzenCard class="m-3">
                <h3 class="h5">Allow Updated Client Registrations</h3>
                <p>When disabled, clients will not be allowed to change the setting definitions when they register.</p>
                <p>
                    This could be useful in a live upgrade situation where a new version of a client adds settings.
                    Once the new settings have been added, disable updated registrations to avoid any instances of the older clients reverting the registration and removing the new settings.
                </p>
                <div class="p-1">
                    <RadzenSwitch @bind-Value="ConfigurationModel.AllowUpdatedRegistrations" Change="OnConfigurationValueChanged"/>
                </div>
            </RadzenCard>

            <RadzenCard class="m-3">
                <h3 class="h5">Allow Offline Settings</h3>
                <p>Fig clients can save the settings values locally in a file so they client can still start even if the Fig API is down.</p>
                <p>
                    Settings are encrypted using the client secret and stored in a binary file. However, it may still be desirable to disable
                    this feature if additional security is more important than up time.
                </p>
                <div class="p-1">
                    <RadzenSwitch @bind-Value="ConfigurationModel.AllowOfflineSettings" Change="OnConfigurationValueChanged"/>
                </div>
            </RadzenCard>

            <RadzenCard class="m-3">
                <h3 class="h5">Allow File Imports</h3>
                <p>Fig supports loading export from an import directory. This is a useful feature when Fig is deployed in a container as a Helm chart or similar can be used to set the initial configuration.</p>
                <p>However, depending on the level of access to the import directory, it may impose a security risk as imports can be configured to remove existing clients and settings.</p>
                <div class="p-1">
                    <RadzenSwitch @bind-Value="ConfigurationModel.AllowFileImports" Change="OnConfigurationValueChanged"/>
                </div>
            </RadzenCard>
            
            <RadzenCard class="m-3">
                <h3 class="h5">Allow Display Scripts</h3>
                <p>Display scripts provide flexibility when configuring the behavior of the settings for a specific client.</p>
                <p>They should be quite safe as it has limited scope and runs within the web assembly sandbox but it does involve executing code that has been written by a third party</p>
                <p>and as a result, if you don't trust all the registering clients, disabling this feature eliminates the possibility for misuse.</p>
                <div class="p-1">
                    <RadzenSwitch @bind-Value="ConfigurationModel.AllowDisplayScripts" Change="OnConfigurationValueChanged"/>
                </div>
            </RadzenCard>

            <RadzenCard class="m-3">
                <h3 class="h5">Enable Time Machine</h3>
                <p>Time machine is a feature that takes regular snapshots of all setting values and saves them in the database..</p>
                <p>Depending on the number of changes this could start to add up to a lot of data. It will also take a little longer to perform every setting update.</p>
                <div class="p-1">
                    <RadzenSwitch @bind-Value="ConfigurationModel.EnableTimeMachine" Change="OnConfigurationValueChanged"/>
                </div>
            </RadzenCard>

            <RadzenCard class="m-3">
                <h3 class="h5">Allow Client Overrides</h3>
                <p>Client overrides allow applications to override the setting value for settings based on an environment variable.</p>
                <p>This can be useful for container deployments where you want to set container deployment specific values but still see an manage the settings in Fig.</p>
                <p>Note that any settings changes will be reverted on the next client restart back to the environment variable value.</p>
                <div class="p-1">
                    <RadzenSwitch @bind-Value="ConfigurationModel.AllowClientOverrides" Change="OnConfigurationValueChanged"/>
                </div>
                <div class="pt-2">
                    <h5>Client Override Regex</h5>
                    <p>If client overrides are enabled, only clients with names matching this regular expression will be allowed to override settings.</p>
                </div>
                <div class="p-1">
                    <RadzenTextBox @bind-Value="ConfigurationModel.ClientOverridesRegex" Disabled="@(!ConfigurationModel.AllowClientOverrides)" Change="OnConfigurationValueChanged" Style="width: 400px"/>
                </div>
            </RadzenCard>

            <RadzenCard class="m-3">
                <h3 class="h5">Web Application Base Address</h3>
                <p>This is the address that users use to access the web application. It is used to generate links for web hooks.</p>
                <div class="p-1">
                    <RadzenTextBox @bind-Value="ConfigurationModel.WebApplicationBaseAddress" Change="OnConfigurationValueChanged" Style="width: 400px"/>
                </div>
            </RadzenCard>

            <RadzenCard class="m-3">
                <h3 class="h5">API Secret Encryption Migration</h3>
                <p>
                    The API secret is used to encrypt data in the database. Good security practise says that it should be rotated periodically.
                    When this occurs, all the encrypted data in the database needs to be re-encrypted with the new secret.
                    The old secret should be set as the 'PreviousSecret' and then press this button to perform the migration.
                    Note: All API instances should have the secret and previous set to the same values before attempting migration.
                </p>
                <p>There are @ConfigurationFacade.EventLogCount event log records. Migration can take some time if there are a lot of logs to migrate.</p>
                <div class="p-1">
                    <RadzenButton Text="Migrate" Click="MigrateEncryptedData" IsBusy="@_isMigrationInProgress" BusyText="Migrating..."></RadzenButton>
                </div>
            </RadzenCard>

            <RadzenCard class="m-3">
                <h3 class="h5">Azure Key Vault for Secrets (Experimental)</h3>
                <p>
                    Azure Key Vault can be used to store secrets rather than storing them in the Fig database.
                    Fig only supports this configuration when Fig is deployed in Azure.
                    Before enabling this feature, ensure they Key Vault has been created and the Fig API has been granted access to read and write keys.
                </p>
                <div class="p-1">
                    <RadzenSwitch @bind-Value="ConfigurationModel.UseAzureKeyVault" Change="OnConfigurationValueChanged"/>
                </div>
                <div class="p-1">
                    <RadzenTextBox @bind-Value="ConfigurationModel.AzureKeyVaultName" Placeholder="Key Vault Name" Disabled="@(!ConfigurationModel.UseAzureKeyVault)" Change="OnConfigurationValueChanged" Style="width: 400px"/>
                </div>
                <div class="p-1">
                    <RadzenButton Text="Test" Click="TestKeyVault"
                                  Disabled="@(!ConfigurationModel.UseAzureKeyVault || string.IsNullOrWhiteSpace(ConfigurationModel.AzureKeyVaultName))"
                                  IsBusy="@_isTestingAzureKeyVault" BusyText="Testing...">
                    </RadzenButton>
                </div>
            </RadzenCard>

            <RadzenCard class="m-3">
                <h3 class="h5">Poll Interval Override (ms)</h3>
                <p>Fig clients poll every 30 seconds by default. This can be overriden via environment variable.</p>
                <p>This is a global override that will apply to all connected clients.</p>
                <p>It is not recommended to set this value under 10000ms. Values under 2000ms are not allowed.</p>
                <div class="p-1">
                    <RadzenNumeric TValue="double?" @bind-Value="@(ConfigurationModel.PollIntervalOverride)" Change="OnConfigurationValueChanged"/>
                </div>
            </RadzenCard>

        </div>
        <div class="col">
        </div>
    </div>
</div>