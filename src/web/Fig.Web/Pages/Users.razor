@page "/Users"
@using Fig.Client.Abstractions.Data
@using Fig.Web.Attributes
@using Fig.Web.Models.Authentication
@attribute [Administrator]

<div class="col p-3">
    <div class="d-flex flex-row-reverse p-2">
        <div class="p-2">
            <RadzenButton Text="Add User" Click="AddUser"></RadzenButton>
        </div>

    </div>
    <div class="d-flex flex-row p-3">
        <RadzenDataGrid @ref="_userGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@UserCollection" TItem="UserModel" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" Property="Id" Filterable="true" Title="Id" TextAlign="TextAlign.Left">
                    <Template>
                        @context.Id
                    </Template>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" Filterable="true" Title="Username" TextAlign="TextAlign.Left">
                    <Template>
                        @context.Username
                    </Template>
                    <EditTemplate Context="user">
                        <RadzenTextBox @bind-Value="user.Username"/>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" Filterable="true" Title="First Name" TextAlign="TextAlign.Left">
                    <Template>
                        @context.FirstName
                    </Template>
                    <EditTemplate Context="user">
                        <RadzenTextBox @bind-Value="user.FirstName"/>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" Property="LastName" Filterable="true" Title="Last Name" TextAlign="TextAlign.Left">
                    <Template>
                        @context.LastName
                    </Template>
                    <EditTemplate Context="user">
                        <RadzenTextBox @bind-Value="user.LastName"/>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" Property="Role" Filterable="true" Title="Role" TextAlign="TextAlign.Left">
                    <Template>
                        @context.Role
                    </Template>
                    <EditTemplate Context="user">
                        <RadzenDropDown Data="Roles"
                                        @bind-Value="user.Role"/>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" Filterable="false" Sortable="false" Title="Password" TextAlign="TextAlign.Left">
                    <Template>
                        ******
                    </Template>
                    <EditTemplate Context="user">
                        @if (user.Id != null)
                        {
                            <div>
                                <p style="white-space: pre-wrap">Leave password field blank if it should remain unchanged</p>
                            </div>
                        }
                        <PasswordWithRating @ref="_passwordWithRating" OnValidPassword="password => OnValidPassword(user, password)"/>

                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" Property="ClientFilter" Filterable="true" Title="Client Filter Regex" TextAlign="TextAlign.Left">
                    <Template>
                        @context.ClientFilter
                    </Template>
                    <EditTemplate Context="user">
                        <RadzenTextBox @bind-Value="user.ClientFilter"/>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" 
                                                   Filterable="false" 
                                                   Sortable="false" 
                                                   Title="Allowed Classifications" 
                                                   TextAlign="TextAlign.Left">
                    <Template>
                        <div style="white-space: pre-wrap; word-wrap: break-word;">
                            @string.Join(", ", context.AllowedClassifications)
                        </div>
                    </Template>
                    <EditTemplate Context="user">
                        <div>
                            @foreach (var classification in AllClassifications)
                            {
                                <div style="display: block; margin-bottom: 5px;">
                                    <RadzenCheckBox TValue="bool" 
                                                  Value="@(user.AllowedClassifications.Contains(classification))"
                                                  Change="@(args => UpdateClassification(user, classification, args))" /> @classification
                                </div>
                            }
                        </div>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" Context="controlContext"
                                                    Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="120px">
                    <Template Context="row">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(_ => EditRow(row))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="row">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@(_ => SaveRow(row))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(_ => CancelEdit(row))">
                        </RadzenButton>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="UserModel" Context="controlContext"
                                                    Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="60px">
                    <Template Context="row">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(_ => DeleteRow(row))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="row">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(_ => DeleteRow(row))">
                        </RadzenButton>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {

    async Task ShowCloseableFromOverlayDialog(string message)
    {
        await DialogService.OpenAsync("Cannot Save User", ds =>
            @<div>
                @message
            </div>, new DialogOptions { CloseDialogOnOverlayClick = true });
    }

    async Task<bool> GetDeleteConfirmation(string? userName)
    {
        return await DialogService.OpenAsync("Confirm Delete", ds =>
            @<div>
                <p class="mb-4">Are you sure you want to delete user '@userName'</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                    </div>
                </div>
            </div>);
    }

    private void UpdateClassification(UserModel user, Classification classification, bool selected)
    {
        if (selected && !user.AllowedClassifications.Contains(classification))
        {
            user.AllowedClassifications.Add(classification);
        }
        else if (!selected && user.AllowedClassifications.Contains(classification))
        {
            user.AllowedClassifications.Remove(classification);
        }
    }
}