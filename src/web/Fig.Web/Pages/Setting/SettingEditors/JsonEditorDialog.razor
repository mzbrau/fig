@using Fig.Web.Models.Setting.ConfigurationModels
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="json-editor-dialog">
    <div class="dialog-header">
        <h5 class="mb-0">JSON Editor - @Setting.Name</h5>
        <div class="dialog-actions">
            <button class="btn btn-sm btn-secondary me-2" 
                    disabled="@Setting.IsReadOnly" 
                    @onclick="OnShowSchema">
                <i class="fa fa-code me-1"></i>Schema
            </button>
            <button class="btn btn-sm btn-secondary me-2" 
                    disabled="@Setting.IsReadOnly" 
                    @onclick="GenerateJson">
                <i class="fa fa-magic me-1"></i>Generate
            </button>
            <button class="btn btn-sm btn-secondary me-2" 
                    disabled="@Setting.IsReadOnly" 
                    @onclick="FormatJson">
                <i class="fa fa-indent me-1"></i>Format
            </button>
            <button class="btn btn-sm btn-secondary me-2" 
                    disabled="@Setting.IsReadOnly" 
                    @onclick="ValidateJson">
                <i class="fa fa-check me-1"></i>Validate
            </button>
        </div>
    </div>

    <div class="dialog-content">
        <div class="editor-section">
            <div class="monaco-editor-container large">
                <div @ref="editorElement" id="@($"json-editor-dialog-{Setting.Name}")" class="monaco-editor-element"></div>
            </div>
            
            <div class="@(Setting.IsValid ? "collapse" : "") validation-error">
                <i class="fa fa-exclamation-triangle me-1"></i>
                @Setting.ValidationExplanation
            </div>
        </div>

        <div class="@(ShowSchema ? "" : "collapse") schema-section">
            <div class="schema-header">
                <h6 class="mb-2">JSON Schema</h6>
            </div>
            <div class="monaco-editor-container schema">
                <div @ref="schemaElement" id="@($"schema-editor-dialog-{Setting.Name}")" class="monaco-editor-element"></div>
            </div>
        </div>
    </div>
</div>

<style>
    .json-editor-dialog {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .dialog-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #555;
        background: #2d2d2d;
    }

    .dialog-header h5 {
        color: #fff;
        margin: 0;
    }

    .dialog-actions {
        display: flex;
        align-items: center;
    }

    .dialog-content {
        flex: 1;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        overflow: hidden;
    }

    .editor-section {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .monaco-editor-container.large {
        flex: 1;
        min-height: 400px;
        border: 1px solid #555;
        border-radius: 4px;
        background: #1e1e1e;
    }

    .monaco-editor-container.schema {
        height: 250px;
        border: 1px solid #555;
        border-radius: 4px;
        background: #1e1e1e;
    }

    .monaco-editor-element {
        width: 100%;
        height: 100%;
    }

    .validation-error {
        color: #ff4444;
        font-size: 0.875rem;
        padding: 8px 12px;
        background: rgba(255, 68, 68, 0.1);
        border: 1px solid rgba(255, 68, 68, 0.3);
        border-radius: 4px;
        display: flex;
        align-items: center;
    }

    .schema-section {
        border-top: 1px solid #555;
        padding-top: 1rem;
    }

    .schema-header h6 {
        color: #ccc;
        margin: 0;
    }

    .me-1 {
        margin-right: 0.25rem;
    }

    .me-2 {
        margin-right: 0.5rem;
    }

    .mb-0 {
        margin-bottom: 0;
    }

    .mb-2 {
        margin-bottom: 0.5rem;
    }
</style>

@code
{
    [Parameter] public JsonSettingConfigurationModel Setting { get; set; } = null!;
    [Parameter] public string InitialValue { get; set; } = "";
    [Parameter] public EventCallback<string> OnValueChanged { get; set; }

    private ElementReference editorElement;
    private ElementReference schemaElement;
    private bool ShowSchema { get; set; }
    private bool _isInitialized = false;
    private string? _lastValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            await Task.Delay(100); // Allow DOM to settle
            await InitializeEditor();
        }
    }

    private async Task InitializeEditor()
    {
        try
        {
            var editorId = $"json-editor-dialog-{Setting.Name}";
            var options = new
            {
                value = InitialValue,
                language = "json",
                theme = "vs-dark",
                readOnly = Setting.IsReadOnly,
                jsonSchema = Setting.JsonSchemaString,
                automaticLayout = true
            };

            await JSRuntime.InvokeVoidAsync("monacoIntegration.initialize", editorId, options);
            
            // Set up change event listener
            await JSRuntime.InvokeVoidAsync("monacoIntegration.onDidChangeModelContent", editorId, 
                DotNetObjectReference.Create(this), nameof(OnContentChanged));
            
            _isInitialized = true;
            _lastValue = InitialValue;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing Monaco editor dialog: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnContentChanged()
    {
        if (!_isInitialized || Setting.IsReadOnly) return;

        try
        {
            var currentValue = await GetEditorValue();
            if (currentValue != _lastValue)
            {
                _lastValue = currentValue;
                Setting.ValueChanged(currentValue);
                await OnValueChanged.InvokeAsync(currentValue);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling content change: {ex.Message}");
        }
    }

    private async Task<string> GetEditorValue()
    {
        try
        {
            return await JSRuntime.InvokeAsync<string>("monacoIntegration.getValue", $"json-editor-dialog-{Setting.Name}");
        }
        catch
        {
            return "";
        }
    }

    private async Task SetEditorValue(string value)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("monacoIntegration.setValue", $"json-editor-dialog-{Setting.Name}", value ?? "");
            _lastValue = value;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting editor value: {ex.Message}");
        }
    }

    private async Task OnShowSchema()
    {
        ShowSchema = !ShowSchema;
        StateHasChanged();
        
        if (ShowSchema && !string.IsNullOrEmpty(Setting.JsonSchemaString))
        {
            await Task.Delay(100); // Wait for DOM update
            var schemaId = $"schema-editor-dialog-{Setting.Name}";
            var options = new
            {
                value = Setting.JsonSchemaString,
                language = "json",
                theme = "vs-dark",
                readOnly = true,
                automaticLayout = true
            };
            await JSRuntime.InvokeVoidAsync("monacoIntegration.initialize", schemaId, options);
        }
    }

    private async Task GenerateJson()
    {
        if (Setting.IsReadOnly) return;
        
        Setting.GenerateJson();
        await SetEditorValue(Setting.Value ?? "");
    }

    private async Task FormatJson()
    {
        if (Setting.IsReadOnly) return;

        try
        {
            await JSRuntime.InvokeVoidAsync("monacoIntegration.formatDocument", $"json-editor-dialog-{Setting.Name}");
            
            // Get the formatted value and update the setting
            var formattedValue = await GetEditorValue();
            Setting.Value = formattedValue;
            Setting.ValueChanged(formattedValue);
            await OnValueChanged.InvokeAsync(formattedValue);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error formatting JSON: {ex.Message}");
        }
    }

    private async Task ValidateJson()
    {
        try
        {
            var currentValue = await GetEditorValue();
            Setting.ValueChanged(currentValue);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error validating JSON: {ex.Message}");
        }
    }

    public async Task UpdateValue(string value)
    {
        if (_isInitialized && value != _lastValue)
        {
            await SetEditorValue(value);
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_isInitialized)
            {
                await JSRuntime.InvokeVoidAsync("monacoIntegration.dispose", $"json-editor-dialog-{Setting.Name}");
                if (ShowSchema)
                {
                    await JSRuntime.InvokeVoidAsync("monacoIntegration.dispose", $"schema-editor-dialog-{Setting.Name}");
                }
            }
        }
        catch
        {
            // Ignore errors during disposal
        }
    }
}
