@using Fig.Contracts.ExtensionMethods
@using Fig.Web.Models.Setting.ConfigurationModels.DataGrid
@using Fig.Contracts

<div class="d-flex flex-column">
    @if (Setting.DataGridConfiguration?.IsLocked == false)
    {
        <div class="d-flex justify-content-end" style="margin-bottom: 10px;">
            <RadzenButton Icon="publish" style="padding: 0.25rem 0.75rem; margin-right: 5px;" Text="Import CSV" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Disabled="@Setting.IsReadOnly" Click="@(async () => await JsRuntime.InvokeVoidAsync("clickElementById", "dataGridCsvInputFile"))" />
            <RadzenButton Icon="get_app" style="padding: 0.25rem 0.75rem; margin-right: 5px;" Text="Export CSV" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Disabled="@(Setting.IsReadOnly || Setting.Value?.Count == 0)" Click="@ExportCsv" />
            <RadzenButton Icon="add_circle_outline" style="padding: 0.25rem 0.75rem" Text="Add Row" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Disabled="@Setting.IsReadOnly" Click="@InsertRow" />
        </div>
    }
    
    <RadzenDataGrid @ref="_settingGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                    AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" AllowSorting="false" AllowColumnResize="true"
                    Data="@Setting.Value"  TItem="Dictionary<string, IDataGridValueModel>" 
                    ShowColumnTitleAsTooltip="true" ShowCellDataAsTooltip="true" EditMode="DataGridEditMode.Single">
        <Columns>
            @foreach (var column in Setting.DataGridConfiguration?.Columns ?? new List<DataGridColumn>())
            {
                <Radzen.Blazor.RadzenDataGridColumn TItem="Dictionary<string, IDataGridValueModel>" Property="@column.Name" Title="@FormatColumnName(column.Name)" Type="@column.Type" Width="@column.StartingWidth">
                    <Template>
                        @if (context[column.Name].ReadOnlyValue is IEnumerable<string>)
                        {
                            @string.Join(", ", (context[column.Name].ReadOnlyValue as IEnumerable<string>)!);
                        }
                        else if (context[column.Name].IsSecret)
                        {
                            if (string.IsNullOrWhiteSpace(context[column.Name].ReadOnlyValue?.ToString()))
                            {
                                <p style="white-space: pre-wrap; word-wrap: break-word">NOT SET</p>
                            }
                            else
                            {
                                <p style="white-space: pre-wrap; word-wrap: break-word">******</p>
                            }
                        }
                        else
                        {
                            <p style="white-space: pre-wrap; word-wrap: break-word">@context[column.Name].ReadOnlyValue</p>
                        }
                    </Template>
                    <EditTemplate Context="rowData">
                        @if (column.IsReadOnly || rowData[column.Name].IsReadOnly)
                        {
                            @rowData[column.Name].ReadOnlyValue
                        }
                        else if (column.Type.Is(FigPropertyType.Int))
                        {
                            <DataGridInt Model="@rowData[column.Name]"/>
                        }
                        else if (column.Type.Is(FigPropertyType.StringList) && column.ValidValues != null)
                        {
                            <DataGridMultiSelectDropdown Model="@rowData[column.Name]"/>
                        }
                        else if (column.Type.Is(FigPropertyType.String) && column.ValidValues == null)
                        {
                            <DataGridString Model="@rowData[column.Name]"/>
                        }
                        else if (column.Type.Is(FigPropertyType.String))
                        {
                            <DataGridDropDown Model="@rowData[column.Name]"/>
                        }
                        else if (column.Type.Is(FigPropertyType.DateTime))
                        {
                            <DataGridDateTime Model="@rowData[column.Name]"/>
                        }
                        else if (column.Type.Is(FigPropertyType.Long))
                        {
                            <DataGridLong Model="@rowData[column.Name]"/>
                        }
                        else if (column.Type.Is(FigPropertyType.Double))
                        {
                            <DataGridDouble Model="@rowData[column.Name]"/>
                        }
                        else if (column.Type.Is(FigPropertyType.Bool))
                        {
                            <DataGridBool Model="@rowData[column.Name]"/>
                        }
                        else if (column.Type.Is(FigPropertyType.TimeSpan))
                        {
                            <DataGridTimeSpan Model="@rowData[column.Name]"/>
                        }
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
            }

            <Radzen.Blazor.RadzenDataGridColumn TItem="Dictionary<string, IDataGridValueModel>" Context="controlContext"
                                                Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="100px">
                <Template Context="row">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Disabled="@Setting.IsReadOnly" Click="@(_ => EditRow(row))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="row">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Disabled="@Setting.IsReadOnly" Click="@(_ => SaveRow(row))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Disabled="@Setting.IsReadOnly" Click="@(_ => CancelEdit(row))">
                    </RadzenButton>
                </EditTemplate>
            </Radzen.Blazor.RadzenDataGridColumn>
            @if (Setting.DataGridConfiguration?.IsLocked == false)
            {
                <Radzen.Blazor.RadzenDataGridColumn TItem="Dictionary<string, IDataGridValueModel>" Context="controlContext"
                                                    Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="55px">
                    <Template Context="row">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Disabled="@Setting.IsReadOnly" Click="@(_ => DeleteRow(row))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="row">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Disabled="@Setting.IsReadOnly" Click="@(_ => DeleteRow(row))">
                        </RadzenButton>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
            }
            
        </Columns>
    </RadzenDataGrid>
    <p class="@(Setting.IsValid ? "collapse" : "")" style="color: pink; font-size: small">@Setting.ValidationExplanation</p>
</div>

<InputFile @ref="_inputFile" id="dataGridCsvInputFile" OnChange="@HandleFileSelected" accept=".csv" style="display: none;" />
