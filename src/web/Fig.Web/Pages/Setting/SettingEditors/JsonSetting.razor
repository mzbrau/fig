@using Fig.Web.Models.Setting.ConfigurationModels
@using Microsoft.AspNetCore.Components.Rendering
@using System.Reactive.Linq
@using System.Reactive.Subjects
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@implements IAsyncDisposable

<div class="d-flex flex-column w-100 json-setting-container">
    <div class="w-100 position-relative">
        <div class="monaco-editor-container">
            <div @ref="editorElement" id="@($"json-editor-{Setting.Name}")" class="monaco-editor-element"></div>
        </div>
        
        <div class="editor-controls">
            <button class="btn btn-sm btn-primary expand-btn" 
                    @onclick="OpenExpandedEditor" 
                    title="Open expanded JSON editor">
                <i class="fa fa-expand-arrows-alt me-1"></i>Expand
            </button>
        </div>

        <div class="@(Setting.IsValid ? "collapse" : "") validation-error">
            @Setting.ValidationExplanation
        </div>
    </div>
    
    <div class="d-flex my-1 flex-wrap gap-2">
        <button class="btn btn-sm btn-secondary" 
                disabled="@Setting.IsReadOnly" 
                @onclick="OnShowSchema">
            Schema
        </button>
        <button class="btn btn-sm btn-secondary" 
                disabled="@Setting.IsReadOnly" 
                @onclick="GenerateJson">
            Generate JSON
        </button>
        <button class="btn btn-sm btn-secondary" 
                disabled="@Setting.IsReadOnly" 
                @onclick="FormatJson">
            Format
        </button>
    </div>
    
    <div class="@(ShowSchema ? "" : "collapse") schema-container">
        <h6>JSON Schema</h6>
        <div class="schema-editor-container">
            <div @ref="schemaElement" id="@($"schema-editor-{Setting.Name}")" class="monaco-editor-element"></div>
        </div>
    </div>
</div>

<style>
    .json-setting-container {
        position: relative;
    }

    .monaco-editor-container {
        height: 200px;
        border: 1px solid #555;
        border-radius: 4px;
        position: relative;
        background: #1e1e1e;
    }

    .monaco-editor-element {
        width: 100%;
        height: 100%;
    }

    .editor-controls {
        position: absolute;
        top: 8px;
        right: 8px;
        z-index: 10;
    }

    .expand-btn {
        background: #007bff;
        border: 1px solid #0056b3;
        color: #fff;
        padding: 6px 10px;
        font-size: 14px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .expand-btn:hover {
        background: #0056b3;
        border-color: #004085;
        color: #fff;
        transform: translateY(-1px);
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);
    }

    .expand-btn:active {
        transform: translateY(0);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .validation-error {
        color: #ff4444;
        font-size: 0.875rem;
        margin-top: 4px;
        padding: 4px 8px;
        background: rgba(255, 68, 68, 0.1);
        border-radius: 3px;
    }

    .schema-container {
        margin-top: 1rem;
        border: 1px solid #555;
        border-radius: 4px;
        background: #2d2d2d;
        padding: 1rem;
    }

    .schema-editor-container {
        height: 150px;
        border: 1px solid #555;
        border-radius: 4px;
        margin-top: 0.5rem;
    }

    .gap-2 {
        gap: 0.5rem;
    }

    /* Dialog Styles */
    .json-editor-dialog {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        background: #1e1e1e;
        color: #fff;
    }

    .dialog-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #555;
        background: #2d2d2d;
        flex-shrink: 0;
    }

    .dialog-header h5 {
        color: #fff;
        margin: 0;
        font-weight: 600;
    }

    .dialog-actions {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .dialog-content {
        flex: 1;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        overflow: hidden;
        min-height: 0;
    }

    .editor-section {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        min-height: 0;
    }

    .monaco-editor-container.large {
        flex: 1;
        min-height: 400px;
        border: 1px solid #555;
        border-radius: 4px;
        background: #1e1e1e;
        position: relative;
    }

    .monaco-editor-container.schema {
        height: 250px;
        border: 1px solid #555;
        border-radius: 4px;
        background: #1e1e1e;
        position: relative;
    }

    .schema-section {
        border-top: 1px solid #555;
        padding-top: 1rem;
        flex-shrink: 0;
    }

    .schema-header h6 {
        color: #ccc;
        margin: 0;
        margin-bottom: 0.5rem;
    }

    .me-1 {
        margin-right: 0.25rem;
    }

    .me-2 {
        margin-right: 0.5rem;
    }

    .mb-0 {
        margin-bottom: 0;
    }

    .mb-2 {
        margin-bottom: 0.5rem;
    }
</style>

@code
{
    [Parameter]
    public JsonSettingConfigurationModel Setting { get; set; } = null!;

    private ElementReference editorElement;
    private ElementReference schemaElement;
    private ElementReference dialogEditorElement;
    private ElementReference dialogSchemaElement;
    private bool ShowSchema { get; set; }
    private bool ShowDialogSchema { get; set; }
    private bool IsExpanded { get; set; }
    private bool _isInitialized = false;
    private bool _isDialogInitialized = false;
    private string? _lastValue;
    private DotNetObjectReference<JsonSetting>? _dotNetRef;
    
    // Reactive validation using System.Reactive
    private readonly Subject<string> _validationSubject = new();
    private IDisposable? _validationSubscription;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await Task.Delay(100); // Allow DOM to settle
            await InitializeEditor();
            
            // Set up reactive validation with throttling (like in Settings.razor.cs)
            _validationSubscription = _validationSubject
                .Throttle(TimeSpan.FromMilliseconds(200))
                .Subscribe(value => {
                    PerformValidation(value);
                    InvokeAsync(StateHasChanged);
                });
        }
        
        if (IsExpanded)
        {
            await ResizeEditor();
        }
    }

    private async Task InitializeEditor()
    {
        try
        {
            var editorId = $"json-editor-{Setting.Name}";
            var options = new
            {
                value = Setting.Value ?? "",
                language = "json",
                theme = "vs-dark",
                readOnly = Setting.IsReadOnly,
                jsonSchema = Setting.JsonSchemaString
            };

            await JSRuntime.InvokeVoidAsync("monacoIntegration.initialize", editorId, options);
            
            // Set up change event listener
            await JSRuntime.InvokeVoidAsync("monacoIntegration.onDidChangeModelContent", editorId, 
                DotNetObjectReference.Create(this), nameof(OnContentChanged));
            
            _isInitialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing Monaco editor: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnContentChanged()
    {
        if (!_isInitialized || Setting.IsReadOnly) return;

        try
        {
            var currentValue = await GetEditorValue();
            if (currentValue != _lastValue)
            {
                _lastValue = currentValue;
                Setting.Value = currentValue;
                
                // Trigger reactive validation
                _validationSubject.OnNext(currentValue);
                
                Console.WriteLine($"Small editor content changed: {currentValue?.Length} characters");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling content change: {ex.Message}");
        }
    }

    private async Task<string> GetEditorValue()
    {
        try
        {
            return await JSRuntime.InvokeAsync<string>("monacoIntegration.getValue", $"json-editor-{Setting.Name}");
        }
        catch
        {
            return "";
        }
    }

    private async Task SetEditorValue(string value)
    {
        try
        {
            if (_isInitialized)
            {
                await JSRuntime.InvokeVoidAsync("monacoIntegration.setValue", $"json-editor-{Setting.Name}", value ?? "");
                _lastValue = value;
                Console.WriteLine($"Set small editor value: {value?.Length} characters");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting editor value: {ex.Message}");
        }
    }

    private async Task OnShowSchema()
    {
        ShowSchema = !ShowSchema;
        StateHasChanged();
        
        if (ShowSchema && !string.IsNullOrEmpty(Setting.JsonSchemaString))
        {
            await Task.Delay(100); // Wait for DOM update
            var schemaId = $"schema-editor-{Setting.Name}";
            var options = new
            {
                value = Setting.JsonSchemaString,
                language = "json",
                theme = "vs-dark",
                readOnly = true
            };
            await JSRuntime.InvokeVoidAsync("monacoIntegration.initialize", schemaId, options);
        }
    }

    private async Task GenerateJson()
    {
        if (Setting.IsReadOnly) return;
        
        Setting.GenerateJson();
        await SetEditorValue(Setting.Value ?? "");
    }

    private async Task FormatJson()
    {
        if (Setting.IsReadOnly) return;

        try
        {
            await JSRuntime.InvokeVoidAsync("monacoIntegration.formatDocument", $"json-editor-{Setting.Name}");
            
            // Get the formatted value and update the setting
            var formattedValue = await GetEditorValue();
            Setting.Value = formattedValue;
            Setting.ValueChanged(formattedValue);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error formatting JSON: {ex.Message}");
        }
    }

    private async Task OpenExpandedEditor()
    {
        try
        {
            // Get current value from the small editor
            var currentValue = await GetEditorValue();
            
            // Show a simple dialog with the expanded editor content
            var dialogTask = DialogService.OpenAsync("JSON Editor", BuildDialogContent(currentValue),
                new DialogOptions() 
                { 
                    Width = "90vw", 
                    Height = "85vh", 
                    Resizable = true, 
                    Draggable = true,
                    CloseDialogOnOverlayClick = false,
                    ShowClose = true
                });

            // Wait a bit for dialog to start rendering, then initialize
            await Task.Delay(300);
            await InitializeDialogEditor(currentValue);
            
            // Wait for dialog to complete
            await dialogTask;
            
            // Sync final value when dialog closes
            if (_isDialogInitialized)
            {
                try
                {
                    // Get the final value from the dialog editor before cleanup
                    var finalValue = await GetDialogEditorValue();
                    if (!string.IsNullOrEmpty(finalValue) && finalValue != currentValue)
                    {
                        Setting.Value = finalValue;
                        Setting.ValueChanged(finalValue);
                        await SetEditorValue(finalValue);
                        Console.WriteLine($"Final sync on dialog close: {finalValue?.Length} characters");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error syncing final value: {ex.Message}");
                }
                
                // Cleanup dialog editor when dialog closes
                try
                {
                    await JSRuntime.InvokeVoidAsync("monacoIntegration.dispose", $"json-editor-dialog-{Setting.Name}");
                    if (ShowDialogSchema)
                    {
                        await JSRuntime.InvokeVoidAsync("monacoIntegration.dispose", $"schema-editor-dialog-{Setting.Name}");
                    }
                }
                catch { }
                _isDialogInitialized = false;
                ShowDialogSchema = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening expanded editor: {ex.Message}");
        }
    }

    private async Task InitializeDialogEditor(string initialValue)
    {
        try
        {
            var editorId = $"json-editor-dialog-{Setting.Name}";
            Console.WriteLine($"Initializing dialog editor with ID: {editorId}");
            
            var options = new
            {
                value = initialValue,
                language = "json",
                theme = "vs-dark",
                readOnly = Setting.IsReadOnly,
                jsonSchema = Setting.JsonSchemaString,
                automaticLayout = true
            };

            await JSRuntime.InvokeVoidAsync("monacoIntegration.initialize", editorId, options);
            Console.WriteLine($"Dialog editor initialized successfully");
            
            // Set up change event listener for dialog editor
            await JSRuntime.InvokeVoidAsync("monacoIntegration.onDidChangeModelContent", editorId, 
                DotNetObjectReference.Create(this), nameof(OnDialogContentChanged));
            
            _isDialogInitialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing dialog Monaco editor: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnDialogContentChanged()
    {
        if (!_isDialogInitialized || Setting.IsReadOnly) return;

        try
        {
            var currentValue = await GetDialogEditorValue();
            if (currentValue != _lastValue)
            {
                _lastValue = currentValue;
                Setting.Value = currentValue;
                
                // Also update the small editor immediately
                await SetEditorValue(currentValue);
                
                // Trigger reactive validation
                _validationSubject.OnNext(currentValue);
                
                Console.WriteLine($"Dialog content changed and synced: {currentValue?.Length} characters");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling dialog content change: {ex.Message}");
        }
    }

    private RenderFragment<DialogService> BuildDialogContent(string currentValue)
    {
        return (ds) => __builder =>
        {
            // Main container
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "class", "json-editor-dialog");
            __builder.AddAttribute(2, "style", "height: 100%; display: flex; flex-direction: column;");
            
            // Dialog Header
            __builder.OpenElement(3, "div");
            __builder.AddAttribute(4, "class", "dialog-header");
            
            __builder.OpenElement(5, "h5");
            __builder.AddAttribute(6, "class", "mb-0");
            __builder.AddContent(7, $"JSON Editor - {Setting.Name}");
            __builder.CloseElement();
            
            __builder.OpenElement(8, "div");
            __builder.AddAttribute(9, "class", "dialog-actions");
            
            // Schema Button
            __builder.OpenElement(10, "button");
            __builder.AddAttribute(11, "class", "btn btn-sm btn-secondary me-2");
            __builder.AddAttribute(12, "disabled", Setting.IsReadOnly);
            __builder.AddAttribute(13, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => OnDialogShowSchema()));
            __builder.AddMarkupContent(14, "<i class=\"fa fa-code me-1\"></i>Schema");
            __builder.CloseElement();
            
            // Generate Button
            __builder.OpenElement(15, "button");
            __builder.AddAttribute(16, "class", "btn btn-sm btn-secondary me-2");
            __builder.AddAttribute(17, "disabled", Setting.IsReadOnly);
            __builder.AddAttribute(18, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => OnDialogGenerateJson()));
            __builder.AddMarkupContent(19, "<i class=\"fa fa-magic me-1\"></i>Generate");
            __builder.CloseElement();
            
            // Format Button
            __builder.OpenElement(20, "button");
            __builder.AddAttribute(21, "class", "btn btn-sm btn-secondary me-2");
            __builder.AddAttribute(22, "disabled", Setting.IsReadOnly);
            __builder.AddAttribute(23, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => OnDialogFormatJson()));
            __builder.AddMarkupContent(24, "<i class=\"fa fa-indent me-1\"></i>Format");
            __builder.CloseElement();
            
            __builder.CloseElement(); // dialog-actions
            __builder.CloseElement(); // dialog-header
            
            // Dialog Content
            __builder.OpenElement(25, "div");
            __builder.AddAttribute(26, "class", "dialog-content");
            __builder.AddAttribute(27, "style", "flex: 1; display: flex; flex-direction: column;");
            
            // Editor Section
            __builder.OpenElement(28, "div");
            __builder.AddAttribute(29, "class", "editor-section");
            __builder.AddAttribute(30, "style", "flex: 1; display: flex; flex-direction: column;");
            
            // Monaco Editor Container
            __builder.OpenElement(31, "div");
            __builder.AddAttribute(32, "class", "monaco-editor-container large");
            __builder.AddAttribute(33, "style", "flex: 1; min-height: 400px; position: relative;");
            
            __builder.OpenElement(34, "div");
            __builder.AddAttribute(35, "id", $"json-editor-dialog-{Setting.Name}");
            __builder.AddAttribute(36, "class", "monaco-editor-element");
            __builder.AddAttribute(37, "style", "width: 100%; height: 100%; position: absolute; top: 0; left: 0;");
            __builder.AddElementReferenceCapture(38, (__value) => { dialogEditorElement = __value; });
            __builder.CloseElement();
            
            __builder.CloseElement(); // monaco-editor-container large
            
            // Validation Error
            if (!Setting.IsValid)
            {
                __builder.OpenElement(39, "div");
                __builder.AddAttribute(40, "class", "validation-error");
                __builder.AddAttribute(41, "style", "margin-top: 0.5rem;");
                __builder.AddMarkupContent(42, "<i class=\"fa fa-exclamation-triangle me-1\"></i>");
                __builder.AddContent(43, Setting.ValidationExplanation);
                __builder.CloseElement();
            }
            
            __builder.CloseElement(); // editor-section
            
            // Schema Section (if visible)
            if (ShowDialogSchema)
            {
                __builder.OpenElement(44, "div");
                __builder.AddAttribute(45, "class", "schema-section");
                __builder.AddAttribute(46, "style", "margin-top: 1rem;");
                
                __builder.OpenElement(47, "div");
                __builder.AddAttribute(48, "class", "schema-header");
                __builder.OpenElement(49, "h6");
                __builder.AddAttribute(50, "class", "mb-2");
                __builder.AddContent(51, "JSON Schema");
                __builder.CloseElement();
                __builder.CloseElement();
                
                __builder.OpenElement(52, "div");
                __builder.AddAttribute(53, "class", "monaco-editor-container schema");
                __builder.AddAttribute(54, "style", "height: 250px; position: relative;");
                
                __builder.OpenElement(55, "div");
                __builder.AddAttribute(56, "id", $"schema-editor-dialog-{Setting.Name}");
                __builder.AddAttribute(57, "class", "monaco-editor-element");
                __builder.AddAttribute(58, "style", "width: 100%; height: 100%; position: absolute; top: 0; left: 0;");
                __builder.AddElementReferenceCapture(59, (__value) => { dialogSchemaElement = __value; });
                __builder.CloseElement();
                
                __builder.CloseElement(); // monaco-editor-container schema
                __builder.CloseElement(); // schema-section
            }
            
            __builder.CloseElement(); // dialog-content
            __builder.CloseElement(); // json-editor-dialog
        };
    }

    private async Task OnExpandedEditorValueChanged(string newValue)
    {
        // Update the small editor with the new value from the expanded editor
        await SetEditorValue(newValue);
        Setting.Value = newValue;
    }

    private async Task OnDialogShowSchema()
    {
        ShowDialogSchema = !ShowDialogSchema;
        StateHasChanged();
        
        if (ShowDialogSchema && !string.IsNullOrEmpty(Setting.JsonSchemaString))
        {
            await Task.Delay(100); // Wait for DOM update
            var schemaId = $"schema-editor-dialog-{Setting.Name}";
            var options = new
            {
                value = Setting.JsonSchemaString,
                language = "json",
                theme = "vs-dark",
                readOnly = true,
                automaticLayout = true
            };
            await JSRuntime.InvokeVoidAsync("monacoIntegration.initialize", schemaId, options);
        }
    }

    private async Task OnDialogGenerateJson()
    {
        if (Setting.IsReadOnly) return;
        
        try
        {
            Setting.GenerateJson();
            var newValue = Setting.Value ?? "";
            await SetDialogEditorValue(newValue);
            await SetEditorValue(newValue); // Also update the small editor
            _lastValue = newValue;
            Console.WriteLine($"Generated JSON synced to both editors");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating JSON: {ex.Message}");
        }
    }

    private async Task OnDialogFormatJson()
    {
        if (Setting.IsReadOnly) return;

        try
        {
            await JSRuntime.InvokeVoidAsync("monacoIntegration.formatDocument", $"json-editor-dialog-{Setting.Name}");
            
            // Get the formatted value and update both editors
            var formattedValue = await GetDialogEditorValue();
            Setting.Value = formattedValue;
            Setting.ValueChanged(formattedValue);
            await SetEditorValue(formattedValue); // Also update the small editor
            _lastValue = formattedValue;
            Console.WriteLine($"Formatted JSON synced to both editors");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error formatting JSON in dialog: {ex.Message}");
        }
    }

    private async Task<string> GetDialogEditorValue()
    {
        try
        {
            return await JSRuntime.InvokeAsync<string>("monacoIntegration.getValue", $"json-editor-dialog-{Setting.Name}");
        }
        catch
        {
            return "";
        }
    }

    private async Task SetDialogEditorValue(string value)
    {
        try
        {
            if (_isDialogInitialized)
            {
                await JSRuntime.InvokeVoidAsync("monacoIntegration.setValue", $"json-editor-dialog-{Setting.Name}", value ?? "");
                Console.WriteLine($"Set dialog editor value: {value?.Length} characters");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting dialog editor value: {ex.Message}");
        }
    }

    private async Task ResizeEditor()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("monacoIntegration.resize", $"json-editor-{Setting.Name}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resizing editor: {ex.Message}");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_isInitialized && Setting.Value != _lastValue)
        {
            await SetEditorValue(Setting.Value ?? "");
        }
    }

    private void PerformValidation(string value)
    {
        try
        {
            Setting.ValueChanged(value);
            Console.WriteLine($"Reactive validation performed for: {value.Length} characters");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during reactive validation: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            // Dispose reactive subscription
            _validationSubscription?.Dispose();
            _validationSubject?.Dispose();
            
            if (_isInitialized)
            {
                await JSRuntime.InvokeVoidAsync("monacoIntegration.dispose", $"json-editor-{Setting.Name}");
                if (ShowSchema)
                {
                    await JSRuntime.InvokeVoidAsync("monacoIntegration.dispose", $"schema-editor-{Setting.Name}");
                }
            }
            if (_isDialogInitialized)
            {
                await JSRuntime.InvokeVoidAsync("monacoIntegration.dispose", $"json-editor-dialog-{Setting.Name}");
                if (ShowDialogSchema)
                {
                    await JSRuntime.InvokeVoidAsync("monacoIntegration.dispose", $"schema-editor-dialog-{Setting.Name}");
                }
            }
            _dotNetRef?.Dispose();
        }
        catch
        {
            // Ignore errors during disposal
        }
    }
}