@using Fig.Common.Events
@using Fig.Web.Models.Setting
@using Fig.Web.Models.Setting.ConfigurationModels
@using Fig.Web.Models.Setting.ConfigurationModels.DataGrid
@using Fig.Web.Services
@using Fig.Contracts.Authentication
@using Fig.Web.Events
@using Fig.Web.Scripting
@using System.Collections.Generic
@if (Setting.IsCompactView)
{
    <div class="transition-visible @(Setting.Hidden ? "transition-collapsed" : "show")" 
         style="@GetIndentStyle()"
         @onmouseover="ShowExpandIcon" @onmouseout="HideExpandIcon">
        <RadzenCard class="position-relative custom-card compact-view" style="@GetCompactViewStyle()">
            <div class="colored-line" @ref="_compactCategoryLine" 
                 onmouseenter="@(() => ShowTooltip(_compactCategoryLine, @Setting.CategoryName, TooltipPosition.Right))"
                 style="background-color: @Setting.CategoryColor">
            </div>
            
            <div class="expand-collapse-icon @(_showExpandIcon && Setting.IsCompactView ? "visible" : "hidden")" 
                 @onclick="@(ToggleSettingCompactView)" @onclick:stopPropagation="true">
                <RadzenIcon Icon="unfold_more" />
            </div>

            <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center flex-grow-1">
                    <div class="setting-name-container">
                        <h3 class="compact-heading" 
                            style="margin-left: 25px; color:@(Setting.IsValid ? "rgba(255,255,255,0.9)" : "#ff4444")">
                            <span class="d-flex align-items-center">
                                @if (Setting.DisplayName.Contains("->"))
                                {
                                    var tokens = Setting.DisplayName.Split("->");
                                    <div class="setting-path">
                                        <span class="setting-parent">@string.Join("->", tokens.Take(tokens.Length - 1))</span>
                                        <span class="setting-name">
                                            @tokens.Last()
                                            @if (Setting.MatchesBaseValue.HasValue)
                                            {
                                                @if (Setting.MatchesBaseValue.Value)
                                                {
                                                    <RadzenIcon Icon="sync" IconStyle="IconStyle.Success" Style="font-size: 0.7em; margin-left: 4px"
                                                               MouseEnter="@(args => ShowTooltip(args, "Matches parent setting value"))" />
                                                }
                                                else
                                                {
                                                    <RadzenIcon Icon="sync_problem" IconStyle="IconStyle.Warning" Style="font-size: 0.7em; margin-left: 4px"
                                                               MouseEnter="@(args => ShowTooltip(args, "Different from parent setting value"))" />
                                                }
                                            }
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    @Setting.DisplayName
                                }
                                <RadzenIcon Icon="bolt" IconStyle="IconStyle.Secondary" Visible="@Setting.SupportsLiveUpdate" Style="font-size: 1em; margin-left: 6px; font-variation-settings: 'FILL' 1;"
                                            MouseEnter="@(args => ShowTooltip(args, "Supports live update (no restart required)"))"/>
                                @if (GetDependentSettingsCount() > 0)
                                {
                                    <RadzenIcon Icon="visibility" IconStyle="IconStyle.Info" Style="font-size: 1em; margin-left: 6px"
                                                MouseEnter="@(args => ShowTooltip(args, $"Controls visibility of {GetDependentSettingsCount()} setting{(GetDependentSettingsCount() == 1 ? "" : "s")}"))" />
                                }
                                @if (Setting.MatchesBaseValue.HasValue)
                                {
                                    @if (Setting.MatchesBaseValue.Value)
                                    {
                                        <RadzenIcon Icon="equal" IconStyle="IconStyle.Success" Style="font-size: 1em; margin-left: 6px"
                                                   MouseEnter="@(args => ShowTooltip(args, "Matches base setting value"))" />
                                    }
                                    else
                                    {
                                        <RadzenIcon Icon="difference" IconStyle="IconStyle.Warning" Style="font-size: 1em; margin-left: 6px"
                                                   MouseEnter="@(args => ShowTooltip(args, $"Different from base setting value ({Setting.BaseSetting?.StringValue})"))" />
                                    }
                                }
                            <RadzenIcon Icon="javascript" IconStyle="IconStyle.Warning" Visible="@Setting.HasDisplayScript" Style="font-size: 1.5em; margin-left: 6px"
                                        MouseEnter="@(args => ShowTooltip(args, Setting.DisplayScript is not null ? ScriptRunner.FormatScript(Setting.DisplayScript) : "No Script", multiLine: true))" />
                            @if (Setting.ScheduledChangeDescription != null)
                            {
                                <RadzenIcon Icon="schedule" IconStyle="IconStyle.Warning" Style="font-size: 1em; margin-left: 4px"
                                            MouseEnter="@(args => ShowTooltip(args, Setting.ScheduledChangeDescription, multiLine: true))" />
                            }
                            </span>
                        </h3>
                    </div>
                    <div class="setting-value-container" style="font-weight:@(Setting.IsDirty ? "500" : "normal"); 
                                     color:@(Setting.IsValid ? "rgba(255,255,255,0.8)" : "#ff4444")
                                    text-overflow: ellipsis; overflow: hidden; 
                                    white-space: pre-wrap; word-wrap: break-word;">
                            @((MarkupString)Setting.GetStringValue())
                    </div>
                </div>
                <div class="@(!Setting.IsDirty ? "collapse" : "") compact-modified-badge">
                    <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="Modified"
                                MouseEnter="@(args => ShowTooltip(args, "This setting has unsaved changes"))" />
                </div>
            </div>
        </RadzenCard>
    </div>
}
else
{
    <div class="transition-visible @(Setting.Hidden ? "transition-collapsed" : "show") " 
         style="@GetIndentStyle()"
         id="@($"{Setting.Parent.Name}-{Setting.Parent.Instance}-{Setting.Name}")"
         @onmouseover="ShowExpandIcon" @onmouseout="HideExpandIcon">
        <RadzenCard class="position-relative custom-card">
            <div class="colored-line" @ref="_categoryLine" onmouseenter="@(() => ShowTooltip(_categoryLine, @Setting.CategoryName, TooltipPosition.Right))"
                 style="background-color: @Setting.CategoryColor"></div>
            
            <div class="expand-collapse-icon @(_showExpandIcon && !Setting.IsCompactView ? "visible" : "hidden")" 
                 @onclick="@(ToggleSettingCompactView)" @onclick:stopPropagation="true">
                <RadzenIcon Icon="unfold_less" />
            </div>
            
            <div class="d-flex align-items-center justify-content-between card-content">
                <!-- Left side: Title, Icons, Description -->
                <div class="d-flex flex-column flex-grow-1 pr-2 mb-1">
                    <h3 class="mb-1">
                        <span class="d-flex align-items-center">
                            @if (Setting.DisplayName.Contains("->"))
                            {
                                var tokens = Setting.DisplayName.Split("->");
                                <div class="setting-path">
                                    <span class="setting-parent">@string.Join("->", tokens.Take(tokens.Length - 1))</span>
                                    <span class="setting-name d-flex align-items-center">
                                        @tokens.Last()
                                        <RadzenIcon Icon="bolt" IconStyle="IconStyle.Warning" Visible="@Setting.SupportsLiveUpdate" Style="font-size: 0.7em; margin-left: 4px" />
                                        @if (Setting.MatchesBaseValue.HasValue)
                                        {
                                            @if (Setting.MatchesBaseValue.Value)
                                            {
                                                <RadzenIcon Icon="sync" IconStyle="IconStyle.Success" Style="font-size: 0.7em; margin-left: 4px"
                                                           MouseEnter="@(args => ShowTooltip(args, "Matches parent setting value"))" />
                                            }
                                            else
                                            {
                                                <RadzenIcon Icon="sync_problem" IconStyle="IconStyle.Warning" Style="font-size: 0.7em; margin-left: 4px"
                                                           MouseEnter="@(args => ShowTooltip(args, "Different from parent setting value"))" />
                                            }
                                        }
                                    </span>
                                </div>
                            }
                            else
                            {
                                <span>@Setting.DisplayName</span>
                                <RadzenIcon Icon="bolt" IconStyle="IconStyle.Secondary" Visible="@Setting.SupportsLiveUpdate" Style="font-size: 1em; margin-left: 6px; font-variation-settings: 'FILL' 1;"
                                            MouseEnter="@(args => ShowTooltip(args, "Supports live update (no restart required)"))"/>
                                @if (Setting.MatchesBaseValue.HasValue)
                                {
                                    @if (Setting.MatchesBaseValue.Value)
                                    {
                                        <RadzenIcon Icon="equal" IconStyle="IconStyle.Success" Style="font-size: 1em; margin-left: 6px"
                                                   MouseEnter="@(args => ShowTooltip(args, "Matches base setting value"))" />
                                    }
                                    else
                                    {
                                        <RadzenIcon Icon="difference" IconStyle="IconStyle.Warning" Style="font-size: 1em; margin-left: 6px"
                                                   MouseEnter="@(args => ShowTooltip(args, $"Different from base setting value ({Setting.BaseSetting?.StringValue})"))" />
                                    }
                                }
                            }
                            <RadzenIcon Icon="javascript" IconStyle="IconStyle.Warning" Visible="@Setting.HasDisplayScript" Style="font-size: 1.5em; margin-left: 6px"
                                        MouseEnter="@(args => ShowTooltip(args, Setting.DisplayScript is not null ? ScriptRunner.FormatScript(Setting.DisplayScript) : "No Script", multiLine: true))" />
                            @if (GetDependentSettingsCount() > 0)
                            {
                                <RadzenIcon Icon="visibility" IconStyle="IconStyle.Info" Style="font-size: 1em; margin-left: 6px"
                                            MouseEnter="@(args => ShowTooltip(args, $"Controls visibility of {GetDependentSettingsCount()} setting{(GetDependentSettingsCount() == 1 ? "" : "s")}"))" />
                            }
                            @if (Setting.ScheduledChangeDescription != null)
                            {
                                <RadzenIcon Icon="schedule" IconStyle="IconStyle.Warning" Style="font-size: 1em; margin-left: 4px"
                                            MouseEnter="@(args => ShowTooltip(args, Setting.ScheduledChangeDescription, multiLine: true))" />
                            }
                        </span>
                    </h3>
                    <!-- Description under the H3 title -->
                    <div class="description-text">
                        @(Setting.Description)
                    </div>
                </div>
                <!-- Right side: Three buttons aligned with the H3 heading -->
                <div class="d-flex flex-column pt-3 pb-1">
                    <div class="d-flex justify-content-end">
                        <!-- Externally Managed Button -->
                        <div class="px-1 @(!Setting.IsExternallyManaged || Setting.IsGroupManaged || IsReadOnlyUser ? "collapse" : "")">
                            <RadzenButton Click="@(() => UnlockSetting(Setting))" Icon="@(Setting.IsReadOnly ? "lock" : "lock_open")"
                                          ButtonStyle="@(Setting.IsReadOnly ? ButtonStyle.Danger : ButtonStyle.Secondary)" 
                                          MouseEnter="@(args => ShowTooltip(args, "Externally managed setting"))" />
                        </div>
                        @if (Setting.MatchesBaseValue is not null)
                        {
                            <!-- Push Changes Up Button -->
                            <div class="px-1">
                                <RadzenButton Click="@(() => Setting.PushValueToBase())" Disabled="@(Setting.MatchesBaseValue != false)" Icon="upload_2"
                                              ButtonStyle="ButtonStyle.Secondary" MouseEnter="@(args => ShowTooltip(args, "Push Value to Base"))" />
                            </div>
                            <!-- Pull Changes Down Button -->
                            <div class="px-1">
                                <RadzenButton Click="@(() => Setting.PullValueFromBase())" Disabled="@(Setting.MatchesBaseValue != false)" Icon="download_2"
                                              ButtonStyle="ButtonStyle.Secondary" MouseEnter="@(args => ShowTooltip(args, "Pull Value from Base"))" />
                            </div>
                        }
                        @if (Setting.IsBaseSetting)
                        {
                            <!-- Push Changes Down to All Button -->
                            <div class="px-1">
                                <RadzenButton Click="@(() => Setting.PushValueToInstances())" Icon="arrow_circle_down"
                                              ButtonStyle="ButtonStyle.Secondary" MouseEnter="@(args => ShowTooltip(args, "Push Value to all instances"))" />
                            </div>
                        }
                        
                        <!-- Undo Changes Button -->
                        <div class="px-1 @(Setting.IsGroupManaged || IsReadOnlyUser ? "collapse" : "")">
                            <RadzenButton Click="@(() => Setting.UndoChanges())" Disabled="@Setting.IsNotDirty" Icon="restart_alt"
                                          ButtonStyle="ButtonStyle.Warning" MouseEnter="@(args => ShowTooltip(args, "Undo unsaved changes"))" />
                        </div>
                        <!-- Reset to Default Button -->
                        <div class="px-1 @(Setting.IsGroupManaged || IsReadOnlyUser ? "collapse" : "")">
                            <RadzenButton Click="@(() => Setting.ResetToDefault())" Disabled="@Setting.ResetToDefaultDisabled" Icon="settings_backup_restore"
                                          ButtonStyle="ButtonStyle.Warning" MouseEnter="@(args => ShowTooltip(args, "Reset to default value"))" />
                        </div>
                        <!-- Show History Button -->
                        <div class="px-1 pr-1">
                            <RadzenButton Click="@(() => Setting.ShowHistory())" Icon="history" ButtonStyle="ButtonStyle.Light"
                                          MouseEnter="@(args => ShowTooltip(args, "Toggle setting history details"))" />
                        </div>
                    </div>
                    <!-- Modified Badge (displayed below buttons) -->
                    <div class="@(!Setting.IsDirty ? "collapse" : "") mt-1">
                        <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="Modified" class="position-absolute top-0 end-0 m-1"
                                     MouseEnter="@(args => ShowTooltip(args, "This setting has unsaved changes"))" />
                    </div>
                </div>
            </div>
            <div class="d-flex" style="margin-left: 15px">
                @if (Setting is StringSettingConfigurationModel stringSetting)
                {
                    <StringSetting Setting="@stringSetting"/>
                }
                else if (Setting is IntSettingConfigurationModel intSetting)
                {
                    <IntSetting Setting="@intSetting"/>
                }
                else if (Setting is DoubleSettingConfigurationModel doubleSetting)
                {
                    <DoubleSetting Setting="@doubleSetting"/>
                }
                else if (Setting is LongSettingConfigurationModel longSetting)
                {
                    <LongSetting Setting="@longSetting"/>
                }
                else if (Setting is BoolSettingConfigurationModel boolSetting)
                {
                    <BoolSetting Setting="@boolSetting"/>
                }
                else if (Setting is DropDownSettingConfigurationModel dropDownSetting)
                {
                    <DropDownSetting Setting="@dropDownSetting"/>
                }
                else if (Setting is DataGridSettingConfigurationModel dataGridSetting)
                {
                    <DataGridSetting Setting="@dataGridSetting"/>
                }
                else if (Setting is DateTimeSettingConfigurationModel dateTimeSetting)
                {
                    <DateTimeSetting Setting="@dateTimeSetting"/>
                }
                else if (Setting is TimeSpanSettingConfigurationModel timeSpanSetting)
                {
                    <TimeSpanSetting Setting="@timeSpanSetting"/>
                }
                else if (Setting is JsonSettingConfigurationModel jsonSetting)
                {
                    <JsonSetting Setting="@jsonSetting"/>
                }
            </div>
            <div class="p-1 @(Setting.IsGroupManaged ? "" : "collapse")" style="margin-left: 15px">
                <p class="description-text">This setting is managed by <a href="" @onclick="@(() => Setting.RequestSettingClientIsShown(Setting.Group))" @onclick:preventDefault>@Setting.Group</a></p>
            </div>
            <div class="p-1 @(Setting.Parent.IsGroup ? "" : "collapse")">
                <p class="description-text" style="margin-left: 15px">This setting sets the value for 
                    <a href="" @onclick="@ToggleClientListVisibility" class="description-text" @onclick:preventDefault>
                        @(Setting.GroupManagedSettings?.Count ?? 0) client@(Setting.GroupManagedSettings?.Count == 1 ? "" : "s")
                    </a>
                </p>
                
                <div class="transition-visible @(_isGroupManagedSettingVisible ? "show" : "collapse")">
                    <ul class="client-list">
                        @foreach (var groupManagedSetting in Setting.GroupManagedSettings ?? new List<ISetting>())
                        {
                            <li>
                                <a href="" class="description-text" @onclick="@(() => Setting.RequestSettingClientIsShown(groupManagedSetting.Parent.Name))" @onclick:preventDefault>
                                    @groupManagedSetting.Parent.DisplayName
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="p-1 transition-visible @(Setting.IsHistoryVisible ? "show" : "collapse")">
                <hr/>
                <h3>History</h3>
                <div class="@(Setting.Parent.IsGroup ? "collapse" : "")">
                    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="3" AllowPaging="true"
                                    Data="@Setting.History" TItem="SettingHistoryModel" ColumnWidth="300px">
                        <Columns>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="DateTime" Title="DateTime" Frozen="true" Width="100px"/>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="Value" Title="Value" Frozen="true" Width="100px">
                                <Template>
                                    <p style="white-space: pre-wrap; word-wrap: break-word">@context.Value</p>
                                </Template>
                            </Radzen.Blazor.RadzenDataGridColumn>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="User" Title="User" Width="100px"/>
                        </Columns>
                    </RadzenDataGrid>
                </div>
                <div class="@(Setting.Parent.IsGroup ? "" : "collapse")">
                    <RadzenTabs RenderMode="TabRenderMode.Client">
                        <Tabs>
                            @foreach (var groupManagedSetting in Setting.GroupManagedSettings ?? new List<ISetting>())
                            {
                                <RadzenTabsItem Text="@groupManagedSetting.Parent.DisplayName">
                                    <p>This is the history for @groupManagedSetting.DisplayName listed under @groupManagedSetting.Parent.DisplayName</p>
                                    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="3" AllowPaging="true"
                                                    Data="@groupManagedSetting.History" TItem="SettingHistoryModel" ColumnWidth="300px">
                                        <Columns>
                                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="DateTime" Title="DateTime" Frozen="true" Width="100px"/>
                                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="Value" Title="Value" Frozen="true" Width="100px">
                                                <Template>
                                                    <p style="white-space: pre-wrap; word-wrap: break-word">@context.Value</p>
                                                </Template>
                                            </Radzen.Blazor.RadzenDataGridColumn>
                                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="User" Title="User" Width="100px"/>
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenTabsItem>
                            }
                        </Tabs>
                    </RadzenTabs>
                </div>
            </div>
        </RadzenCard>
    </div>
}
<style>
    .custom-card {
        position: relative;
        overflow: hidden;
        background: rgba(255, 255, 255, 0.05);  /* Subtle transparent background */
        border: none;
        backdrop-filter: blur(10px);  /* Frosted glass effect */
        transition: all 0.3s ease-in-out;  /* Updated transition timing */
        margin-bottom: 0.25rem !important;  /* Reduce space between cards */
    }
    .custom-card:hover {
        transform: translateY(-1px);  /* Subtle lift effect */
        background: rgba(255, 255, 255, 0.08);  /* Slightly lighter on hover */
    }
    
    /* Expand/collapse icon */
    .expand-collapse-icon {
        position: absolute;
        top: 7px;
        left: 7px;
        z-index: 10;
        width: 22px;
        height: 22px;
        border-radius: 50%;
        background-color: rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .expand-collapse-icon:hover {
        background-color: rgba(0, 0, 0, 0.6);
        transform: scale(1.2);
    }
    
    .expand-collapse-icon.visible {
        opacity: 1;
        visibility: visible;
    }
    
    .expand-collapse-icon.hidden {
        opacity: 0;
        visibility: hidden;
    }
    
    .expand-collapse-icon ::deep .rz-icon {
        font-size: 16px;
        color: white;
    }
    
    .colored-line {
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;  /* Thinner line */
        opacity: 0.8;  /* Slightly transparent */
    }
    .card-content {
        padding: 0.35rem 1rem 0.35rem 1.25rem;  /* Reduced top/bottom padding further */
    }
    h3, h2 {
        margin: 0;
        font-size: 1rem;  /* Slightly smaller font */
        line-height: 1.2;
        font-weight: 500;  /* Medium weight */
        color: rgba(255, 255, 255, 0.9);  /* Slightly transparent white */
        margin-bottom: 0.25rem !important;  /* Reduce space after heading */
    }
    
    /* Compact view specific styles */
    .compact-view {
        padding: 0.25rem 0.5rem;
    }
    .clickable-heading {
        cursor: pointer;
        transition: color 0.2s ease;
    }
    .clickable-heading:hover {
        color: #fff;  /* Full white on hover */
    }

    /* Compact view specific styles */
    .compact-view {
        padding: 0.25rem 0.5rem;
    }

    /* Button styles */
    ::deep .rz-button {
        padding: 0.25rem 0.5rem;
        min-height: 1.75rem;  /* Smaller button height */
        font-size: 0.9rem;
    }

    /* Badge styles */
    ::deep .rz-badge {
        padding: 0.2rem 0.5rem;
        font-size: 0.75rem;
        opacity: 0.8;
    }

    /* History section */
    .history-section {
        margin-top: 0.5rem;
        padding-top: 0.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Make description more compact */
    .description-text {
        font-size: 0.85rem;
        line-height: 1.2;
        margin-bottom: 0.25rem;
        color: rgba(255, 255, 255, 0.7);
    }

    /* Make the input controls more compact */
    ::deep .rz-textbox,
    ::deep .rz-spinner,
    ::deep .rz-dropdown {
        height: 1.75rem;  /* Smaller input height */
        font-size: 0.9rem;
        padding: 0.25rem 0.5rem;
    }

    /* Adjust top spacing for buttons container */
    .d-flex.flex-column.pt-3.pb-1 {
        padding-top: 0.5rem !important;  /* Reduce top padding */
        padding-bottom: 0.25rem !important;  /* Reduce bottom padding */
    }

    /* Update the transition styles */
    .transition-visible {
        overflow: hidden;
        max-height: 2000px;
        opacity: 1;
        transform: translateY(0);
        transition: max-height 0.3s ease-in-out, 
                    opacity 0.3s ease-in-out,
                    transform 0.3s ease-in-out,
                    margin 0.3s ease-in-out,
                    padding 0.3s ease-in-out;
    }
    .transition-visible.transition-collapsed {
        max-height: 0;
        opacity: 0;
        transform: translateY(-10px);
        margin: 0 !important;
        padding: 0 !important;
    }
    .transition-visible.show {
        opacity: 1;
        transform: translateY(0);
    }

    .setting-path {
        display: flex;
        flex-direction: column;
        line-height: 1.1;
    }
    .setting-parent {
        font-size: 0.7rem;
        opacity: 0.6;
        font-weight: 400;
        color: #64B5F6;  /* Light blue color */
        margin-bottom: 0.1rem;
        font-family: 'Consolas', monospace;
    }
    .setting-name {
        font-size: 1rem;
        font-weight: 500;
    }

    /* Compact view adjustments */
    .compact-view .setting-path {
        flex-direction: row;
        align-items: center;
        gap: 0.5rem;
    }
    .compact-view .setting-parent {
        position: relative;
        margin-bottom: 0;
        padding-right: 0.5rem;
    }
    .compact-view .setting-parent::after {
        content: '→';
        position: absolute;
        right: 0;
        opacity: 0.4;
    }

    /* Update clickable-heading to be non-clickable in compact view */
    .compact-view .compact-heading {
        cursor: default;
    }

    /* Add clickable card style */
    .clickable-card {
        cursor: pointer;
        transition: transform 0.2s ease, background-color 0.2s ease;
    }
    .clickable-card:hover {
        transform: translateY(-1px);
        background: rgba(255, 255, 255, 0.08);
    }

    /* Add new styles for compact view alignment with dynamic widths */
    .setting-name-container {
        flex: 0 0 var(--name-width, 40%);
        min-width: 0;
        margin-right: 16px;
        max-width: var(--name-width, 40%);
    }
    .setting-name-container h3 {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    .setting-value-container {
        flex: 1 1 var(--value-width, 50%);
        min-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        max-width: var(--value-width, 50%);
    }

    /* Update compact view specific styles */
    .compact-view {
        padding: 0.25rem 0.5rem;
        /* CSS custom properties for dynamic width allocation */
        --name-width: 40%;
        --value-width: 50%;
    }
    .compact-view .setting-path {
        max-width: 100%;
        overflow: hidden;
    }
    
    /* Ensure proper text handling in compact view */
    .compact-view .setting-name-container h3 {
        font-size: 0.95rem;
        line-height: 1.2;
    }
    .compact-view .setting-value-container {
        font-size: 0.9rem;
        line-height: 1.2;
        word-break: break-word;
        overflow-wrap: break-word;
    }

    /* Add new styles for compact modified badge */
    .compact-modified-badge {
        padding-left: 12px;
        padding-right: 4px;
    }
    .compact-modified-badge ::deep .rz-badge {
        margin: 0;
        padding: 0.2rem 0.5rem;
        font-size: 0.75rem;
        opacity: 0.8;
        white-space: nowrap;
    }

    /* Admonition styles */
    .note,
    div[class^="note["] {
        position: relative;
        margin: 1rem 0;
        padding: 1rem;
        border-left: 4px solid;
        border-color: #2196F3;
        background-color: rgba(33, 150, 243, 0.1);
    }
    .note::before {
        content: 'NOTE';
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #2196F3;
    }
    div[class^="note["]::before {
        content: attr(class);
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #2196F3;
    }

    .tip,
    div[class^="tip["] {
        position: relative;
        margin: 1rem 0;
        padding: 1rem;
        border-left: 4px solid;
        border-color: #4CAF50; /* Green */
        background-color: rgba(76, 175, 80, 0.1);
    }
    .tip::before {
        content: 'TIP';
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #4CAF50;
    }
    div[class^="tip["]::before {
        content: attr(class);
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #4CAF50;
    }

    .info,
    div[class^="info["] {
        position: relative;
        margin: 1rem 0;
        padding: 1rem;
        border-left: 4px solid;
        border-color: #00BCD4; /* Cyan */
        background-color: rgba(0, 188, 212, 0.1);
    }
    .info::before {
        content: 'INFO';
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #00BCD4;
    }
    div[class^="info["]::before {
        content: attr(class);
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #00BCD4;
    }

    .warning,
    div[class^="warning["] {
        position: relative;
        margin: 1rem 0;
        padding: 1rem;
        border-left: 4px solid;
        border-color: #FF9800; /* Orange */
        background-color: rgba(255, 152, 0, 0.1);
    }
    .warning::before {
        content: 'WARNING';
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #FF9800;
    }
    div[class^="warning["]::before {
        content: attr(class);
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #FF9800;
    }

    .danger,
    div[class^="danger["] {
        position: relative;
        margin: 1rem 0;
        padding: 1rem;
        border-left: 4px solid;
        border-color: #F44336; /* Red */
        background-color: rgba(244, 67, 54, 0.1);
    }
    .danger::before {
        content: 'DANGER';
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #F44336;
    }
    div[class^="danger["]::before {
        content: attr(class);
        display: block;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: #F44336;
    }
    
    /* Styling for the "more rows" text in DataGrid settings */
    .more-rows-message {
        font-style: italic;
        color: lightblue;
        display: block;
        font-weight: normal;!important;
    }
</style>
@code {
    private ElementReference _compactCategoryLine;
    private ElementReference _categoryLine;
    private bool _isGroupManagedSettingVisible;
    private bool _showExpandIcon;
    const int IndentationPixelMultiplier = 10;

    [Parameter]
    public ISetting Setting { get; set; } = null!;
    [Inject]
    private TooltipService TooltipService { get; set; } = null!;
    [Inject]
    private IAccountService AccountService { get; set; } = null!;
    [Inject]
    private IEventDistributor EventDistributor { get; set; } = null!;
    [Inject]
    private DialogService DialogService { get; set; } = null!;
    [Inject]
    private IScriptRunner ScriptRunner { get; set; } = null!;
    
    private bool IsReadOnlyUser => AccountService.AuthenticatedUser?.Role == Role.ReadOnly;
    
    private (double nameWidth, double valueWidth) CalculateOptimalWidths()
    {
        if (Setting?.Parent?.Settings == null) return (40, 50);
        
        var compactSettings = Setting.Parent.Settings.Where(s => s.IsCompactView && !s.Hidden).ToList();
        if (!compactSettings.Any()) return (40, 50);
        
        var maxNameLength = compactSettings.Max(s => GetDisplayTextLength(s.DisplayName));
        var maxValueLength = compactSettings.Max(s => GetDisplayTextLength(s.GetStringValue(100)));
        
        // Calculate relative widths based on content lengths
        var totalLength = maxNameLength + maxValueLength;
        if (totalLength == 0) return (40, 50);
        
        // Calculate percentage distribution with constraints
        var namePercentage = Math.Min(Math.Max((double)maxNameLength / totalLength * 100, 25), 65);
        var valuePercentage = Math.Min(Math.Max((double)maxValueLength / totalLength * 100, 30), 70);
        
        // Ensure total doesn't exceed 95% (leave room for spacing and badges)
        var total = namePercentage + valuePercentage;
        if (total > 95)
        {
            var scale = 95.0 / total;
            namePercentage *= scale;
            valuePercentage *= scale;
        }
        
        return (namePercentage, valuePercentage);
    }
    
    private int GetDisplayTextLength(string text)
    {
        if (string.IsNullOrEmpty(text)) 
            return 0;
        
        // For very long text, consider character density differently
        return Math.Min(text.Length, 100);
    }
    
    private string GetCompactViewStyle()
    {
        var (nameWidth, valueWidth) = CalculateOptimalWidths();
        return $"--name-width: {nameWidth:F1}%; --value-width: {valueWidth:F1}%;";
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        // Subscribe to refresh events to recalculate widths when view changes
        EventDistributor.Subscribe(EventConstants.RefreshView, StateHasChanged);
    }

    private void ShowExpandIcon()
    {
        _showExpandIcon = true;
        StateHasChanged();
    }

    private void HideExpandIcon()
    {
        _showExpandIcon = false;
        StateHasChanged();
    }

    private void ShowTooltip(ElementReference elementReference, string tooltipText, TooltipPosition position = TooltipPosition.Bottom, bool multiLine = false)
    {
        if (string.IsNullOrWhiteSpace(tooltipText))
            return;

        var style = "background-color: black";
        var options = new TooltipOptions
        {
            Position = position,
            Style = style,
            Duration = multiLine ? 20000 : 6000,
        };

        if (multiLine)
        {
            TooltipService.Open(elementReference, t =>
                @<div style="white-space:pre">
                    @tooltipText
                </div>, options);
        }
        else
        {
            TooltipService.Open(elementReference, tooltipText, options);
        }
    }

    private void ToggleSettingCompactView(MouseEventArgs mouseEventArgs)
    {
        Setting.ToggleCompactView(mouseEventArgs.CtrlKey);
        EventDistributor.Publish(EventConstants.RefreshView);
    }

    async Task UnlockSetting(ISetting setting)
    {
        if (!setting.IsReadOnly)
            return;

        var unlock = await GetUnlockConfirmation(setting);
        
        if (unlock)
            setting.Unlock();
    }
    
    async Task<bool> GetUnlockConfirmation(ISetting setting)
    {
        return await DialogService.OpenAsync("Confirm Unlock", ds =>
        {
            return @<div>
                <p class="mb-4">@(setting.DisplayName) is externally managed, changes made in the Fig UI might be overriden.</p>
                <p class="mb-4">Consider any changes made here temporary.</p>
                <p class="mb-4">Do you want to proceed?.</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
                    </div>
                </div>
            </div>;
        }) ?? false;
    }

    private void ToggleClientListVisibility()
    {
        _isGroupManagedSettingVisible = !_isGroupManagedSettingVisible;
    }
    
    private string GetIndentStyle()
    {
        var styles = new List<string>();
        
        // Calculate indent based on IndentAttribute if present
        if (Setting.Indent is > 0)
        {
            var indentPixels = Setting.Indent.Value * IndentationPixelMultiplier; // 10px per indent level
            styles.Add($"margin-left: {indentPixels}px");
        }
        // Fall back to the original logic for EnablesSettings
        else if (Setting.IsEnabledByOtherSetting)
        {
            styles.Add($"margin-left: {IndentationPixelMultiplier}px");
        }
        
        return string.Join("; ", styles);
    }

    private int GetDependentSettingsCount()
    {
        if (Setting?.Parent?.Settings == null) return 0;
        return Setting.Parent.Settings.Count(s => s.DependsOnProperty == Setting.Name);
    }

}