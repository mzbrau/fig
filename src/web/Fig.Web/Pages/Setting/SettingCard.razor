@using Fig.Common.Events
@using Fig.Web.Models.Setting
@using Fig.Web.Models.Setting.ConfigurationModels
@using Fig.Web.Models.Setting.ConfigurationModels.DataGrid
@using Fig.Web.Services
@using Markdig
@using Fig.Contracts.Authentication
@using Fig.Web.Events
@using Fig.Web.Scripting
@using Microsoft.AspNetCore.Components.Web
@if (Setting.IsCompactView)
{
    <div class="transition-visible @(Setting.Hidden ? "transition-collapsed" : "show")" 
         style="@(Setting.IsEnabledByOtherSetting ? "margin-left:10px" : "")">
        <RadzenCard class="position-relative custom-card compact-view clickable-card"
                   @onclick="@((args) => ToggleSettingCompactView(args))">
            <div class="colored-line" @ref="_compactCategoryLine" 
                 onmouseenter="@(() => ShowTooltip(_compactCategoryLine, @Setting.CategoryName, TooltipPosition.Right))"
                 style="background-color: @Setting.CategoryColor">
            </div>

            <div class="d-flex align-items-center">
                <div class="setting-name-container">
                    <h3 class="compact-heading" 
                        style="margin-left: 12px; color:@(Setting.IsValid ? "rgba(255,255,255,0.9)" : "#ff4444")">
                        @if (Setting.Name.Contains("->"))
                        {
                            var tokens = Setting.Name.Split("->");
                            <div class="setting-path">
                                <span class="setting-parent">@string.Join("->", tokens.Take(tokens.Length - 1))</span>
                                <span class="setting-name">@tokens.Last()</span>
                            </div>
                        }
                        else
                        {
                            @Setting.Name
                        }
                    </h3>
                </div>
                <div class="setting-value-container" style="font-weight:@(Setting.IsDirty ? "500" : "normal"); 
                                 color:@(Setting.IsValid ? "rgba(255,255,255,0.8)" : "#ff4444")">
                    @Setting.GetStringValue()
                </div>
            </div>
        </RadzenCard>
    </div>
}
else
{
    <div class="transition-visible @(Setting.Hidden ? "transition-collapsed" : "show")" style="@(Setting.IsEnabledByOtherSetting ? "margin-left:10px" : "")">
        <RadzenCard class="position-relative custom-card">
            <div class="colored-line" @ref="_categoryLine" onmouseenter="@(() => ShowTooltip(_categoryLine, @Setting.CategoryName, TooltipPosition.Right))"
                 style="background-color: @Setting.CategoryColor"></div>

            <div class="d-flex align-items-center justify-content-between card-content" id="@(Setting.Name)">
                <!-- Left side: Title, Icons, Description -->
                <div class="d-flex flex-column flex-grow-1 pr-2 mb-1">
                    <h3 class="mb-1 clickable-heading" @onclick="@(ToggleSettingCompactView)">
                        @if (Setting.Name.Contains("->"))
                        {
                            var tokens = Setting.Name.Split("->");
                            <div class="setting-path">
                                <span class="setting-parent">@string.Join("->", tokens.Take(tokens.Length - 1))</span>
                                <span class="setting-name">@tokens.Last()</span>
                            </div>
                        }
                        else
                        {
                            @Setting.Name
                        }
                        <!-- Icons within the H3 tag -->
                        <RadzenIcon Icon="bolt" IconStyle="IconStyle.Warning" Visible="@Setting.SupportsLiveUpdate" Style="font-size: 0.7em" />
                        <RadzenIcon Icon="javascript" IconStyle="IconStyle.Warning" Visible="@Setting.HasDisplayScript" Style="font-size: 1em"
                                    MouseEnter="@(args => ShowTooltip(args, Setting.DisplayScript is not null ? ScriptRunner.FormatScript(Setting.DisplayScript) : "No Script", multiLine: true))" />
                    </h3>
                    <!-- Description under the H3 title -->
                    <div class="description-text">
                        @(Setting.Description)
                    </div>
                </div>

                <!-- Right side: Three buttons aligned with the H3 heading -->
                <div class="d-flex flex-column pt-3 pb-1">
                    <div class="d-flex justify-content-end">
                        <!-- Externally Managed Button -->
                        <div class="px-1 @(!Setting.IsExternallyManaged || Setting.IsGroupManaged || IsReadOnlyUser ? "collapse" : "")">
                            <RadzenButton Click="@(() => UnlockSetting(Setting))" Icon="@(Setting.IsReadOnly ? "lock" : "lock_open")"
                                          ButtonStyle="@(Setting.IsReadOnly ? ButtonStyle.Danger : ButtonStyle.Secondary)" 
                                          MouseEnter="@(args => ShowTooltip(args, "Externally managed setting"))" />
                        </div>
                        <!-- Undo Changes Button -->
                        <div class="px-1 @(Setting.IsGroupManaged || IsReadOnlyUser ? "collapse" : "")">
                            <RadzenButton Click="@(() => Setting.UndoChanges())" Disabled="@Setting.IsNotDirty" Icon="restart_alt"
                                          ButtonStyle="ButtonStyle.Warning" MouseEnter="@(args => ShowTooltip(args, "Undo unsaved changes"))" />
                        </div>
                        <!-- Reset to Default Button -->
                        <div class="px-1 @(Setting.IsGroupManaged || IsReadOnlyUser ? "collapse" : "")">
                            <RadzenButton Click="@(() => Setting.ResetToDefault())" Disabled="@Setting.ResetToDefaultDisabled" Icon="settings_backup_restore"
                                          ButtonStyle="ButtonStyle.Warning" MouseEnter="@(args => ShowTooltip(args, "Reset to default value"))" />
                        </div>
                        <!-- Show History Button -->
                        <div class="px-1 pr-1">
                            <RadzenButton Click="@(() => Setting.ShowHistory())" Icon="history" ButtonStyle="ButtonStyle.Light"
                                          MouseEnter="@(args => ShowTooltip(args, "Toggle setting history details"))" />
                        </div>
                    </div>
                    <!-- Modified Badge (displayed below buttons) -->
                    <div class="@(!Setting.IsDirty ? "collapse" : "") mt-1">
                        <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="Modified" class="position-absolute top-0 end-0 m-1"
                                     MouseEnter="@(args => ShowTooltip(args, "This setting has unsaved changes"))" />
                    </div>
                </div>
            </div>

            <div class="d-flex" style="margin-left: 15px">
                @if (Setting is StringSettingConfigurationModel stringSetting)
                {
                    <StringSetting Setting="@stringSetting"/>
                }
                else if (Setting is IntSettingConfigurationModel intSetting)
                {
                    <IntSetting Setting="@intSetting"/>
                }
                else if (Setting is DoubleSettingConfigurationModel doubleSetting)
                {
                    <DoubleSetting Setting="@doubleSetting"/>
                }
                else if (Setting is LongSettingConfigurationModel longSetting)
                {
                    <LongSetting Setting="@longSetting"/>
                }
                else if (Setting is BoolSettingConfigurationModel boolSetting)
                {
                    <BoolSetting Setting="@boolSetting"/>
                }
                else if (Setting is DropDownSettingConfigurationModel dropDownSetting)
                {
                    <DropDownSetting Setting="@dropDownSetting"/>
                }
                else if (Setting is DataGridSettingConfigurationModel dataGridSetting)
                {
                    <DataGridSetting Setting="@dataGridSetting"/>
                }
                else if (Setting is DateTimeSettingConfigurationModel dateTimeSetting)
                {
                    <DateTimeSetting Setting="@dateTimeSetting"/>
                }
                else if (Setting is TimeSpanSettingConfigurationModel timeSpanSetting)
                {
                    <TimeSpanSetting Setting="@timeSpanSetting"/>
                }
                else if (Setting is JsonSettingConfigurationModel jsonSetting)
                {
                    <JsonSetting Setting="@jsonSetting"/>
                }
            </div>

            <div class="p-1 @(Setting.IsGroupManaged ? "" : "collapse")">
                <p>This setting is managed by <a href="" @onclick="@(() => Setting.RequestSettingClientIsShown(Setting.Group))" @onclick:preventDefault>@Setting.Group</a></p>
            </div>

            <div class="p-1 @(Setting.Parent.IsGroup ? "" : "collapse")">
                <p>
                    This setting sets the value for
                    @foreach (var groupManagedSetting in Setting.GroupManagedSettings ?? new List<ISetting>())
                    {
                        <a href="" @onclick="@(() => Setting.RequestSettingClientIsShown(groupManagedSetting.Parent.Name))" @onclick:preventDefault>
                            @groupManagedSetting.Parent.Name&nbsp;
                        </a>
                    }
                </p>
            </div>

            <div class="p-1 transition-visible @(Setting.IsHistoryVisible ? "show" : "collapse")">

                <hr/>
                <h3>History</h3>


                <div class="@(Setting.Parent.IsGroup ? "collapse" : "")">
                    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="3" AllowPaging="true"
                                    Data="@Setting.History" TItem="SettingHistoryModel" ColumnWidth="300px">
                        <Columns>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="DateTime" Title="DateTime" Frozen="true" Width="100px"/>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="Value" Title="Value" Frozen="true" Width="100px">
                                <Template>
                                    <p style="white-space: pre-wrap; word-wrap: break-word">@context.Value</p>
                                </Template>
                            </Radzen.Blazor.RadzenDataGridColumn>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="User" Title="User" Width="100px"/>
                        </Columns>
                    </RadzenDataGrid>
                </div>

                <div class="@(Setting.Parent.IsGroup ? "" : "collapse")">
                    <RadzenTabs RenderMode="TabRenderMode.Client">
                        <Tabs>
                            @foreach (var groupManagedSetting in Setting.GroupManagedSettings ?? new List<ISetting>())
                            {
                                <RadzenTabsItem Text="@groupManagedSetting.Parent.Name">
                                    <p>This is the history for @groupManagedSetting.Name listed under @groupManagedSetting.Parent.Name</p>
                                    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="3" AllowPaging="true"
                                                    Data="@groupManagedSetting.History" TItem="SettingHistoryModel" ColumnWidth="300px">
                                        <Columns>
                                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="DateTime" Title="DateTime" Frozen="true" Width="100px"/>
                                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="Value" Title="Value" Frozen="true" Width="100px">
                                                 <Template>
                                                    <p style="white-space: pre-wrap; word-wrap: break-word">@context.Value</p>
                                                </Template>
                                            </Radzen.Blazor.RadzenDataGridColumn>
                                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="User" Title="User" Width="100px"/>
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenTabsItem>
                            }
                        </Tabs>
                    </RadzenTabs>
                </div>

            </div>

        </RadzenCard>
    </div>
}

<style>
    .custom-card {
        position: relative;
        overflow: hidden;
        border: none;
        background: rgba(255, 255, 255, 0.05);  /* Subtle transparent background */
        backdrop-filter: blur(10px);  /* Frosted glass effect */
        transition: all 0.3s ease-in-out;  /* Updated transition timing */
        margin-bottom: 0.25rem !important;  /* Reduce space between cards */
    }

    .custom-card:hover {
        transform: translateY(-1px);  /* Subtle lift effect */
        background: rgba(255, 255, 255, 0.08);  /* Slightly lighter on hover */
    }

    .colored-line {
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;  /* Thinner line */
        opacity: 0.8;  /* Slightly transparent */
    }

    .card-content {
        padding: 0.35rem 1rem 0.35rem 1.25rem;  /* Reduced top/bottom padding further */
    }

    h3, h2 {
        margin: 0;
        line-height: 1.2;
        font-size: 1rem;  /* Slightly smaller font */
        font-weight: 500;  /* Medium weight */
        color: rgba(255, 255, 255, 0.9);  /* Slightly transparent white */
        margin-bottom: 0.25rem !important;  /* Reduce space after heading */
    }

    .clickable-heading {
        cursor: pointer;
        transition: color 0.2s ease;
    }

    .clickable-heading:hover {
        color: #fff;  /* Full white on hover */
    }

    /* Compact view specific styles */
    .compact-view {
        padding: 0.25rem 0.5rem;
    }

    /* Button styles */
    ::deep .rz-button {
        padding: 0.25rem 0.5rem;
        min-height: 1.75rem;  /* Smaller button height */
        font-size: 0.9rem;
    }

    /* Badge styles */
    ::deep .rz-badge {
        padding: 0.2rem 0.5rem;
        font-size: 0.75rem;
        opacity: 0.8;
    }

    /* History section */
    .history-section {
        margin-top: 0.5rem;
        padding-top: 0.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Make description more compact */
    .description-text {
        font-size: 0.85rem;
        line-height: 1.2;
        margin-bottom: 0.25rem;
        color: rgba(255, 255, 255, 0.7);
    }

    /* Make the input controls more compact */
    ::deep .rz-textbox,
    ::deep .rz-spinner,
    ::deep .rz-dropdown {
        height: 1.75rem;  /* Smaller input height */
        font-size: 0.9rem;
        padding: 0.25rem 0.5rem;
    }

    /* Adjust top spacing for buttons container */
    .d-flex.flex-column.pt-3.pb-1 {
        padding-top: 0.5rem !important;  /* Reduce top padding */
        padding-bottom: 0.25rem !important;  /* Reduce bottom padding */
    }

    /* Update the transition styles */
    .transition-visible {
        overflow: hidden;
        max-height: 2000px;
        opacity: 1;
        transform: translateY(0);
        transition: max-height 0.3s ease-in-out, 
                    opacity 0.3s ease-in-out,
                    transform 0.3s ease-in-out,
                    margin 0.3s ease-in-out,
                    padding 0.3s ease-in-out;
    }

    .transition-visible.transition-collapsed {
        max-height: 0;
        opacity: 0;
        transform: translateY(-10px);
        margin: 0 !important;
        padding: 0 !important;
    }

    /* Update show class to ensure proper initial state */
    .transition-visible.show {
        opacity: 1;
        transform: translateY(0);
    }

    .setting-path {
        display: flex;
        flex-direction: column;
        line-height: 1.1;
    }

    .setting-parent {
        font-size: 0.7rem;
        opacity: 0.6;
        font-weight: 400;
        color: #64B5F6;  /* Light blue color */
        margin-bottom: 0.1rem;
        font-family: 'Consolas', monospace;
    }

    .setting-name {
        font-size: 1rem;
        font-weight: 500;
    }

    /* Compact view adjustments */
    .compact-view .setting-path {
        flex-direction: row;
        align-items: center;
        gap: 0.5rem;
    }

    .compact-view .setting-parent {
        position: relative;
        margin-bottom: 0;
        padding-right: 0.5rem;
    }

    .compact-view .setting-parent::after {
        content: '→';
        position: absolute;
        right: 0;
        opacity: 0.4;
    }

    /* Update clickable-heading to be non-clickable in compact view */
    .compact-view .compact-heading {
        cursor: default;
    }

    /* Add clickable card style */
    .clickable-card {
        cursor: pointer;
        transition: transform 0.2s ease, background-color 0.2s ease;
    }

    .clickable-card:hover {
        transform: translateY(-1px);
        background: rgba(255, 255, 255, 0.08);
    }

    /* Add new styles for compact view alignment */
    .setting-name-container {
        flex: 0 0 300px;
        min-width: 0;
        margin-right: 16px;
    }

    .setting-name-container h3 {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .setting-value-container {
        flex: 1;
        min-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    /* Update compact view specific styles */
    .compact-view {
        padding: 0.25rem 0.5rem;
    }

    .compact-view .setting-path {
        max-width: 100%;
        overflow: hidden;
    }

</style>

@code {

    private ElementReference _categoryLine;
    private ElementReference _compactCategoryLine;
    
    [Parameter]
    public ISetting Setting { get; set; } = null!;

    [Inject]
    private TooltipService TooltipService { get; set; } = null!;

    [Inject]
    private IAccountService AccountService { get; set; } = null!;

    [Inject]
    private IEventDistributor EventDistributor { get; set; } = null!;
    
    [Inject]
    private DialogService DialogService { get; set; } = null!;

    [Inject]
    private IScriptRunner ScriptRunner { get; set; } = null!;

    private bool IsReadOnlyUser => AccountService.AuthenticatedUser?.Role == Role.ReadOnly;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void ShowTooltip(ElementReference elementReference, string tooltipText, TooltipPosition position = TooltipPosition.Bottom, bool multiLine = false)
    {
        if (string.IsNullOrWhiteSpace(tooltipText))
            return;
        
        var style = "background-color: black";
        var options = new TooltipOptions
        {
            Style = style,
            Position = position,
            Duration = multiLine ? 20000 : 6000,
        };
        if (multiLine)
        {
            TooltipService.Open(elementReference, t =>
                @<div style="white-space:pre">
                    @tooltipText
                </div>, options);
        }
        else
        {
            TooltipService.Open(elementReference, tooltipText, options);
        }
    }

    private void ToggleSettingCompactView(MouseEventArgs mouseEventArgs)
    {
        Setting.ToggleCompactView(mouseEventArgs.CtrlKey);
        if (mouseEventArgs.CtrlKey)
            EventDistributor.Publish(EventConstants.RefreshView);
    }

    async Task UnlockSetting(ISetting setting)
    {
        if (!setting.IsReadOnly)
            return;

        var unlock = await GetUnlockConfirmation(setting);
        
        if (unlock)
            setting.Unlock();
    }
    
    async Task<bool> GetUnlockConfirmation(ISetting setting)
    {
        return await DialogService.OpenAsync("Confirm Unlock", ds =>
            @<div>
                <p class="mb-4">@(@Setting.Name) is externally managed, changes made in the Fig UI might be overriden.</p>
                <p class="mb-4">Consider any changes made here temporary.</p>
                <p class="mb-4">Do you want to proceed?.</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
                    </div>
                </div>
            </div>) ?? false;
    }
}