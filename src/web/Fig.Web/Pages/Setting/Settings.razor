@using Fig.Web.Models.Setting
@using Fig.Contracts.Authentication
@using Fig.Web.ExtensionMethods
@using Markdig

@if (SettingClients == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container-fluid p-0">
        <div class="row">
            <div class="col-md-auto" style="max-width:80%">
                <RadzenListBox AllowFiltering="true" @bind-Value=@SelectedSettingClient FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               TValue="SettingClientConfigurationModel" Data=@FilteredSettingClients TextProperty="DisplayName"
                               LoadData=@OnFilter
                               Class="w-100 p-3" style="height: 100%; min-height: calc(100vh - 120px)">
                    <Template>
                        <div class="d-flex">
                            <div class="p-1">
                                @if (!((SettingClientConfigurationModel)context).IsGroup)
                                {
                                    @if (((SettingClientConfigurationModel)context).CurrentRunSessions == 0)
                                    {
                                        <RadzenBadge Text="@(((SettingClientConfigurationModel)context).CurrentRunSessions.ToString())"
                                                     IsPill="true" BadgeStyle="BadgeStyle.Primary"/>
                                    }
                                    else if (((SettingClientConfigurationModel)context).AllRunSessionsRunningLatest)
                                    {
                                        <RadzenBadge Text="@(((SettingClientConfigurationModel)context).CurrentRunSessions.ToString())"
                                                     IsPill="true" BadgeStyle="BadgeStyle.Success"/>
                                    }
                                    else
                                    {
                                        <RadzenBadge Text="@(((SettingClientConfigurationModel)context).CurrentRunSessions.ToString())"
                                                     IsPill="true" BadgeStyle="BadgeStyle.Light"/>
                                    }
                                }
                            </div>
                            <div class="flex-grow-1 p-1" data-test-id="@(((SettingClientConfigurationModel)context).DisplayName)">
                                @(((SettingClientConfigurationModel)context).DisplayName)
                            </div>
                            <div class="p-1">
                                @if (((SettingClientConfigurationModel)context).DirtySettingCount > 0)
                                {
                                    <RadzenBadge Text="@(((SettingClientConfigurationModel)context).DirtySettingCount.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Info"/>
                                }
                            </div>
                            <div class="p-1">
                                @if (((SettingClientConfigurationModel)context).HasConfigurationError)
                                {
                                    <RadzenBadge Text="!" IsPill="true" BadgeStyle="BadgeStyle.Danger"/>
                                }
                            </div>
                        </div>

                    </Template>
                </RadzenListBox>

            </div>

            <div class="col">

                <div class="d-flex justify-content-end align-items-center">
                    <div class="p-1 flex-fill" style="margin-right: 5px">
                        <RadzenTextBox Placeholder="Filter" class="w-100" @oninput=@filterTerm.OnNext/>
                    </div>
                    @if (SelectedSettingClient?.Instance != null)
                    {
                        <div class="d-flex align-items-center">
                            <label>Different from Base</label>
                        </div>
                        <div class="p-1 d-flex align-items-center">
                            <RadzenSwitch Change=@(ShowDifferentOnlyChanged) Name="ToggleModified"/>
                        </div>
                    }
                    <div class="d-flex align-items-center">
                        <label>Advanced</label>
                    </div>
                    <div class="p-1 d-flex align-items-center">
                        <RadzenSwitch Change=@(ShowAdvancedChanged) Name="ToggleAdvanced"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(_ => SelectedSettingClient?.CollapseAll())
                                      Icon="unfold_less" Disabled=@IsClientSelected ButtonStyle="ButtonStyle.Warning"
                                      MouseEnter="@(args => ShowTooltip(args, "Collapse All"))"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(_ => SelectedSettingClient?.ExpandAll())
                                      Icon="unfold_more" Disabled=@IsClientSelected ButtonStyle="ButtonStyle.Warning"
                                      MouseEnter="@(args => ShowTooltip(args, "Expand All"))"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(_ => ShowDescription(SelectedSettingClient?.Name, SelectedSettingClient?.Description))
                                      Icon="description" Disabled=@IsClientSelected ButtonStyle="ButtonStyle.Warning"
                                      MouseEnter="@(args => ShowTooltip(args, "Client description"))"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(async _ => await OnSave()) Text="Save" Icon="save" BusyText="Saving..."
                                      IsBusy=@_isSaveInProgress Disabled=@IsSaveDisabled ButtonStyle="ButtonStyle.Success"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(async _ => await OnSaveAll()) Text="Save All" Icon="backup_table" BusyText="Saving..."
                                      IsBusy=@_isSaveAllInProgress Disabled=@IsSaveAllDisabled ButtonStyle="ButtonStyle.Success"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(async _ => await OnAddInstance()) Icon="add_circle_outline"
                                      Disabled=@IsInstanceDisabled ButtonStyle="ButtonStyle.Secondary"
                                      MouseEnter="@(args => ShowTooltip(args, "Create Instance"))"/>
                    </div>
                    @if (AccountService?.AuthenticatedUser?.Role == Role.Administrator)
                    {
                        <div class="p-1">
                            <RadzenButton Click=@(args => OnChangeSecret()) Icon="change_circle"
                                          Disabled=@IsClientSecretChangeDisabled ButtonStyle="ButtonStyle.Danger"
                                          MouseEnter="@(args => ShowTooltip(args, "Change client secret"))"/>
                        </div>
                        <div class="p-1">
                            <RadzenButton Click=@(args => OnDelete()) Icon="delete" BusyText="Deleting..."
                                          IsBusy=@_isDeleteInProgress Disabled=@IsDeleteDisabled ButtonStyle="ButtonStyle.Danger"
                                          MouseEnter="@(args => ShowTooltip(args, "Delete Client"))"/>
                        </div>
                    }


                </div>

                @if (SelectedSettingClient != null)
                {
                    if (!SelectedSettingClient.IsGroup)
                    {
                        <div class="d-flex">
                            <div class="p-1">
                                @if (SelectedSettingClient.CurrentRunSessions == 0)
                                {
                                    <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Primary"/>
                                }
                                else if (SelectedSettingClient.AllRunSessionsRunningLatest)

                                {
                                    <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Success"/>
                                }
                                else
                                {
                                    <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Light"/>
                                }
                            </div>
                            <div class="p-1">
                                online client(s). @(SelectedSettingClient.AllRunSessionsRunningLatest ? "All running latest settings." : "Running outdated settings.") @(SelectedSettingClient?.Settings.Count) setting(s) (@(SelectedSettingClient?.Settings.Count(a => a.Advanced)) advanced).
                            </div>
                            @if (SelectedSettingClient?.DirtySettingCount > 0)
                            {
                                <div class="p-1">
                                    <RadzenBadge Text="@(SelectedSettingClient?.DirtySettingCount.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Info"/>
                                </div>
                                <div class="p-1">
                                    unsaved change(s).
                                </div>
                            }

                            @if (SelectedSettingClient?.HasConfigurationError == true)
                            {
                                <div class="p-1">
                                    Configuration error(s) see event log for details.
                                </div>
                            }

                        </div>
                    }
                    else
                    {
                        <div class="d-flex">
                            <div class="p-1">
                                Setting Group. @(SelectedSettingClient?.Settings.Count) setting(s) (@(SelectedSettingClient?.Settings.Count(a => a.Advanced)) advanced).
                            </div>
                            @if (SelectedSettingClient?.DirtySettingCount > 0)
                            {
                                <div class="p-1">
                                    <RadzenBadge Text="@(SelectedSettingClient?.DirtySettingCount.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Success"/>
                                </div>
                                <div class="p-1">
                                    unsaved change(s).
                                </div>
                            }

                            @if (SelectedSettingClient?.HasConfigurationError == true)
                            {
                                <div class="p-1">
                                    Configuration error(s) see event log for details.
                                </div>
                            }
                        </div>
                    }

                    @if (SelectedSettingClient is not null)
                    {
                        @foreach (var setting in SelectedSettingClient.Settings.OrderBy(a => a.DisplayOrder))
                        {
                            <SettingCard Setting="@setting"/>
                        }

                        @foreach (var verification in SelectedSettingClient.Verifications.OrderBy(a => a.Name))
                        {
                            <VerificationCard Verification="@verification"/>
                        }
                    }
                }
                else if (_isLoadingSettings)
                {
                    <div style="position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: flex; flex-direction: column; align-items: center;">
                        <div>
                            <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Determinate"
                                                       @bind-Value="@_loadProgress" Size="ProgressBarCircularSize.Large"/>
                        </div>
                        <div>
                            <p>@_loadingMessage</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {

    [Inject] private TooltipService TooltipService { get; set; } = null!;

    async Task<bool> GetDeleteConfirmation(string clientName)
    {
        return await DialogService.OpenAsync("Confirm Delete", ds =>
            @<div>
                <p class="mb-4">Are you sure you want to delete @clientName?</p>
                <p class="mb-4">Once a client is deleted it will not longer be able to get settings</p>
                <p class="mb-4">This action cannot be reversed.</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
        </div>
        </div>
        </div>) ?? false;
    }

    async Task ShowDescription(string? clientName, string? description)
    {
        if (clientName is null || description is null)
            return;

        await DialogService.OpenAsync($"Description for {clientName}", ds =>
                @<div>
                    @((MarkupString)description.ToHtml())
            </div>,
            new DialogOptions
            {
                Height = "90%",
                Width = "90%"
            });
    }

    async Task<bool> GetInstanceName(string clientName)
    {
        return await DialogService.OpenAsync("Name Instance", ds =>
            @<div>
                <p>Provide a name for the instance for @clientName.</p>
                <p class="mb-2">The name must match the instance provided by the requesting client.</p>
                <div class="row">
                    <RadzenTextBox @bind-Value="@_instanceName" Class="w-100 m-3"/>
                </div>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Create Instance" Click="() => ds.Close(true)" Class="mr-1"/>
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
        </div>
        </div>
        </div>) ?? false;
    }

    async Task<bool?> AskUserForChangeMessage(List<ChangeModel> changeModels)
    {
        return await DialogService.OpenAsync($"[{WebSettings.Value.Environment}] Save Changes", ds =>
            @<div>
                 <div class="row">
                     <div class="mb-0">
                         <p>The following @changeModels.Count changes will be saved:</p>
                     </div>
                     @if (changeModels.Any(a => !a.IsValid))
                     {
                         <div class="d-flex align-items-center alert alert-warning mt-0" style="margin-left:12px">
                             <RadzenIcon Icon="warning" />
                             <span>Warning: Some settings are invalid and are highlighted in red</span>
                         </div>
                    }
                     @if (changeModels.Any(a => a.IsExternallyManaged))
                     {
                         <div class="d-flex align-items-center alert alert-warning mt-0" style="margin-left:12px">
                             <RadzenIcon Icon="warning" />
                             <span>Note: Some settings are externally managed and might change</span>
                         </div>
                     }
                </div>

                <div class="d-flex flex-row" style="max-height: calc(50vh - 100px); overflow-y: auto;">
                    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" 
                                   PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                   Data="@changeModels" TItem="ChangeModel" LogicalFilterOperator="LogicalFilterOperator.Or" 
                                   AllowColumnPicking="false" RowClassFunction="@( (ChangeModel item) => !item.IsValid ? "invalid-row" : null)">
                        <Columns>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="ChangeModel" Property="ClientName" Width="150px" 
                                Filterable="true" Title="Client" TextAlign="TextAlign.Left" SortOrder="SortOrder.Descending"/>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="ChangeModel" Property="SettingName" Width="150px" 
                                Filterable="true" Title="Setting" TextAlign="TextAlign.Left"/>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="ChangeModel" Property="IsValid" Title="Status" 
                                Width="100px" TextAlign="TextAlign.Left">
                                <Template Context="data">
                                    @if (!data.IsValid)
                                    {
                                        <span class="invalid-status">
                                            <RadzenIcon Icon="error" Style="color: #ff4444;"/>
                                            Invalid
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="valid-status">
                                            <RadzenIcon Icon="check_circle" Style="color: #00C851;"/>
                                            Valid
                                        </span>
                                    }
                                </Template>
                            </Radzen.Blazor.RadzenDataGridColumn>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="ChangeModel" Property="Change" Title="Change" TextAlign="TextAlign.Left">
                                <Template>
                                    <p style="white-space: pre-wrap; word-wrap: break-word;">
                                        @foreach(var part in context.Change.Split('\n'))
                                        {
                                            if(part.StartsWith("+"))
                                            {
                                                <div style="color: lightgreen;">@part</div>
                                            }
                                            else if(part.StartsWith("-"))
                                            {
                                                <div style="color: lightcoral;">@part</div>
                                            }
                                            else
                                            {
                                                <div>@part</div> 
                                            }
                                        }
                                    </p>
                                </Template>
                            </Radzen.Blazor.RadzenDataGridColumn>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="ChangeModel" Width="80px" Property="RunSessionsToBeUpdated" 
                                Title="Live Reload Clients" TextAlign="TextAlign.Left"/>
                        </Columns>
                    </RadzenDataGrid>
                </div>

                <style>
                    .invalid-row {
                        background-color: rgba(255, 68, 68, 0.1);
                    }
                    .invalid-row:hover {
                        background-color: rgba(255, 68, 68, 0.15);
                    }
                    .invalid-status {
                        color: #ff4444;
                        display: flex;
                        align-items: center;
                        gap: 4px;
                    }
                    .valid-status {
                        color: #00C851;
                        display: flex;
                        align-items: center;
                        gap: 4px;
                    }
                    .alert {
                        margin: 1rem 0;
                        padding: 0.75rem;
                        border-radius: 4px;
                        display: flex;
                        align-items: center;
                        gap: 8px;
                    }
                    .alert-warning {
                        background-color: rgba(255, 193, 7, 0.1);
                        border: 1px solid rgba(255, 193, 7, 0.2);
                        color: #ffc107;
                    }
                </style>

                <div class="row">
                    <p style="margin-bottom: 1px; margin-top: 20px">Optional message describing the change.</p>
                </div>
                <div class="row">
                    <RadzenTextArea @bind-Value="@_changeMessage" Rows="3" Class="w-100 m-3"/>
                </div>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Save" Click="() => ds.Close(true)" Class="mr-1"/>
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                    </div>
                </div>
            </div>, new DialogOptions()
            {
                Width = "80%",
                Height = "auto",
                CloseDialogOnEsc = true
            });
    }

    async Task PerformSecretChange(string clientName)
    {
        await DialogService.OpenAsync<ClientSecretChange>($"Change client secret for {clientName}",
            new Dictionary<string, object>() { { "ClientName", clientName } },
            new DialogOptions() { Resizable = true, Draggable = true });
    }

    private void ShowTooltip(ElementReference elementReference, string tooltipText)
    {
        var style = "background-color: black";
        TooltipService.Open(elementReference, tooltipText, new TooltipOptions
        {
            Style = style,
            Position = TooltipPosition.Bottom,
            Duration = 6000
        });
    }
}