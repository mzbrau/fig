@page "/settings"
@using Fig.Web.Models
@using Fig.Web.Models.Setting
@using Fig.Contracts.Authentication
@using Fig.Contracts.Health
@using Fig.Web.ExtensionMethods

<div class="container-fluid p-0">
    <div class="row">
        <div class="col-md-auto" style="max-width:80%">
            <div style="position: relative;">
                    <span style="
                        position: absolute;
                        top: 18px;
                        right: 20px;
                        z-index: 10;
                        display: flex;
                        align-items: center;
                        padding: 2px 10px;">
                        @if (AggregateHealthStatus == FigHealthStatus.Healthy)
                        {
                            <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: green"
                                        MouseEnter="@(args => ShowTooltip(args, "All clients healthy"))"/>
                        }
                        else if (AggregateHealthStatus == FigHealthStatus.Unhealthy)
                        {
                            <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: red"
                                        MouseEnter="@(args => ShowTooltip(args, "At least one client unhealthy"))"/>
                        }
                        else if (AggregateHealthStatus == FigHealthStatus.Degraded)
                        {
                            <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: orange"
                                        MouseEnter="@(args => ShowTooltip(args, "At least one client degraded"))"/>
                        }
                        else
                        {
                            <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: grey"
                                        MouseEnter="@(args => ShowTooltip(args, "Health unknown"))"/>
                        }
                    </span>
                <RadzenListBox AllowFiltering="true" @bind-Value=@SelectedSettingClient
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               TValue="SettingClientConfigurationModel" Data=@VisibleSettingClients
                               TextProperty="DisplayName"
                               LoadData=@OnFilter
                               Class="w-100 p-3" style="height: 100%; min-height: calc(100vh - 120px)">
                    <Template>
                        <div class="d-flex" style="@GetItemIndent(((SettingClientConfigurationModel)context))">
                            <!-- Far-left expand/collapse slot (fixed width) -->
                            <div class="p-1 d-flex align-items-center" style="width: 24px; justify-content: center;">
                                @if (!((SettingClientConfigurationModel)context).IsGroup &&
                                     ((SettingClientConfigurationModel)context).Instance == null &&
                                     GetInstanceCount(((SettingClientConfigurationModel)context)) > 0)
                                {
                                    <div @onclick="@(() => ToggleClientExpand(((SettingClientConfigurationModel)context).Name))" style="cursor: pointer;">
                                        <RadzenIcon Icon="@(IsClientExpanded(((SettingClientConfigurationModel)context).Name) ? "expand_more" : "chevron_right")"
                                                    Size="1rem" Style="color: var(--rz-text-color);"
                                                    MouseEnter="@(args => ShowTooltip(args, IsClientExpanded(((SettingClientConfigurationModel)context).Name) ? "Collapse instances" : "Expand instances"))" />
                                    </div>
                                }
                                else
                                {
                                    <div style="width: 16px;"></div>
                                }
                            </div>
                            <div class="p-1">
                                @if (!((SettingClientConfigurationModel)context).IsGroup)
                                {
                                    @if (((SettingClientConfigurationModel)context).CurrentRunSessions == 0)
                                    {
                                        <RadzenBadge
                                            Text="@GetRunSessionsBadgeText(((SettingClientConfigurationModel)context))"
                                            IsPill="true" BadgeStyle="BadgeStyle.Primary"
                                            MouseEnter="@(args => ShowTooltip(args, GetRunSessionsTooltipText(((SettingClientConfigurationModel)context))))"/>
                                    }
                                    else if (((SettingClientConfigurationModel)context).AllRunSessionsRunningLatest)
                                    {
                                        <RadzenBadge
                                            Text="@GetRunSessionsBadgeText(((SettingClientConfigurationModel)context))"
                                            IsPill="true" BadgeStyle="BadgeStyle.Success"
                                            MouseEnter="@(args => ShowTooltip(args, GetRunSessionsTooltipText(((SettingClientConfigurationModel)context))))"/>
                                    }
                                    else
                                    {
                                        <RadzenBadge
                                            Text="@GetRunSessionsBadgeText(((SettingClientConfigurationModel)context))"
                                            IsPill="true" BadgeStyle="BadgeStyle.Light"
                                            MouseEnter="@(args => ShowTooltip(args, GetRunSessionsTooltipText(((SettingClientConfigurationModel)context))))"/>
                                    }
                                }
                            </div>
                            <div class="flex-grow-1 p-1 client-item-text"
                                 data-test-id="@(((SettingClientConfigurationModel)context).DisplayName)">
                                @if (((SettingClientConfigurationModel)context).IsGroup ||
                                     ((SettingClientConfigurationModel)context).Instance == null)
                                {
                                    <div class="client-name">@(((SettingClientConfigurationModel)context).DisplayName)</div>
                                }
                                else
                                {
                                    <div class="client-name">@(((SettingClientConfigurationModel)context).Name)</div>
                                    <div class="instance-name"><strong>@(((SettingClientConfigurationModel)context).Instance)</strong></div>
                                }
                            </div>
                            <div class="p-1">
                                @if (((SettingClientConfigurationModel)context).DirtySettingCount > 0)
                                {
                                    <RadzenBadge
                                        Text="@(((SettingClientConfigurationModel)context).DirtySettingCount.ToString())"
                                        IsPill="true" BadgeStyle="BadgeStyle.Info"
                                        MouseEnter="@(args => ShowTooltip(args, $"{((SettingClientConfigurationModel)context).DirtySettingCount.ToString()} unsaved setting change(s)"))"/>
                                }
                            </div>
                            <div class="p-1">
                                @if (((SettingClientConfigurationModel)context).CurrentHealth == FigHealthStatus.Healthy)
                                {
                                    <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: green"
                                                MouseEnter="@(args => ShowTooltip(args, $"All instances are healthy"))"/>
                                }
                                else if (((SettingClientConfigurationModel)context).CurrentHealth == FigHealthStatus.Unhealthy)
                                {
                                    <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: red"
                                                MouseEnter="@(args => ShowTooltip(args, $"Some instances are unhealthy"))"/>
                                }
                                else if (((SettingClientConfigurationModel)context).CurrentHealth == FigHealthStatus.Degraded)
                                {
                                    <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: orange"
                                                MouseEnter="@(args => ShowTooltip(args, $"Some instances are degraded"))"/>
                                }
                                else if (((SettingClientConfigurationModel)context).CurrentRunSessions > 0)
                                {
                                    <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: grey"
                                                MouseEnter="@(args => ShowTooltip(args, $"Health Unknown"))"/>
                                }
                            </div>
                            
                        </div>

                    </Template>
                </RadzenListBox>
            </div>

        </div>

        <div class="col">
            <!-- Toolbar reference point for calculating floating position -->
            <div @ref="_toolbarRef" class="toolbar-reference"></div>
            
            <!-- Floating toolbar container -->
            <div class="@GetToolbarCssClass()" style="@GetToolbarStyle()">
                <div class="d-flex justify-content-end align-items-center toolbar-content">
                    <div class="p-1 flex-fill" style="margin-right: 5px">
                        <RadzenTextBox Placeholder="Filter" class="w-100" @oninput=@_filterTerm.OnNext/>
                    </div>
                    @if (SelectedSettingClient?.Instance != null)
                    {
                        <div class="d-flex align-items-center">
                            <label>Different from Base</label>
                        </div>
                        <div class="p-1 d-flex align-items-center">
                            <RadzenSwitch Change=@(ShowDifferentOnlyChanged) Name="ToggleModified"/>
                        </div>
                    }
                    <div class="d-flex align-items-center">
                        <label>Advanced</label>
                    </div>
                    <div class="p-1 d-flex align-items-center">
                        <RadzenSwitch @bind-Value="@_showAdvanced" Change=@(ShowAdvancedChanged) Name="ToggleAdvanced"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(_ => SelectedSettingClient?.CollapseAll())
                                      Icon="unfold_less" Disabled=@IsClientSelected ButtonStyle="ButtonStyle.Warning"
                                      MouseEnter="@(args => ShowTooltip(args, "Collapse All"))"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(_ => SelectedSettingClient?.ExpandAll())
                                      Icon="unfold_more" Disabled=@IsClientSelected ButtonStyle="ButtonStyle.Warning"
                                      MouseEnter="@(args => ShowTooltip(args, "Expand All"))"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton
                            Click=@(_ => ShowDescription(SelectedSettingClient?.Name, SelectedSettingClient?.Description))
                            Icon="description" Disabled=@IsClientSelected ButtonStyle="ButtonStyle.Warning"
                            MouseEnter="@(args => ShowTooltip(args, "Client description"))"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(async _ => await OnSave()) Text="Save" Icon="save" BusyText="Saving..."
                                      IsBusy=@_isSaveInProgress Disabled=@IsSaveDisabled ButtonStyle="ButtonStyle.Success"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(async _ => await OnSaveAll()) Text="Save All" Icon="backup_table"
                                      BusyText="Saving..."
                                      IsBusy=@_isSaveAllInProgress Disabled=@IsSaveAllDisabled
                                      ButtonStyle="ButtonStyle.Success"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(async _ => await OnAddInstance()) Icon="add_circle_outline"
                                      Disabled=@IsInstanceDisabled ButtonStyle="ButtonStyle.Secondary"
                                      MouseEnter="@(args => ShowTooltip(args, "Create Instance"))"/>
                    </div>
                    @if (AccountService.AuthenticatedUser?.Role == Role.Administrator)
                    {
                        <div class="p-1">
                            <RadzenButton Click=@(_ => OnChangeSecret()) Icon="change_circle"
                                          Disabled=@IsClientSecretChangeDisabled ButtonStyle="ButtonStyle.Danger"
                                          MouseEnter="@(args => ShowTooltip(args, "Change client secret"))"/>
                        </div>
                        <div class="p-1">
                            <RadzenButton Click=@(_ => OnDelete()) Icon="delete" BusyText="Deleting..."
                                          IsBusy=@_isDeleteInProgress Disabled=@IsDeleteDisabled
                                          ButtonStyle="ButtonStyle.Danger"
                                          MouseEnter="@(args => ShowTooltip(args, "Delete Client"))"/>
                        </div>
                    }
                </div>
            </div>

            @if (SelectedSettingClient != null)
            {
                if (!SelectedSettingClient.IsGroup)
                {
                    <div class="d-flex">
                        <div class="p-1">
                            @if (SelectedSettingClient.CurrentRunSessions == 0)
                            {
                                <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())"
                                             IsPill="true" BadgeStyle="BadgeStyle.Primary"/>
                            }
                            else if (SelectedSettingClient.AllRunSessionsRunningLatest)

                            {
                                <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())"
                                             IsPill="true" BadgeStyle="BadgeStyle.Success"/>
                            }
                            else
                            {
                                <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())"
                                             IsPill="true" BadgeStyle="BadgeStyle.Light"/>
                            }
                        </div>
                        <div class="p-1">
                            online
                            client(s). @(SelectedSettingClient.AllRunSessionsRunningLatest ? "All running latest settings." : "Running outdated settings.") @(SelectedSettingClient?.Settings.Count) setting(s)
                            (@(SelectedSettingClient?.Settings.Count(a => a.Advanced)) advanced).
                        </div>
                        @if (SelectedSettingClient?.DirtySettingCount > 0)
                        {
                            <div class="p-1">
                                <RadzenBadge Text="@(SelectedSettingClient?.DirtySettingCount.ToString())"
                                             IsPill="true" BadgeStyle="BadgeStyle.Info"/>
                            </div>
                            <div class="p-1">
                                unsaved change(s).
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="d-flex">
                        <div class="p-1">
                            Setting Group. @(SelectedSettingClient?.Settings.Count) setting(s)
                            (@(SelectedSettingClient?.Settings.Count(a => a.Advanced)) advanced).
                        </div>
                        @if (SelectedSettingClient?.DirtySettingCount > 0)
                        {
                            <div class="p-1">
                                <RadzenBadge Text="@(SelectedSettingClient?.DirtySettingCount.ToString())"
                                             IsPill="true" BadgeStyle="BadgeStyle.Success"/>
                            </div>
                            <div class="p-1">
                                unsaved change(s).
                            </div>
                        }
                    </div>
                }

                @if (SelectedSettingClient is not null)
                {
                    var orderedSettings = SelectedSettingClient.Settings.OrderBy(a => a.DisplayOrder).ToList();
                    
                    for (int i = 0; i < orderedSettings.Count; i++)
                    {
                        var setting = orderedSettings[i];
                        var settingIndex = i;
                        
                        @if (setting.Heading != null)
                        {
                            var referencedSettings = GetSettingsAfterHeading(orderedSettings, settingIndex);
                            <HeadingCard Heading="@setting.Heading"
                                         ClientName="@SelectedSettingClient.Name"
                                         Instance="@(SelectedSettingClient.Instance ?? string.Empty)"
                                         SettingName="@setting.Name"
                                         HeadingType="@HeadingType.Setting"
                                         ShowAdvanced="@_showAdvanced"
                                         IsCollapsed="@IsCollapsedState(orderedSettings)"
                                         ReferencedSettings="@referencedSettings" />
                        }
                        <SettingCard Setting="@setting"/>
                    }

                    @if (SelectedSettingClient.CustomActions.Any())
                    {
                        <HeadingCard Heading="@(HeadingModel.CreateForCustomAction())"
                                     ClientName="@SelectedSettingClient.Name"
                                     Instance="@(SelectedSettingClient.Instance ?? string.Empty)"
                                     SettingName="custom-actions"
                                     HeadingType="@HeadingType.CustomAction"
                                     ShowAdvanced="@_showAdvanced"
                                     IsCollapsed="@false"
                                     ReferencedSettings="@(new List<ISetting>())" />
                    }
                    
                    @foreach (var customAction in SelectedSettingClient.CustomActions.OrderBy(a => a.Name))
                    {
                        <CustomActionCard CustomAction="@customAction" ClientName="@SelectedSettingClient.Name"/>
                    }
                }
            }
            else if (_isLoadingSettings)
            {
                <div
                    style="position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: flex; flex-direction: column; align-items: center;">
                    <div>
                        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Determinate"
                                                   @bind-Value="@_loadProgress" Size="ProgressBarCircularSize.Large"/>
                    </div>
                    <div>
                        <p>@_loadingMessage</p>
                    </div>
                </div>
            }
            else
            {
                var noClients = FilteredSettingClients is null || !FilteredSettingClients.Any();
                <div class="empty-state">
                    <div class="empty-card">
                        <div class="empty-icon">
                            @if (noClients)
                            {
                                <RadzenIcon Icon="hub" Style="font-size: 3rem; color: var(--rz-primary); filter: drop-shadow(0 2px 2px rgba(0,0,0,0.15));" />
                            }
                            else
                            {
                                <RadzenIcon Icon="touch_app" Style="font-size: 3rem; color: var(--rz-primary); filter: drop-shadow(0 2px 2px rgba(0,0,0,0.15));" />
                            }
                        </div>
                        <div class="empty-title">
                            @(noClients ? "No setting clients yet" : "Select a client to get started")
                        </div>
                        <div class="empty-subtitle">
                            @(noClients
                                ? "There are no clients loaded. Start a client app connected to Fig or check API connectivity."
                                : "Pick a client from the list on the left or use the filter to quickly find one.")
                        </div>
                        @if (!noClients)
                        {
                            <div class="empty-hints">
                                <div class="hint-chip">
                                    <RadzenIcon Icon="search" Style="font-size: 1rem; margin-right: 6px;" />
                                    Use the filter box to narrow results
                                </div>
                                <div class="hint-chip">
                                    <RadzenIcon Icon="favorite" Style="font-size: 1rem; margin-right: 6px;" />
                                    Health indicator shows overall status
                                </div>
                                <div class="hint-chip">
                                    <RadzenIcon Icon="description" Style="font-size: 1rem; margin-right: 6px;" />
                                    View client description from the toolbar
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .glow-highlight {
        box-shadow: 0 0 0 4px yellow, 0 0 16px 8px yellow;
        transition: box-shadow 0.3s ease;
        z-index: 100;
    }

    .toolbar-reference {
        height: 0;
        width: 100%;
    }

    .toolbar-container {
        transition: all 0.3s ease;
        width: 100%;
        z-index: 1000;
    }

    .toolbar-fixed {
        position: relative;
        background: transparent;
    }

    .toolbar-floating {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        animation: slideDown 0.3s ease-out;
    }

    @@keyframes slideDown {
        from {
            transform: translateY(-100%);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .toolbar-content {
        padding: 10px 15px;
        margin: 0 auto;
        max-width: 100%;
        background: transparent;
    }

    /* Dark theme support */
    @@media (prefers-color-scheme: dark) {
        .toolbar-floating {
            background: rgba(33, 37, 41, 0.95);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
    }

    /* Ensure floating toolbar maintains proper spacing */
    .toolbar-floating + * {
        margin-top: 60px; /* toolbar height */
    }
    
    /* Left list item text layout */
    .client-item-text .client-name {
        font-size: 0.95rem;
        font-weight: 500;
        line-height: 1.1;
    }
    .client-item-text .instance-name {
        margin-top: 2px;
        font-size: 0.8rem;
        font-weight: 700;
        opacity: 0.85;
    }

    /* Empty state styles */
    .empty-state {
        min-height: calc(100vh - 160px);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 24px;
    }

    .empty-card {
        max-width: 860px;
        width: 100%;
        background: linear-gradient(135deg, rgba(99,102,241,0.08), rgba(16,185,129,0.08));
        border: 1px solid rgba(0,0,0,0.08);
        border-radius: 16px;
        padding: 28px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.08);
        text-align: center;
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
        animation: floaty 6s ease-in-out infinite;
    }

    .empty-icon {
        height: 80px;
        width: 80px;
        margin: 0 auto 14px auto;
        display: grid;
        place-items: center;
        border-radius: 20px;
        background: rgba(0,0,0,0.05);
        border: 1px solid rgba(0,0,0,0.12);
        box-shadow: inset 0 0 0 2px rgba(255,255,255,0.35), 0 8px 18px rgba(0,0,0,0.12);
    }

    .empty-title {
        font-size: 1.25rem;
        font-weight: 700;
        margin-bottom: 6px;
    }

    .empty-subtitle {
        font-size: 0.95rem;
        opacity: 0.85;
        margin-bottom: 14px;
    }

    .empty-hints {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        justify-content: center;
    }

    .hint-chip {
        display: inline-flex;
        align-items: center;
        border: 1px dashed rgba(0,0,0,0.15);
        border-radius: 999px;
        padding: 6px 12px;
        font-size: 0.85rem;
        background: rgba(255,255,255,0.6);
    }

    @@keyframes floaty {
        0% { transform: translateY(0); }
        50% { transform: translateY(-4px); }
        100% { transform: translateY(0); }
    }

    @@media (prefers-color-scheme: dark) {
        .empty-card {
            background: linear-gradient(135deg, rgba(99,102,241,0.12), rgba(16,185,129,0.12));
            border-color: rgba(255,255,255,0.12);
            box-shadow: 0 10px 28px rgba(0,0,0,0.35);
        }
        .empty-icon {
            background: rgba(255,255,255,0.08);
            border: 1px solid rgba(255,255,255,0.18);
            box-shadow: inset 0 0 0 2px rgba(0,0,0,0.2), 0 8px 18px rgba(0,0,0,0.45);
        }
        .hint-chip {
            background: rgba(255,255,255,0.06);
            border-color: rgba(255,255,255,0.14);
        }
    }
</style>

@code {

    async Task<bool> GetDeleteConfirmation(string clientName)
    {
        return await DialogService.OpenAsync("Confirm Delete", ds =>
            @<div>
                <p class="mb-4">Are you sure you want to delete @clientName?</p>
                <p class="mb-4">Once a client is deleted it will no longer be able to get settings</p>
                <p class="mb-4">This action cannot be reversed.</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary"
                                      Class="mr-1"/>
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
                    </div>
                </div>
            </div>) ?? false;
    }

    async Task ShowDescription(string? clientName, string? description)
    {
        if (clientName is null || description is null)
            return;

        await DialogService.OpenAsync($"Description for {clientName}", _ =>
                @<div>
                    @((MarkupString)description.ToHtml())
                </div>,
            new DialogOptions
            {
                Height = "90%",
                Width = "90%"
            });
    }

    async Task<bool> GetInstanceName(string clientName)
    {
        var availableInstances = GetAvailableRunningInstances(clientName);
        
        return await DialogService.OpenAsync("Name Instance", ds =>
            @<div>
                <p>Provide a name for the instance for @clientName.</p>
                <p class="mb-2">The name must match the instance provided by the requesting client.</p>
                @if (availableInstances.Any())
                {
                    <div class="row">
                        <div class="col">
                            <p class="mb-2"><strong>Available running instances:</strong></p>
                            <RadzenDropDown @bind-Value="@_instanceName" 
                                           Data="@availableInstances" 
                                           AllowClear="true"
                                           Placeholder="Select a running instance or clear to enter custom name..."
                                           Class="w-100 mb-3"/>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <p class="mb-2">Or enter a custom instance name:</p>
                            <RadzenTextBox @bind-Value="@_instanceName" 
                                          Placeholder="Enter custom instance name..."
                                          Class="w-100 mb-2"/>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row">
                        <RadzenTextBox @bind-Value="@_instanceName" 
                                      Placeholder="Enter instance name..."
                                      Class="w-100 m-3"/>
                    </div>
                }
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Create Instance" Click="() => ds.Close(true)" Class="mr-1"/>
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary"
                                      Class="mr-1"/>
                    </div>
                </div>
            </div>) ?? false;
    }

    async Task<bool?> AskUserForChangeMessage(List<ChangeModel> changeModels, ChangeDetailsModel changeDetails)
    {
        return await DialogService.OpenAsync<ChangeMessageDialog>(
            $"[{WebSettings.Value.Environment}] Save Changes",
            new Dictionary<string, object>()
            {
                { "ChangeModels", changeModels },
                { "ChangeDetails", changeDetails }
            },
            new DialogOptions()
            {
                Width = "80%",
                Height = "auto",
                CloseDialogOnEsc = true
            });
    }

    async Task PerformSecretChange(string clientName)
    {
        await DialogService.OpenAsync<ClientSecretChange>($"Change client secret for {clientName}",
            new Dictionary<string, object>() { { "ClientName", clientName } },
            new DialogOptions() { Resizable = true, Draggable = true });
    }

    private void ShowTooltip(ElementReference elementReference, string tooltipText)
    {
        var style = "background-color: black";
        TooltipService.Open(elementReference, tooltipText, new TooltipOptions
        {
            Style = style,
            Duration = 6000
        });
    }

    private async Task ShowSearchDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<div style="height: 100%; display: flex; flex-direction: column;">
                <RadzenAutoComplete
                    @ref="@SearchAutoComplete"
                    Style="width: 100%; height: 100%;"
                    Placeholder="Search settings..."
                    LoadData=@OnLoadData
                    MinLength="1"
                    FilterDelay="300"
                    SelectedItemChanged="OnSelectedSearchItemChanged"
                    PopupStyle="max-height: 400px; width: 100%;"
                    TValue="ISearchableSetting">
                    <Template>
                        <div
                            style="display: grid; grid-template-columns: 56px 1.2fr 1.5fr 2px 0.9fr; align-items: center; min-height: 44px; padding: 2px 0;">
                            <!-- Icon box -->
                            <div
                                style="display: flex; align-items: center; justify-content: center; color: @(context.CategoryColor == "#00000000" ? "white" : context.CategoryColor); border-radius: 14px;">
                                <RadzenIcon Icon="@(context.IconKey)" Style="font-size: 2rem;"/>
                            </div>
                            <!-- Setting name and description -->
                            <div style="display: flex; flex-direction: column; justify-content: center; min-width: 0;">
                                <div
                                    style="font-size: 1rem; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.DisplayName
                                </div>
                                <div
                                    style="font-size: 0.6rem; color: #e0e0e0; opacity: 0.85; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.TruncatedDescription
                                </div>
                            </div>
                            <!-- Setting value -->
                            <div
                                style="font-size: 0.8rem; color: #b0b0b0; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                @context.StringValue
                            </div>
                            <!-- Separator -->
                            <div
                                style="width: 2px; background: #888; height: 36px; margin-right: 15px; border-radius: 2px; justify-self: center;"></div>
                            <!-- Client name and instance -->
                            <div style="display: flex; flex-direction: column; justify-content: center; min-width: 0;">
                                <div
                                    style="font-size: 1rem; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.ParentName
                                </div>
                                <div
                                    style="font-size: 0.6rem; color: #e0e0e0; opacity: 0.85; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.ParentInstance
                                </div>
                            </div>
                        </div>
                    </Template>
                </RadzenAutoComplete>
            </div>, new DialogOptions()
        {
            CloseDialogOnOverlayClick = true,
            CloseDialogOnEsc = true,
            ShowClose = false,
            ShowTitle = false,
            Style = "min-height: 10px; width: 70vw; top: 25vh; position: fixed; transform: translateY(0);",
            AutoFocusFirstElement = true
        });
    }



}



