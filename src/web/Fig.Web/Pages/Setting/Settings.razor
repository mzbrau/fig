@using Fig.Web.Models.Setting
@using Fig.Contracts.Authentication
@using Fig.Contracts.Health
@using Fig.Web.ExtensionMethods

@if (SettingClients == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container-fluid p-0">
        <div class="row">
            <div class="col-md-auto" style="max-width:80%">
                <div style="position: relative;">
                    <span style="
                        position: absolute;
                        top: 18px;
                        right: 20px;
                        z-index: 10;
                        display: flex;
                        align-items: center;
                        padding: 2px 10px;">
                        @if (AggregateHealthStatus == FigHealthStatus.Healthy)
                        {
                            <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: green" MouseEnter="@(args => ShowTooltip(args, "All clients healthy"))" />
                        }
                        else if (AggregateHealthStatus == FigHealthStatus.Unhealthy)
                        {
                            <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: red" MouseEnter="@(args => ShowTooltip(args, "At least one client unhealthy"))" />
                        }
                        else if (AggregateHealthStatus == FigHealthStatus.Degraded)
                        {
                            <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: orange" MouseEnter="@(args => ShowTooltip(args, "At least one client degraded"))" />
                        }
                        else
                        {
                            <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: grey" MouseEnter="@(args => ShowTooltip(args, "Health unknown"))" />
                        }
                    </span>
                    <RadzenListBox AllowFiltering="true" @bind-Value=@SelectedSettingClient FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                   TValue="SettingClientConfigurationModel" Data=@FilteredSettingClients TextProperty="DisplayName"
                                   LoadData=@OnFilter
                                   Class="w-100 p-3" style="height: 100%; min-height: calc(100vh - 120px)">
                        <Template>
                            <div class="d-flex">
                                <div class="p-1">
                                    @if (!((SettingClientConfigurationModel)context).IsGroup)
                                    {
                                        @if (((SettingClientConfigurationModel)context).CurrentRunSessions == 0)
                                        {
                                            <RadzenBadge Text="@(((SettingClientConfigurationModel)context).CurrentRunSessions.ToString())"
                                                         IsPill="true" BadgeStyle="BadgeStyle.Primary"
                                                         MouseEnter="@(args => ShowTooltip(args, "No currently running clients"))"/>
                                        }
                                        else if (((SettingClientConfigurationModel)context).AllRunSessionsRunningLatest)
                                        {
                                            <RadzenBadge Text="@(((SettingClientConfigurationModel)context).CurrentRunSessions.ToString())"
                                                         IsPill="true" BadgeStyle="BadgeStyle.Success"
                                                         MouseEnter="@(args => ShowTooltip(args, $"{((SettingClientConfigurationModel)context).CurrentRunSessions.ToString()} currently running client(s), all running latest settings"))"/>
                                        }
                                        else
                                        {
                                            <RadzenBadge Text="@(((SettingClientConfigurationModel)context).CurrentRunSessions.ToString())"
                                                         IsPill="true" BadgeStyle="BadgeStyle.Light"
                                                         MouseEnter="@(args => ShowTooltip(args, $"{((SettingClientConfigurationModel)context).CurrentRunSessions.ToString()} currently running client(s), some with stale settings"))"/>
                                        }
                                    }
                                </div>
                                <div class="flex-grow-1 p-1" data-test-id="@(((SettingClientConfigurationModel)context).DisplayName)">
                                    @(((SettingClientConfigurationModel)context).DisplayName)
                                </div>
                                <div class="p-1">
                                    @if (((SettingClientConfigurationModel)context).DirtySettingCount > 0)
                                    {
                                        <RadzenBadge Text="@(((SettingClientConfigurationModel)context).DirtySettingCount.ToString())"
                                                     IsPill="true" BadgeStyle="BadgeStyle.Info"
                                                     MouseEnter="@(args => ShowTooltip(args, $"{((SettingClientConfigurationModel)context).DirtySettingCount.ToString()} unsaved setting change(s)"))"/>
                                    }
                                </div>
                                <div class="p-1">
                                    @if (((SettingClientConfigurationModel)context).CurrentHealth == FigHealthStatus.Healthy)
                                    {
                                        <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: green"
                                                    MouseEnter="@(args => ShowTooltip(args, $"All instances are healthy"))"/>
                                    }
                                    else if (((SettingClientConfigurationModel)context).CurrentHealth == FigHealthStatus.Unhealthy)
                                    {
                                        <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: red"
                                                    MouseEnter="@(args => ShowTooltip(args, $"Some instances are unhealthy"))"/>
                                    }
                                    else if (((SettingClientConfigurationModel)context).CurrentHealth == FigHealthStatus.Degraded)
                                    {
                                        <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: orange"
                                                    MouseEnter="@(args => ShowTooltip(args, $"Some instances are degraded"))"/>
                                    }
                                    else if (((SettingClientConfigurationModel)context).CurrentRunSessions > 0)
                                    {
                                        <RadzenIcon Icon="ecg_heart" Size="1.5rem" Style="color: grey"
                                                    MouseEnter="@(args => ShowTooltip(args, $"Health Unknown"))"/>
                                    }
                                </div>
                            </div>

                        </Template>
                    </RadzenListBox>
                </div>

            </div>

            <div class="col">

                <div class="d-flex justify-content-end align-items-center">
                    <div class="p-1 flex-fill" style="margin-right: 5px">
                        <RadzenTextBox Placeholder="Filter" class="w-100" @oninput=@_filterTerm.OnNext/>
                    </div>
                    @if (SelectedSettingClient?.Instance != null)
                    {
                        <div class="d-flex align-items-center">
                            <label>Different from Base</label>
                        </div>
                        <div class="p-1 d-flex align-items-center">
                            <RadzenSwitch Change=@(ShowDifferentOnlyChanged) Name="ToggleModified"/>
                        </div>
                    }
                    <div class="d-flex align-items-center">
                        <label>Advanced</label>
                    </div>
                    <div class="p-1 d-flex align-items-center">
                        <RadzenSwitch @bind-Value="@_showAdvanced" Change=@(ShowAdvancedChanged) Name="ToggleAdvanced"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(_ => SelectedSettingClient?.CollapseAll())
                                      Icon="unfold_less" Disabled=@IsClientSelected ButtonStyle="ButtonStyle.Warning"
                                      MouseEnter="@(args => ShowTooltip(args, "Collapse All"))"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(_ => SelectedSettingClient?.ExpandAll())
                                      Icon="unfold_more" Disabled=@IsClientSelected ButtonStyle="ButtonStyle.Warning"
                                      MouseEnter="@(args => ShowTooltip(args, "Expand All"))"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(_ => ShowDescription(SelectedSettingClient?.Name, SelectedSettingClient?.Description))
                                      Icon="description" Disabled=@IsClientSelected ButtonStyle="ButtonStyle.Warning"
                                      MouseEnter="@(args => ShowTooltip(args, "Client description"))"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(async _ => await OnSave()) Text="Save" Icon="save" BusyText="Saving..."
                                      IsBusy=@_isSaveInProgress Disabled=@IsSaveDisabled ButtonStyle="ButtonStyle.Success"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(async _ => await OnSaveAll()) Text="Save All" Icon="backup_table" BusyText="Saving..."
                                      IsBusy=@_isSaveAllInProgress Disabled=@IsSaveAllDisabled ButtonStyle="ButtonStyle.Success"/>
                    </div>
                    <div class="p-1">
                        <RadzenButton Click=@(async _ => await OnAddInstance()) Icon="add_circle_outline"
                                      Disabled=@IsInstanceDisabled ButtonStyle="ButtonStyle.Secondary"
                                      MouseEnter="@(args => ShowTooltip(args, "Create Instance"))"/>
                    </div>
                    @if (AccountService?.AuthenticatedUser?.Role == Role.Administrator)
                    {
                        <div class="p-1">
                            <RadzenButton Click=@(args => OnChangeSecret()) Icon="change_circle"
                                          Disabled=@IsClientSecretChangeDisabled ButtonStyle="ButtonStyle.Danger"
                                          MouseEnter="@(args => ShowTooltip(args, "Change client secret"))"/>
                        </div>
                        <div class="p-1">
                            <RadzenButton Click=@(args => OnDelete()) Icon="delete" BusyText="Deleting..."
                                          IsBusy=@_isDeleteInProgress Disabled=@IsDeleteDisabled ButtonStyle="ButtonStyle.Danger"
                                          MouseEnter="@(args => ShowTooltip(args, "Delete Client"))"/>
                        </div>
                    }


                </div>

                @if (SelectedSettingClient != null)
                {
                    if (!SelectedSettingClient.IsGroup)
                    {
                        <div class="d-flex">
                            <div class="p-1">
                                @if (SelectedSettingClient.CurrentRunSessions == 0)
                                {
                                    <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Primary"/>
                                }
                                else if (SelectedSettingClient.AllRunSessionsRunningLatest)

                                {
                                    <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Success"/>
                                }
                                else
                                {
                                    <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Light"/>
                                }
                            </div>
                            <div class="p-1">
                                online client(s). @(SelectedSettingClient.AllRunSessionsRunningLatest ? "All running latest settings." : "Running outdated settings.") @(SelectedSettingClient?.Settings.Count) setting(s) (@(SelectedSettingClient?.Settings.Count(a => a.Advanced)) advanced).
                            </div>
                            @if (SelectedSettingClient?.DirtySettingCount > 0)
                            {
                                <div class="p-1">
                                    <RadzenBadge Text="@(SelectedSettingClient?.DirtySettingCount.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Info"/>
                                </div>
                                <div class="p-1">
                                    unsaved change(s).
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="d-flex">
                            <div class="p-1">
                                Setting Group. @(SelectedSettingClient?.Settings.Count) setting(s) (@(SelectedSettingClient?.Settings.Count(a => a.Advanced)) advanced).
                            </div>
                            @if (SelectedSettingClient?.DirtySettingCount > 0)
                            {
                                <div class="p-1">
                                    <RadzenBadge Text="@(SelectedSettingClient?.DirtySettingCount.ToString())"
                                                 IsPill="true" BadgeStyle="BadgeStyle.Success"/>
                                </div>
                                <div class="p-1">
                                    unsaved change(s).
                                </div>
                            }
                        </div>
                    }

                    @if (SelectedSettingClient is not null)
                    {
                        @foreach (var setting in SelectedSettingClient.Settings.OrderBy(a => a.DisplayOrder))
                        {
                            <SettingCard Setting="@setting"/>
                        }

                        @foreach (var verification in SelectedSettingClient.Verifications.OrderBy(a => a.Name))
                        {
                            <VerificationCard Verification="@verification"/>
                        }
                    }
                }
                else if (_isLoadingSettings)
                {
                    <div style="position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: flex; flex-direction: column; align-items: center;">
                        <div>
                            <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Determinate"
                                                       @bind-Value="@_loadProgress" Size="ProgressBarCircularSize.Large"/>
                        </div>
                        <div>
                            <p>@_loadingMessage</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<style>
    .glow-highlight {
        box-shadow: 0 0 0 4px yellow, 0 0 16px 8px yellow;
        transition: box-shadow 0.3s ease;
        z-index: 100;
    }
</style>

@code {
    private bool _isApplyRevertEditable = false;
    private string _applyOption = "Immediately";
    private string _revertOption = "Never";
    private DateTime? _applyDate;
    private TimeSpan? _applyTimespan;
    private DateTime? _revertDate;
    private TimeSpan? _revertTimespan;

    private void ToggleApplyRevertEditMode()
    {
        _isApplyRevertEditable = !_isApplyRevertEditable;
    }

    private bool ValidateApplyRevertTimes()
    {
        if (_applyOption == "At" && _revertOption == "At" && _applyDate.HasValue && _revertDate.HasValue)
        {
            return _revertDate > _applyDate;
        }
        if (_applyOption == "In" && _revertOption == "In" && _applyTimespan.HasValue && _revertTimespan.HasValue)
        {
            return _revertTimespan > _applyTimespan;
        }
        return true;
    }

    [Inject] private TooltipService TooltipService { get; set; } = null!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;

    async Task<bool> GetDeleteConfirmation(string clientName)
    {
        return await DialogService.OpenAsync("Confirm Delete", ds =>
            @<div>
                <p class="mb-4">Are you sure you want to delete @clientName?</p>
                <p class="mb-4">Once a client is deleted it will not longer be able to get settings</p>
                <p class="mb-4">This action cannot be reversed.</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
        </div>
        </div>
        </div>) ?? false;
    }

    async Task ShowDescription(string? clientName, string? description)
    {
        if (clientName is null || description is null)
            return;

        await DialogService.OpenAsync($"Description for {clientName}", ds =>
                @<div>
                    @((MarkupString)description.ToHtml())
            </div>,
            new DialogOptions
            {
                Height = "90%",
                Width = "90%"
            });
    }

    async Task<bool> GetInstanceName(string clientName)
    {
        return await DialogService.OpenAsync("Name Instance", ds =>
            @<div>
                <p>Provide a name for the instance for @clientName.</p>
                <p class="mb-2">The name must match the instance provided by the requesting client.</p>
                <div class="row">
                    <RadzenTextBox @bind-Value="@_instanceName" Class="w-100 m-3"/>
                </div>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Create Instance" Click="() => ds.Close(true)" Class="mr-1"/>
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
        </div>
        </div>
        </div>) ?? false;
    }

    async Task<bool?> AskUserForChangeMessage(List<ChangeModel> changeModels, ChangeDetailsModel changeDetails)
    {
        return await DialogService.OpenAsync<ChangeMessageDialog>(
            $"[{WebSettings.Value.Environment}] Save Changes",
            new Dictionary<string, object>()
            {
                { "ChangeModels", changeModels },
                { "ChangeDetails", changeDetails }
            },
            new DialogOptions()
            {
                Width = "80%",
                Height = "auto",
                CloseDialogOnEsc = true
            });
    }

    async Task PerformSecretChange(string clientName)
    {
        await DialogService.OpenAsync<ClientSecretChange>($"Change client secret for {clientName}",
            new Dictionary<string, object>() { { "ClientName", clientName } },
            new DialogOptions() { Resizable = true, Draggable = true });
    }

    private void ShowTooltip(ElementReference elementReference, string tooltipText)
    {
        var style = "background-color: black";
        TooltipService.Open(elementReference, tooltipText, new TooltipOptions
        {
            Style = style,
            Duration = 6000
        });
    }

    private async Task ShowSearchDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<div style="height: 100%; display: flex; flex-direction: column;">
                <RadzenAutoComplete
                    @ref="@SearchAutoComplete"
                    Style="width: 100%; height: 100%;"
                    Placeholder="Search settings..."
                    LoadData=@OnLoadData
                    MinLength="1"
                    FilterDelay="300"
                    ValueChanged="OnSelectedSearchItemChanged"
                    SelectedItemChanged="OnSelectedSearchItemChanged"
                    PopupStyle="max-height: 400px; width: 100%;"
                    TValue="ISearchableSetting">
                    <Template>
                        <div style="display: grid; grid-template-columns: 56px 1.2fr 1.5fr 2px 0.9fr; align-items: center; min-height: 44px; padding: 2px 0;">
                            <!-- Icon box -->
                            <div style="display: flex; align-items: center; justify-content: center; color: @(context.CategoryColor == "#00000000" ? "white" : context.CategoryColor); border-radius: 14px;">
                                <RadzenIcon Icon="@(context.IconKey)" Style="font-size: 2rem;" />
                            </div>
                            <!-- Setting name and description -->
                            <div style="display: flex; flex-direction: column; justify-content: center; min-width: 0;">
                                <div style="font-size: 1rem; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.DisplayName
                                </div>
                                <div style="font-size: 0.6rem; color: #e0e0e0; opacity: 0.85; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.TruncatedDescription
                                </div>
                            </div>
                            <!-- Setting value -->
                            <div style="font-size: 0.8rem; color: #b0b0b0; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                @context.StringValue
                            </div>
                            <!-- Divider -->
                            <div style="width: 2px; background: #888; height: 36px; margin-right: 15px; border-radius: 2px; justify-self: center;"></div>
                            <!-- Client name and instance -->
                            <div style="display: flex; flex-direction: column; justify-content: center; min-width: 0;">
                                <div style="font-size: 1rem; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.ParentName
                                </div>
                                <div style="font-size: 0.6rem; color: #e0e0e0; opacity: 0.85; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.ParentInstance
                                </div>
                            </div>
                        </div>
                    </Template>
                </RadzenAutoComplete>
            </div>, new DialogOptions() {
                        CloseDialogOnOverlayClick = true,
                        ShowClose = false,
                        ShowTitle = false,
                        Style = "min-height: 10px; width: 70vw; top: 25vh; position: fixed; transform: translateY(0);",
                    });
    }
}


